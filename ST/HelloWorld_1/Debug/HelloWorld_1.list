
HelloWorld_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f8c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  0800412c  0800412c  0000512c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080041c8  080041c8  0000605c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080041c8  080041c8  000051c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080041d0  080041d0  0000605c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080041d0  080041d0  000051d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080041d4  080041d4  000051d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080041d8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001fc  2000005c  08004234  0000605c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000258  08004234  00006258  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008dcc  00000000  00000000  0000608c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000017c5  00000000  00000000  0000ee58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007b8  00000000  00000000  00010620  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005e1  00000000  00000000  00010dd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016c77  00000000  00000000  000113b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000948d  00000000  00000000  00028030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090ef1  00000000  00000000  000314bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c23ae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000024f0  00000000  00000000  000c23f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  000c48e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08004114 	.word	0x08004114

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08004114 	.word	0x08004114

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__aeabi_d2uiz>:
 8000a2c:	004a      	lsls	r2, r1, #1
 8000a2e:	d211      	bcs.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a30:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a34:	d211      	bcs.n	8000a5a <__aeabi_d2uiz+0x2e>
 8000a36:	d50d      	bpl.n	8000a54 <__aeabi_d2uiz+0x28>
 8000a38:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a40:	d40e      	bmi.n	8000a60 <__aeabi_d2uiz+0x34>
 8000a42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a46:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a4e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a52:	4770      	bx	lr
 8000a54:	f04f 0000 	mov.w	r0, #0
 8000a58:	4770      	bx	lr
 8000a5a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a5e:	d102      	bne.n	8000a66 <__aeabi_d2uiz+0x3a>
 8000a60:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000a64:	4770      	bx	lr
 8000a66:	f04f 0000 	mov.w	r0, #0
 8000a6a:	4770      	bx	lr

08000a6c <__aeabi_uldivmod>:
 8000a6c:	b953      	cbnz	r3, 8000a84 <__aeabi_uldivmod+0x18>
 8000a6e:	b94a      	cbnz	r2, 8000a84 <__aeabi_uldivmod+0x18>
 8000a70:	2900      	cmp	r1, #0
 8000a72:	bf08      	it	eq
 8000a74:	2800      	cmpeq	r0, #0
 8000a76:	bf1c      	itt	ne
 8000a78:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000a7c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000a80:	f000 b988 	b.w	8000d94 <__aeabi_idiv0>
 8000a84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a8c:	f000 f806 	bl	8000a9c <__udivmoddi4>
 8000a90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a98:	b004      	add	sp, #16
 8000a9a:	4770      	bx	lr

08000a9c <__udivmoddi4>:
 8000a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000aa0:	9d08      	ldr	r5, [sp, #32]
 8000aa2:	468e      	mov	lr, r1
 8000aa4:	4604      	mov	r4, r0
 8000aa6:	4688      	mov	r8, r1
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d14a      	bne.n	8000b42 <__udivmoddi4+0xa6>
 8000aac:	428a      	cmp	r2, r1
 8000aae:	4617      	mov	r7, r2
 8000ab0:	d962      	bls.n	8000b78 <__udivmoddi4+0xdc>
 8000ab2:	fab2 f682 	clz	r6, r2
 8000ab6:	b14e      	cbz	r6, 8000acc <__udivmoddi4+0x30>
 8000ab8:	f1c6 0320 	rsb	r3, r6, #32
 8000abc:	fa01 f806 	lsl.w	r8, r1, r6
 8000ac0:	fa20 f303 	lsr.w	r3, r0, r3
 8000ac4:	40b7      	lsls	r7, r6
 8000ac6:	ea43 0808 	orr.w	r8, r3, r8
 8000aca:	40b4      	lsls	r4, r6
 8000acc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ad0:	fa1f fc87 	uxth.w	ip, r7
 8000ad4:	fbb8 f1fe 	udiv	r1, r8, lr
 8000ad8:	0c23      	lsrs	r3, r4, #16
 8000ada:	fb0e 8811 	mls	r8, lr, r1, r8
 8000ade:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ae2:	fb01 f20c 	mul.w	r2, r1, ip
 8000ae6:	429a      	cmp	r2, r3
 8000ae8:	d909      	bls.n	8000afe <__udivmoddi4+0x62>
 8000aea:	18fb      	adds	r3, r7, r3
 8000aec:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000af0:	f080 80ea 	bcs.w	8000cc8 <__udivmoddi4+0x22c>
 8000af4:	429a      	cmp	r2, r3
 8000af6:	f240 80e7 	bls.w	8000cc8 <__udivmoddi4+0x22c>
 8000afa:	3902      	subs	r1, #2
 8000afc:	443b      	add	r3, r7
 8000afe:	1a9a      	subs	r2, r3, r2
 8000b00:	b2a3      	uxth	r3, r4
 8000b02:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b06:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b0a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000b0e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b12:	459c      	cmp	ip, r3
 8000b14:	d909      	bls.n	8000b2a <__udivmoddi4+0x8e>
 8000b16:	18fb      	adds	r3, r7, r3
 8000b18:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000b1c:	f080 80d6 	bcs.w	8000ccc <__udivmoddi4+0x230>
 8000b20:	459c      	cmp	ip, r3
 8000b22:	f240 80d3 	bls.w	8000ccc <__udivmoddi4+0x230>
 8000b26:	443b      	add	r3, r7
 8000b28:	3802      	subs	r0, #2
 8000b2a:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000b2e:	eba3 030c 	sub.w	r3, r3, ip
 8000b32:	2100      	movs	r1, #0
 8000b34:	b11d      	cbz	r5, 8000b3e <__udivmoddi4+0xa2>
 8000b36:	40f3      	lsrs	r3, r6
 8000b38:	2200      	movs	r2, #0
 8000b3a:	e9c5 3200 	strd	r3, r2, [r5]
 8000b3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b42:	428b      	cmp	r3, r1
 8000b44:	d905      	bls.n	8000b52 <__udivmoddi4+0xb6>
 8000b46:	b10d      	cbz	r5, 8000b4c <__udivmoddi4+0xb0>
 8000b48:	e9c5 0100 	strd	r0, r1, [r5]
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	4608      	mov	r0, r1
 8000b50:	e7f5      	b.n	8000b3e <__udivmoddi4+0xa2>
 8000b52:	fab3 f183 	clz	r1, r3
 8000b56:	2900      	cmp	r1, #0
 8000b58:	d146      	bne.n	8000be8 <__udivmoddi4+0x14c>
 8000b5a:	4573      	cmp	r3, lr
 8000b5c:	d302      	bcc.n	8000b64 <__udivmoddi4+0xc8>
 8000b5e:	4282      	cmp	r2, r0
 8000b60:	f200 8105 	bhi.w	8000d6e <__udivmoddi4+0x2d2>
 8000b64:	1a84      	subs	r4, r0, r2
 8000b66:	eb6e 0203 	sbc.w	r2, lr, r3
 8000b6a:	2001      	movs	r0, #1
 8000b6c:	4690      	mov	r8, r2
 8000b6e:	2d00      	cmp	r5, #0
 8000b70:	d0e5      	beq.n	8000b3e <__udivmoddi4+0xa2>
 8000b72:	e9c5 4800 	strd	r4, r8, [r5]
 8000b76:	e7e2      	b.n	8000b3e <__udivmoddi4+0xa2>
 8000b78:	2a00      	cmp	r2, #0
 8000b7a:	f000 8090 	beq.w	8000c9e <__udivmoddi4+0x202>
 8000b7e:	fab2 f682 	clz	r6, r2
 8000b82:	2e00      	cmp	r6, #0
 8000b84:	f040 80a4 	bne.w	8000cd0 <__udivmoddi4+0x234>
 8000b88:	1a8a      	subs	r2, r1, r2
 8000b8a:	0c03      	lsrs	r3, r0, #16
 8000b8c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b90:	b280      	uxth	r0, r0
 8000b92:	b2bc      	uxth	r4, r7
 8000b94:	2101      	movs	r1, #1
 8000b96:	fbb2 fcfe 	udiv	ip, r2, lr
 8000b9a:	fb0e 221c 	mls	r2, lr, ip, r2
 8000b9e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000ba2:	fb04 f20c 	mul.w	r2, r4, ip
 8000ba6:	429a      	cmp	r2, r3
 8000ba8:	d907      	bls.n	8000bba <__udivmoddi4+0x11e>
 8000baa:	18fb      	adds	r3, r7, r3
 8000bac:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000bb0:	d202      	bcs.n	8000bb8 <__udivmoddi4+0x11c>
 8000bb2:	429a      	cmp	r2, r3
 8000bb4:	f200 80e0 	bhi.w	8000d78 <__udivmoddi4+0x2dc>
 8000bb8:	46c4      	mov	ip, r8
 8000bba:	1a9b      	subs	r3, r3, r2
 8000bbc:	fbb3 f2fe 	udiv	r2, r3, lr
 8000bc0:	fb0e 3312 	mls	r3, lr, r2, r3
 8000bc4:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000bc8:	fb02 f404 	mul.w	r4, r2, r4
 8000bcc:	429c      	cmp	r4, r3
 8000bce:	d907      	bls.n	8000be0 <__udivmoddi4+0x144>
 8000bd0:	18fb      	adds	r3, r7, r3
 8000bd2:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000bd6:	d202      	bcs.n	8000bde <__udivmoddi4+0x142>
 8000bd8:	429c      	cmp	r4, r3
 8000bda:	f200 80ca 	bhi.w	8000d72 <__udivmoddi4+0x2d6>
 8000bde:	4602      	mov	r2, r0
 8000be0:	1b1b      	subs	r3, r3, r4
 8000be2:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000be6:	e7a5      	b.n	8000b34 <__udivmoddi4+0x98>
 8000be8:	f1c1 0620 	rsb	r6, r1, #32
 8000bec:	408b      	lsls	r3, r1
 8000bee:	fa22 f706 	lsr.w	r7, r2, r6
 8000bf2:	431f      	orrs	r7, r3
 8000bf4:	fa0e f401 	lsl.w	r4, lr, r1
 8000bf8:	fa20 f306 	lsr.w	r3, r0, r6
 8000bfc:	fa2e fe06 	lsr.w	lr, lr, r6
 8000c00:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000c04:	4323      	orrs	r3, r4
 8000c06:	fa00 f801 	lsl.w	r8, r0, r1
 8000c0a:	fa1f fc87 	uxth.w	ip, r7
 8000c0e:	fbbe f0f9 	udiv	r0, lr, r9
 8000c12:	0c1c      	lsrs	r4, r3, #16
 8000c14:	fb09 ee10 	mls	lr, r9, r0, lr
 8000c18:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000c1c:	fb00 fe0c 	mul.w	lr, r0, ip
 8000c20:	45a6      	cmp	lr, r4
 8000c22:	fa02 f201 	lsl.w	r2, r2, r1
 8000c26:	d909      	bls.n	8000c3c <__udivmoddi4+0x1a0>
 8000c28:	193c      	adds	r4, r7, r4
 8000c2a:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000c2e:	f080 809c 	bcs.w	8000d6a <__udivmoddi4+0x2ce>
 8000c32:	45a6      	cmp	lr, r4
 8000c34:	f240 8099 	bls.w	8000d6a <__udivmoddi4+0x2ce>
 8000c38:	3802      	subs	r0, #2
 8000c3a:	443c      	add	r4, r7
 8000c3c:	eba4 040e 	sub.w	r4, r4, lr
 8000c40:	fa1f fe83 	uxth.w	lr, r3
 8000c44:	fbb4 f3f9 	udiv	r3, r4, r9
 8000c48:	fb09 4413 	mls	r4, r9, r3, r4
 8000c4c:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000c50:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c54:	45a4      	cmp	ip, r4
 8000c56:	d908      	bls.n	8000c6a <__udivmoddi4+0x1ce>
 8000c58:	193c      	adds	r4, r7, r4
 8000c5a:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000c5e:	f080 8082 	bcs.w	8000d66 <__udivmoddi4+0x2ca>
 8000c62:	45a4      	cmp	ip, r4
 8000c64:	d97f      	bls.n	8000d66 <__udivmoddi4+0x2ca>
 8000c66:	3b02      	subs	r3, #2
 8000c68:	443c      	add	r4, r7
 8000c6a:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000c6e:	eba4 040c 	sub.w	r4, r4, ip
 8000c72:	fba0 ec02 	umull	lr, ip, r0, r2
 8000c76:	4564      	cmp	r4, ip
 8000c78:	4673      	mov	r3, lr
 8000c7a:	46e1      	mov	r9, ip
 8000c7c:	d362      	bcc.n	8000d44 <__udivmoddi4+0x2a8>
 8000c7e:	d05f      	beq.n	8000d40 <__udivmoddi4+0x2a4>
 8000c80:	b15d      	cbz	r5, 8000c9a <__udivmoddi4+0x1fe>
 8000c82:	ebb8 0203 	subs.w	r2, r8, r3
 8000c86:	eb64 0409 	sbc.w	r4, r4, r9
 8000c8a:	fa04 f606 	lsl.w	r6, r4, r6
 8000c8e:	fa22 f301 	lsr.w	r3, r2, r1
 8000c92:	431e      	orrs	r6, r3
 8000c94:	40cc      	lsrs	r4, r1
 8000c96:	e9c5 6400 	strd	r6, r4, [r5]
 8000c9a:	2100      	movs	r1, #0
 8000c9c:	e74f      	b.n	8000b3e <__udivmoddi4+0xa2>
 8000c9e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000ca2:	0c01      	lsrs	r1, r0, #16
 8000ca4:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000ca8:	b280      	uxth	r0, r0
 8000caa:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000cae:	463b      	mov	r3, r7
 8000cb0:	4638      	mov	r0, r7
 8000cb2:	463c      	mov	r4, r7
 8000cb4:	46b8      	mov	r8, r7
 8000cb6:	46be      	mov	lr, r7
 8000cb8:	2620      	movs	r6, #32
 8000cba:	fbb1 f1f7 	udiv	r1, r1, r7
 8000cbe:	eba2 0208 	sub.w	r2, r2, r8
 8000cc2:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000cc6:	e766      	b.n	8000b96 <__udivmoddi4+0xfa>
 8000cc8:	4601      	mov	r1, r0
 8000cca:	e718      	b.n	8000afe <__udivmoddi4+0x62>
 8000ccc:	4610      	mov	r0, r2
 8000cce:	e72c      	b.n	8000b2a <__udivmoddi4+0x8e>
 8000cd0:	f1c6 0220 	rsb	r2, r6, #32
 8000cd4:	fa2e f302 	lsr.w	r3, lr, r2
 8000cd8:	40b7      	lsls	r7, r6
 8000cda:	40b1      	lsls	r1, r6
 8000cdc:	fa20 f202 	lsr.w	r2, r0, r2
 8000ce0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ce4:	430a      	orrs	r2, r1
 8000ce6:	fbb3 f8fe 	udiv	r8, r3, lr
 8000cea:	b2bc      	uxth	r4, r7
 8000cec:	fb0e 3318 	mls	r3, lr, r8, r3
 8000cf0:	0c11      	lsrs	r1, r2, #16
 8000cf2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cf6:	fb08 f904 	mul.w	r9, r8, r4
 8000cfa:	40b0      	lsls	r0, r6
 8000cfc:	4589      	cmp	r9, r1
 8000cfe:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000d02:	b280      	uxth	r0, r0
 8000d04:	d93e      	bls.n	8000d84 <__udivmoddi4+0x2e8>
 8000d06:	1879      	adds	r1, r7, r1
 8000d08:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000d0c:	d201      	bcs.n	8000d12 <__udivmoddi4+0x276>
 8000d0e:	4589      	cmp	r9, r1
 8000d10:	d81f      	bhi.n	8000d52 <__udivmoddi4+0x2b6>
 8000d12:	eba1 0109 	sub.w	r1, r1, r9
 8000d16:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d1a:	fb09 f804 	mul.w	r8, r9, r4
 8000d1e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d22:	b292      	uxth	r2, r2
 8000d24:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d28:	4542      	cmp	r2, r8
 8000d2a:	d229      	bcs.n	8000d80 <__udivmoddi4+0x2e4>
 8000d2c:	18ba      	adds	r2, r7, r2
 8000d2e:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000d32:	d2c4      	bcs.n	8000cbe <__udivmoddi4+0x222>
 8000d34:	4542      	cmp	r2, r8
 8000d36:	d2c2      	bcs.n	8000cbe <__udivmoddi4+0x222>
 8000d38:	f1a9 0102 	sub.w	r1, r9, #2
 8000d3c:	443a      	add	r2, r7
 8000d3e:	e7be      	b.n	8000cbe <__udivmoddi4+0x222>
 8000d40:	45f0      	cmp	r8, lr
 8000d42:	d29d      	bcs.n	8000c80 <__udivmoddi4+0x1e4>
 8000d44:	ebbe 0302 	subs.w	r3, lr, r2
 8000d48:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000d4c:	3801      	subs	r0, #1
 8000d4e:	46e1      	mov	r9, ip
 8000d50:	e796      	b.n	8000c80 <__udivmoddi4+0x1e4>
 8000d52:	eba7 0909 	sub.w	r9, r7, r9
 8000d56:	4449      	add	r1, r9
 8000d58:	f1a8 0c02 	sub.w	ip, r8, #2
 8000d5c:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d60:	fb09 f804 	mul.w	r8, r9, r4
 8000d64:	e7db      	b.n	8000d1e <__udivmoddi4+0x282>
 8000d66:	4673      	mov	r3, lr
 8000d68:	e77f      	b.n	8000c6a <__udivmoddi4+0x1ce>
 8000d6a:	4650      	mov	r0, sl
 8000d6c:	e766      	b.n	8000c3c <__udivmoddi4+0x1a0>
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e6fd      	b.n	8000b6e <__udivmoddi4+0xd2>
 8000d72:	443b      	add	r3, r7
 8000d74:	3a02      	subs	r2, #2
 8000d76:	e733      	b.n	8000be0 <__udivmoddi4+0x144>
 8000d78:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d7c:	443b      	add	r3, r7
 8000d7e:	e71c      	b.n	8000bba <__udivmoddi4+0x11e>
 8000d80:	4649      	mov	r1, r9
 8000d82:	e79c      	b.n	8000cbe <__udivmoddi4+0x222>
 8000d84:	eba1 0109 	sub.w	r1, r1, r9
 8000d88:	46c4      	mov	ip, r8
 8000d8a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d8e:	fb09 f804 	mul.w	r8, r9, r4
 8000d92:	e7c4      	b.n	8000d1e <__udivmoddi4+0x282>

08000d94 <__aeabi_idiv0>:
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop

08000d98 <Lcd_create>:
 */
Lcd_HandleTypeDef Lcd_create(
		Lcd_PortType port[], Lcd_PinType pin[],
		Lcd_PortType rs_port, Lcd_PinType rs_pin,
		Lcd_PortType en_port, Lcd_PinType en_pin, Lcd_ModeTypeDef mode)
{
 8000d98:	b5b0      	push	{r4, r5, r7, lr}
 8000d9a:	b08a      	sub	sp, #40	@ 0x28
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	60f8      	str	r0, [r7, #12]
 8000da0:	60b9      	str	r1, [r7, #8]
 8000da2:	607a      	str	r2, [r7, #4]
 8000da4:	603b      	str	r3, [r7, #0]
	Lcd_HandleTypeDef lcd;

	lcd.mode = mode;
 8000da6:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8000daa:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

	lcd.en_pin = en_pin;
 8000dae:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8000db2:	84bb      	strh	r3, [r7, #36]	@ 0x24
	lcd.en_port = en_port;
 8000db4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000db6:	623b      	str	r3, [r7, #32]

	lcd.rs_pin = rs_pin;
 8000db8:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 8000dba:	83bb      	strh	r3, [r7, #28]
	lcd.rs_port = rs_port;
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	61bb      	str	r3, [r7, #24]

	lcd.data_pin = pin;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	617b      	str	r3, [r7, #20]
	lcd.data_port = port;
 8000dc4:	68bb      	ldr	r3, [r7, #8]
 8000dc6:	613b      	str	r3, [r7, #16]

	Lcd_init(&lcd);
 8000dc8:	f107 0310 	add.w	r3, r7, #16
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f000 f80e 	bl	8000dee <Lcd_init>

	return lcd;
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	461d      	mov	r5, r3
 8000dd6:	f107 0410 	add.w	r4, r7, #16
 8000dda:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ddc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000dde:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000de2:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8000de6:	68f8      	ldr	r0, [r7, #12]
 8000de8:	3728      	adds	r7, #40	@ 0x28
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bdb0      	pop	{r4, r5, r7, pc}

08000dee <Lcd_init>:

/**
 * Initialize 16x2-lcd without cursor
 */
void Lcd_init(Lcd_HandleTypeDef * lcd)
{
 8000dee:	b580      	push	{r7, lr}
 8000df0:	b082      	sub	sp, #8
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	6078      	str	r0, [r7, #4]
	if(lcd->mode == LCD_4_BIT_MODE)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	7d9b      	ldrb	r3, [r3, #22]
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d10c      	bne.n	8000e18 <Lcd_init+0x2a>
	{
			lcd_write_command(lcd, 0x33);
 8000dfe:	2133      	movs	r1, #51	@ 0x33
 8000e00:	6878      	ldr	r0, [r7, #4]
 8000e02:	f000 f8b5 	bl	8000f70 <lcd_write_command>
			lcd_write_command(lcd, 0x32);
 8000e06:	2132      	movs	r1, #50	@ 0x32
 8000e08:	6878      	ldr	r0, [r7, #4]
 8000e0a:	f000 f8b1 	bl	8000f70 <lcd_write_command>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 8000e0e:	2128      	movs	r1, #40	@ 0x28
 8000e10:	6878      	ldr	r0, [r7, #4]
 8000e12:	f000 f8ad 	bl	8000f70 <lcd_write_command>
 8000e16:	e003      	b.n	8000e20 <Lcd_init+0x32>
	}
	else
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 8000e18:	2138      	movs	r1, #56	@ 0x38
 8000e1a:	6878      	ldr	r0, [r7, #4]
 8000e1c:	f000 f8a8 	bl	8000f70 <lcd_write_command>


	lcd_write_command(lcd, CLEAR_DISPLAY);								// Clear screen
 8000e20:	2101      	movs	r1, #1
 8000e22:	6878      	ldr	r0, [r7, #4]
 8000e24:	f000 f8a4 	bl	8000f70 <lcd_write_command>
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D|OPT_B);		// Lcd-on, cursor-off, no-blink
 8000e28:	210d      	movs	r1, #13
 8000e2a:	6878      	ldr	r0, [r7, #4]
 8000e2c:	f000 f8a0 	bl	8000f70 <lcd_write_command>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);					// Increment cursor
 8000e30:	2106      	movs	r1, #6
 8000e32:	6878      	ldr	r0, [r7, #4]
 8000e34:	f000 f89c 	bl	8000f70 <lcd_write_command>
}
 8000e38:	bf00      	nop
 8000e3a:	3708      	adds	r7, #8
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}

08000e40 <Lcd_int>:

/**
 * Write a number on the current position
 */
void Lcd_int(Lcd_HandleTypeDef * lcd, int number)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b086      	sub	sp, #24
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
 8000e48:	6039      	str	r1, [r7, #0]
	char buffer[11];
	sprintf(buffer, "%d", number);
 8000e4a:	f107 030c 	add.w	r3, r7, #12
 8000e4e:	683a      	ldr	r2, [r7, #0]
 8000e50:	4906      	ldr	r1, [pc, #24]	@ (8000e6c <Lcd_int+0x2c>)
 8000e52:	4618      	mov	r0, r3
 8000e54:	f002 fcbe 	bl	80037d4 <siprintf>

	Lcd_string(lcd, buffer);
 8000e58:	f107 030c 	add.w	r3, r7, #12
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	6878      	ldr	r0, [r7, #4]
 8000e60:	f000 f84c 	bl	8000efc <Lcd_string>
}
 8000e64:	bf00      	nop
 8000e66:	3718      	adds	r7, #24
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	0800412c 	.word	0x0800412c

08000e70 <Lcd_double>:

/**
 * Write a floating-point value on the current position
 */
void Lcd_double(Lcd_HandleTypeDef * lcd, double number)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b08c      	sub	sp, #48	@ 0x30
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	60f8      	str	r0, [r7, #12]
 8000e78:	ed87 0b00 	vstr	d0, [r7]
	char buffer[20];

	number *= 100.0;
 8000e7c:	f04f 0200 	mov.w	r2, #0
 8000e80:	4b1b      	ldr	r3, [pc, #108]	@ (8000ef0 <Lcd_double+0x80>)
 8000e82:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000e86:	f7ff fbbf 	bl	8000608 <__aeabi_dmul>
 8000e8a:	4602      	mov	r2, r0
 8000e8c:	460b      	mov	r3, r1
 8000e8e:	e9c7 2300 	strd	r2, r3, [r7]
	unsigned int a = number /100;
 8000e92:	f04f 0200 	mov.w	r2, #0
 8000e96:	4b16      	ldr	r3, [pc, #88]	@ (8000ef0 <Lcd_double+0x80>)
 8000e98:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000e9c:	f7ff fcde 	bl	800085c <__aeabi_ddiv>
 8000ea0:	4602      	mov	r2, r0
 8000ea2:	460b      	mov	r3, r1
 8000ea4:	4610      	mov	r0, r2
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	f7ff fdc0 	bl	8000a2c <__aeabi_d2uiz>
 8000eac:	4603      	mov	r3, r0
 8000eae:	62fb      	str	r3, [r7, #44]	@ 0x2c
	unsigned int b = (unsigned int)number % 100;
 8000eb0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000eb4:	f7ff fdba 	bl	8000a2c <__aeabi_d2uiz>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	4a0e      	ldr	r2, [pc, #56]	@ (8000ef4 <Lcd_double+0x84>)
 8000ebc:	fba2 1203 	umull	r1, r2, r2, r3
 8000ec0:	0952      	lsrs	r2, r2, #5
 8000ec2:	2164      	movs	r1, #100	@ 0x64
 8000ec4:	fb01 f202 	mul.w	r2, r1, r2
 8000ec8:	1a9b      	subs	r3, r3, r2
 8000eca:	62bb      	str	r3, [r7, #40]	@ 0x28
	sprintf((char*) buffer, "%u.%02u", a,b);
 8000ecc:	f107 0014 	add.w	r0, r7, #20
 8000ed0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ed2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000ed4:	4908      	ldr	r1, [pc, #32]	@ (8000ef8 <Lcd_double+0x88>)
 8000ed6:	f002 fc7d 	bl	80037d4 <siprintf>

	Lcd_string(lcd, buffer);
 8000eda:	f107 0314 	add.w	r3, r7, #20
 8000ede:	4619      	mov	r1, r3
 8000ee0:	68f8      	ldr	r0, [r7, #12]
 8000ee2:	f000 f80b 	bl	8000efc <Lcd_string>
}
 8000ee6:	bf00      	nop
 8000ee8:	3730      	adds	r7, #48	@ 0x30
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	40590000 	.word	0x40590000
 8000ef4:	51eb851f 	.word	0x51eb851f
 8000ef8:	08004130 	.word	0x08004130

08000efc <Lcd_string>:

/**
 * Write a string on the current position
 */
void Lcd_string(Lcd_HandleTypeDef * lcd, const char * string)
{
 8000efc:	b590      	push	{r4, r7, lr}
 8000efe:	b085      	sub	sp, #20
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
 8000f04:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < strlen(string); i++)
 8000f06:	2300      	movs	r3, #0
 8000f08:	73fb      	strb	r3, [r7, #15]
 8000f0a:	e00a      	b.n	8000f22 <Lcd_string+0x26>
	{
		lcd_write_data(lcd, string[i]);
 8000f0c:	7bfb      	ldrb	r3, [r7, #15]
 8000f0e:	683a      	ldr	r2, [r7, #0]
 8000f10:	4413      	add	r3, r2
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	4619      	mov	r1, r3
 8000f16:	6878      	ldr	r0, [r7, #4]
 8000f18:	f000 f858 	bl	8000fcc <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 8000f1c:	7bfb      	ldrb	r3, [r7, #15]
 8000f1e:	3301      	adds	r3, #1
 8000f20:	73fb      	strb	r3, [r7, #15]
 8000f22:	7bfc      	ldrb	r4, [r7, #15]
 8000f24:	6838      	ldr	r0, [r7, #0]
 8000f26:	f7ff f95b 	bl	80001e0 <strlen>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	429c      	cmp	r4, r3
 8000f2e:	d3ed      	bcc.n	8000f0c <Lcd_string+0x10>
	}
}
 8000f30:	bf00      	nop
 8000f32:	bf00      	nop
 8000f34:	3714      	adds	r7, #20
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd90      	pop	{r4, r7, pc}
	...

08000f3c <Lcd_cursor>:

/**
 * Set the cursor position
 */
void Lcd_cursor(Lcd_HandleTypeDef * lcd, uint8_t row, uint8_t col)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
 8000f44:	460b      	mov	r3, r1
 8000f46:	70fb      	strb	r3, [r7, #3]
 8000f48:	4613      	mov	r3, r2
 8000f4a:	70bb      	strb	r3, [r7, #2]
	#ifdef LCD20xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_20[row] + col);
	#endif

	#ifdef LCD16xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
 8000f4c:	78fb      	ldrb	r3, [r7, #3]
 8000f4e:	4a07      	ldr	r2, [pc, #28]	@ (8000f6c <Lcd_cursor+0x30>)
 8000f50:	5cd2      	ldrb	r2, [r2, r3]
 8000f52:	78bb      	ldrb	r3, [r7, #2]
 8000f54:	4413      	add	r3, r2
 8000f56:	b2db      	uxtb	r3, r3
 8000f58:	3b80      	subs	r3, #128	@ 0x80
 8000f5a:	b2db      	uxtb	r3, r3
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	6878      	ldr	r0, [r7, #4]
 8000f60:	f000 f806 	bl	8000f70 <lcd_write_command>
	#endif
}
 8000f64:	bf00      	nop
 8000f66:	3708      	adds	r7, #8
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	08004178 	.word	0x08004178

08000f70 <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
 8000f78:	460b      	mov	r3, r1
 8000f7a:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	6898      	ldr	r0, [r3, #8]
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	899b      	ldrh	r3, [r3, #12]
 8000f84:	2200      	movs	r2, #0
 8000f86:	4619      	mov	r1, r3
 8000f88:	f001 fb66 	bl	8002658 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	7d9b      	ldrb	r3, [r3, #22]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d111      	bne.n	8000fb8 <lcd_write_command+0x48>
	{
		lcd_write(lcd, (command >> 4), LCD_NIB);
 8000f94:	78fb      	ldrb	r3, [r7, #3]
 8000f96:	091b      	lsrs	r3, r3, #4
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	2204      	movs	r2, #4
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	6878      	ldr	r0, [r7, #4]
 8000fa0:	f000 f842 	bl	8001028 <lcd_write>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 8000fa4:	78fb      	ldrb	r3, [r7, #3]
 8000fa6:	f003 030f 	and.w	r3, r3, #15
 8000faa:	b2db      	uxtb	r3, r3
 8000fac:	2204      	movs	r2, #4
 8000fae:	4619      	mov	r1, r3
 8000fb0:	6878      	ldr	r0, [r7, #4]
 8000fb2:	f000 f839 	bl	8001028 <lcd_write>
	else
	{
		lcd_write(lcd, command, LCD_BYTE);
	}

}
 8000fb6:	e005      	b.n	8000fc4 <lcd_write_command+0x54>
		lcd_write(lcd, command, LCD_BYTE);
 8000fb8:	78fb      	ldrb	r3, [r7, #3]
 8000fba:	2208      	movs	r2, #8
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	6878      	ldr	r0, [r7, #4]
 8000fc0:	f000 f832 	bl	8001028 <lcd_write>
}
 8000fc4:	bf00      	nop
 8000fc6:	3708      	adds	r7, #8
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(Lcd_HandleTypeDef * lcd, uint8_t data)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
 8000fd4:	460b      	mov	r3, r1
 8000fd6:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	6898      	ldr	r0, [r3, #8]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	899b      	ldrh	r3, [r3, #12]
 8000fe0:	2201      	movs	r2, #1
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	f001 fb38 	bl	8002658 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	7d9b      	ldrb	r3, [r3, #22]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d111      	bne.n	8001014 <lcd_write_data+0x48>
	{
		lcd_write(lcd, data >> 4, LCD_NIB);
 8000ff0:	78fb      	ldrb	r3, [r7, #3]
 8000ff2:	091b      	lsrs	r3, r3, #4
 8000ff4:	b2db      	uxtb	r3, r3
 8000ff6:	2204      	movs	r2, #4
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	6878      	ldr	r0, [r7, #4]
 8000ffc:	f000 f814 	bl	8001028 <lcd_write>
		lcd_write(lcd, data & 0x0F, LCD_NIB);
 8001000:	78fb      	ldrb	r3, [r7, #3]
 8001002:	f003 030f 	and.w	r3, r3, #15
 8001006:	b2db      	uxtb	r3, r3
 8001008:	2204      	movs	r2, #4
 800100a:	4619      	mov	r1, r3
 800100c:	6878      	ldr	r0, [r7, #4]
 800100e:	f000 f80b 	bl	8001028 <lcd_write>
	else
	{
		lcd_write(lcd, data, LCD_BYTE);
	}

}
 8001012:	e005      	b.n	8001020 <lcd_write_data+0x54>
		lcd_write(lcd, data, LCD_BYTE);
 8001014:	78fb      	ldrb	r3, [r7, #3]
 8001016:	2208      	movs	r2, #8
 8001018:	4619      	mov	r1, r3
 800101a:	6878      	ldr	r0, [r7, #4]
 800101c:	f000 f804 	bl	8001028 <lcd_write>
}
 8001020:	bf00      	nop
 8001022:	3708      	adds	r7, #8
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}

08001028 <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(Lcd_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b084      	sub	sp, #16
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
 8001030:	460b      	mov	r3, r1
 8001032:	70fb      	strb	r3, [r7, #3]
 8001034:	4613      	mov	r3, r2
 8001036:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = 0; i < len; i++)
 8001038:	2300      	movs	r3, #0
 800103a:	73fb      	strb	r3, [r7, #15]
 800103c:	e019      	b.n	8001072 <lcd_write+0x4a>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681a      	ldr	r2, [r3, #0]
 8001042:	7bfb      	ldrb	r3, [r7, #15]
 8001044:	009b      	lsls	r3, r3, #2
 8001046:	4413      	add	r3, r2
 8001048:	6818      	ldr	r0, [r3, #0]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	685a      	ldr	r2, [r3, #4]
 800104e:	7bfb      	ldrb	r3, [r7, #15]
 8001050:	005b      	lsls	r3, r3, #1
 8001052:	4413      	add	r3, r2
 8001054:	8819      	ldrh	r1, [r3, #0]
 8001056:	78fa      	ldrb	r2, [r7, #3]
 8001058:	7bfb      	ldrb	r3, [r7, #15]
 800105a:	fa42 f303 	asr.w	r3, r2, r3
 800105e:	b2db      	uxtb	r3, r3
 8001060:	f003 0301 	and.w	r3, r3, #1
 8001064:	b2db      	uxtb	r3, r3
 8001066:	461a      	mov	r2, r3
 8001068:	f001 faf6 	bl	8002658 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 800106c:	7bfb      	ldrb	r3, [r7, #15]
 800106e:	3301      	adds	r3, #1
 8001070:	73fb      	strb	r3, [r7, #15]
 8001072:	7bfa      	ldrb	r2, [r7, #15]
 8001074:	78bb      	ldrb	r3, [r7, #2]
 8001076:	429a      	cmp	r2, r3
 8001078:	d3e1      	bcc.n	800103e <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6918      	ldr	r0, [r3, #16]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	8a9b      	ldrh	r3, [r3, #20]
 8001082:	2201      	movs	r2, #1
 8001084:	4619      	mov	r1, r3
 8001086:	f001 fae7 	bl	8002658 <HAL_GPIO_WritePin>
	DELAY(1);
 800108a:	2001      	movs	r0, #1
 800108c:	f000 fc6a 	bl	8001964 <HAL_Delay>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	6918      	ldr	r0, [r3, #16]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	8a9b      	ldrh	r3, [r3, #20]
 8001098:	2200      	movs	r2, #0
 800109a:	4619      	mov	r1, r3
 800109c:	f001 fadc 	bl	8002658 <HAL_GPIO_WritePin>
}
 80010a0:	bf00      	nop
 80010a2:	3710      	adds	r7, #16
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80010ac:	b0a6      	sub	sp, #152	@ 0x98
 80010ae:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010b0:	f000 fbe6 	bl	8001880 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010b4:	f000 f918 	bl	80012e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010b8:	f000 f9fe 	bl	80014b8 <MX_GPIO_Init>
  MX_ADC1_Init();
 80010bc:	f000 f980 	bl	80013c0 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 80010c0:	f000 f9d0 	bl	8001464 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  	  	  	  	  	  	  	 //D4			//D5		//D6		//D7
	Lcd_PortType ports[] = { GPIOB, 		GPIOB, 		GPIOB, 		GPIOA};
 80010c4:	4b7c      	ldr	r3, [pc, #496]	@ (80012b8 <main+0x210>)
 80010c6:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 80010ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80010cc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	Lcd_PinType  pins[] =  { GPIO_PIN_5, 	GPIO_PIN_4, GPIO_PIN_10, GPIO_PIN_8};
 80010d0:	4a7a      	ldr	r2, [pc, #488]	@ (80012bc <main+0x214>)
 80010d2:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80010d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80010da:	e883 0003 	stmia.w	r3, {r0, r1}
	Lcd_HandleTypeDef lcd;
	lcd = Lcd_create(ports, pins, GPIOA, GPIO_PIN_10,	//	RS
 80010de:	f107 0008 	add.w	r0, r7, #8
 80010e2:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 80010e6:	f107 0154 	add.w	r1, r7, #84	@ 0x54
 80010ea:	2300      	movs	r3, #0
 80010ec:	9303      	str	r3, [sp, #12]
 80010ee:	2308      	movs	r3, #8
 80010f0:	9302      	str	r3, [sp, #8]
 80010f2:	4b73      	ldr	r3, [pc, #460]	@ (80012c0 <main+0x218>)
 80010f4:	9301      	str	r3, [sp, #4]
 80010f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80010fa:	9300      	str	r3, [sp, #0]
 80010fc:	4b71      	ldr	r3, [pc, #452]	@ (80012c4 <main+0x21c>)
 80010fe:	f7ff fe4b 	bl	8000d98 <Lcd_create>
 8001102:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 8001106:	f107 0508 	add.w	r5, r7, #8
 800110a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800110c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800110e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001112:	e884 0003 	stmia.w	r4, {r0, r1}
								  GPIOB, GPIO_PIN_3,	//	E
								  LCD_4_BIT_MODE);

	// print text
	Lcd_cursor(&lcd, 0,0);
 8001116:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800111a:	2200      	movs	r2, #0
 800111c:	2100      	movs	r1, #0
 800111e:	4618      	mov	r0, r3
 8001120:	f7ff ff0c 	bl	8000f3c <Lcd_cursor>
	Lcd_string(&lcd, "Air Quality:");
 8001124:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001128:	4967      	ldr	r1, [pc, #412]	@ (80012c8 <main+0x220>)
 800112a:	4618      	mov	r0, r3
 800112c:	f7ff fee6 	bl	8000efc <Lcd_string>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  	double sensorVolts = 0.0;
 8001130:	f04f 0200 	mov.w	r2, #0
 8001134:	f04f 0300 	mov.w	r3, #0
 8001138:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
	  	uint64_t sensorVal = 0;
 800113c:	f04f 0200 	mov.w	r2, #0
 8001140:	f04f 0300 	mov.w	r3, #0
 8001144:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
	  	const int numSamples=20;
 8001148:	2314      	movs	r3, #20
 800114a:	66fb      	str	r3, [r7, #108]	@ 0x6c

		// Analog Read Start
		HAL_ADC_Start_IT(&hadc1);
 800114c:	485f      	ldr	r0, [pc, #380]	@ (80012cc <main+0x224>)
 800114e:	f000 fd2f 	bl	8001bb0 <HAL_ADC_Start_IT>
		for(int i=0; i<numSamples; i++)
 8001152:	2300      	movs	r3, #0
 8001154:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001156:	e018      	b.n	800118a <main+0xe2>
		{
			if(HAL_ADC_PollForConversion(&hadc1, 10)== HAL_OK)
 8001158:	210a      	movs	r1, #10
 800115a:	485c      	ldr	r0, [pc, #368]	@ (80012cc <main+0x224>)
 800115c:	f000 fc9c 	bl	8001a98 <HAL_ADC_PollForConversion>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d10e      	bne.n	8001184 <main+0xdc>
			{
				sensorVal +=  HAL_ADC_GetValue(&hadc1);
 8001166:	4859      	ldr	r0, [pc, #356]	@ (80012cc <main+0x224>)
 8001168:	f000 fde0 	bl	8001d2c <HAL_ADC_GetValue>
 800116c:	4603      	mov	r3, r0
 800116e:	2200      	movs	r2, #0
 8001170:	4698      	mov	r8, r3
 8001172:	4691      	mov	r9, r2
 8001174:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 8001178:	eb12 0a08 	adds.w	sl, r2, r8
 800117c:	eb43 0b09 	adc.w	fp, r3, r9
 8001180:	e9c7 ab20 	strd	sl, fp, [r7, #128]	@ 0x80
		for(int i=0; i<numSamples; i++)
 8001184:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8001186:	3301      	adds	r3, #1
 8001188:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800118a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800118c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800118e:	429a      	cmp	r2, r3
 8001190:	dbe2      	blt.n	8001158 <main+0xb0>
			}
		}
		HAL_ADC_Stop(&hadc1);
 8001192:	484e      	ldr	r0, [pc, #312]	@ (80012cc <main+0x224>)
 8001194:	f000 fc4d 	bl	8001a32 <HAL_ADC_Stop>

		sensorVal /= numSamples;
 8001198:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800119a:	17da      	asrs	r2, r3, #31
 800119c:	603b      	str	r3, [r7, #0]
 800119e:	607a      	str	r2, [r7, #4]
 80011a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80011a4:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80011a8:	f7ff fc60 	bl	8000a6c <__aeabi_uldivmod>
 80011ac:	4602      	mov	r2, r0
 80011ae:	460b      	mov	r3, r1
 80011b0:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
		sensorVolts = 5.0*((double)sensorVal)/1023.0;
 80011b4:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80011b8:	f7ff f9f0 	bl	800059c <__aeabi_ul2d>
 80011bc:	f04f 0200 	mov.w	r2, #0
 80011c0:	4b43      	ldr	r3, [pc, #268]	@ (80012d0 <main+0x228>)
 80011c2:	f7ff fa21 	bl	8000608 <__aeabi_dmul>
 80011c6:	4602      	mov	r2, r0
 80011c8:	460b      	mov	r3, r1
 80011ca:	4610      	mov	r0, r2
 80011cc:	4619      	mov	r1, r3
 80011ce:	a338      	add	r3, pc, #224	@ (adr r3, 80012b0 <main+0x208>)
 80011d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011d4:	f7ff fb42 	bl	800085c <__aeabi_ddiv>
 80011d8:	4602      	mov	r2, r0
 80011da:	460b      	mov	r3, r1
 80011dc:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
//		const double RsRoCleanAir = 9.9;
//		double R_o = 3.23;
//		double RoClean = R_s/RsRoCleanAir;

		// Display on LCD
		Lcd_cursor(&lcd, 1,0);
 80011e0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80011e4:	2200      	movs	r2, #0
 80011e6:	2101      	movs	r1, #1
 80011e8:	4618      	mov	r0, r3
 80011ea:	f7ff fea7 	bl	8000f3c <Lcd_cursor>
		Lcd_int(&lcd, sensorVal );
 80011ee:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80011f2:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80011f6:	4611      	mov	r1, r2
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7ff fe21 	bl	8000e40 <Lcd_int>
		Lcd_cursor(&lcd, 1,8);
 80011fe:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001202:	2208      	movs	r2, #8
 8001204:	2101      	movs	r1, #1
 8001206:	4618      	mov	r0, r3
 8001208:	f7ff fe98 	bl	8000f3c <Lcd_cursor>
		Lcd_double(&lcd, sensorVolts );
 800120c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001210:	ed97 0b1c 	vldr	d0, [r7, #112]	@ 0x70
 8001214:	4618      	mov	r0, r3
 8001216:	f7ff fe2b 	bl	8000e70 <Lcd_double>
		Lcd_cursor(&lcd, 1,12);
 800121a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800121e:	220c      	movs	r2, #12
 8001220:	2101      	movs	r1, #1
 8001222:	4618      	mov	r0, r3
 8001224:	f7ff fe8a 	bl	8000f3c <Lcd_cursor>
		Lcd_string(&lcd, "V" );
 8001228:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800122c:	4929      	ldr	r1, [pc, #164]	@ (80012d4 <main+0x22c>)
 800122e:	4618      	mov	r0, r3
 8001230:	f7ff fe64 	bl	8000efc <Lcd_string>


		// Transmit Over Serial USB - UART
		sensorVolts *= 100;
 8001234:	f04f 0200 	mov.w	r2, #0
 8001238:	4b27      	ldr	r3, [pc, #156]	@ (80012d8 <main+0x230>)
 800123a:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 800123e:	f7ff f9e3 	bl	8000608 <__aeabi_dmul>
 8001242:	4602      	mov	r2, r0
 8001244:	460b      	mov	r3, r1
 8001246:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
		unsigned int a = sensorVolts /100.0;
 800124a:	f04f 0200 	mov.w	r2, #0
 800124e:	4b22      	ldr	r3, [pc, #136]	@ (80012d8 <main+0x230>)
 8001250:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001254:	f7ff fb02 	bl	800085c <__aeabi_ddiv>
 8001258:	4602      	mov	r2, r0
 800125a:	460b      	mov	r3, r1
 800125c:	4610      	mov	r0, r2
 800125e:	4619      	mov	r1, r3
 8001260:	f7ff fbe4 	bl	8000a2c <__aeabi_d2uiz>
 8001264:	4603      	mov	r3, r0
 8001266:	66bb      	str	r3, [r7, #104]	@ 0x68
		unsigned int b = (unsigned int)sensorVolts % 100;
 8001268:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 800126c:	f7ff fbde 	bl	8000a2c <__aeabi_d2uiz>
 8001270:	4603      	mov	r3, r0
 8001272:	4a1a      	ldr	r2, [pc, #104]	@ (80012dc <main+0x234>)
 8001274:	fba2 1203 	umull	r1, r2, r2, r3
 8001278:	0952      	lsrs	r2, r2, #5
 800127a:	2164      	movs	r1, #100	@ 0x64
 800127c:	fb01 f202 	mul.w	r2, r1, r2
 8001280:	1a9b      	subs	r3, r3, r2
 8001282:	667b      	str	r3, [r7, #100]	@ 0x64

		{
			char buffer[20];
			sprintf((char*) buffer, "Sensor: %u.%02u \r\n", a,b);
 8001284:	f107 0020 	add.w	r0, r7, #32
 8001288:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800128a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800128c:	4914      	ldr	r1, [pc, #80]	@ (80012e0 <main+0x238>)
 800128e:	f002 faa1 	bl	80037d4 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)buffer, sizeof(buffer), 1000);
 8001292:	f107 0120 	add.w	r1, r7, #32
 8001296:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800129a:	2214      	movs	r2, #20
 800129c:	4811      	ldr	r0, [pc, #68]	@ (80012e4 <main+0x23c>)
 800129e:	f001 fedd 	bl	800305c <HAL_UART_Transmit>
		}

		HAL_Delay (1000);
 80012a2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80012a6:	f000 fb5d 	bl	8001964 <HAL_Delay>
  {
 80012aa:	e741      	b.n	8001130 <main+0x88>
 80012ac:	f3af 8000 	nop.w
 80012b0:	00000000 	.word	0x00000000
 80012b4:	408ff800 	.word	0x408ff800
 80012b8:	08004160 	.word	0x08004160
 80012bc:	08004170 	.word	0x08004170
 80012c0:	40020400 	.word	0x40020400
 80012c4:	40020000 	.word	0x40020000
 80012c8:	08004138 	.word	0x08004138
 80012cc:	20000078 	.word	0x20000078
 80012d0:	40140000 	.word	0x40140000
 80012d4:	08004148 	.word	0x08004148
 80012d8:	40590000 	.word	0x40590000
 80012dc:	51eb851f 	.word	0x51eb851f
 80012e0:	0800414c 	.word	0x0800414c
 80012e4:	200000c0 	.word	0x200000c0

080012e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b094      	sub	sp, #80	@ 0x50
 80012ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012ee:	f107 0320 	add.w	r3, r7, #32
 80012f2:	2230      	movs	r2, #48	@ 0x30
 80012f4:	2100      	movs	r1, #0
 80012f6:	4618      	mov	r0, r3
 80012f8:	f002 fa8e 	bl	8003818 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012fc:	f107 030c 	add.w	r3, r7, #12
 8001300:	2200      	movs	r2, #0
 8001302:	601a      	str	r2, [r3, #0]
 8001304:	605a      	str	r2, [r3, #4]
 8001306:	609a      	str	r2, [r3, #8]
 8001308:	60da      	str	r2, [r3, #12]
 800130a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800130c:	2300      	movs	r3, #0
 800130e:	60bb      	str	r3, [r7, #8]
 8001310:	4b29      	ldr	r3, [pc, #164]	@ (80013b8 <SystemClock_Config+0xd0>)
 8001312:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001314:	4a28      	ldr	r2, [pc, #160]	@ (80013b8 <SystemClock_Config+0xd0>)
 8001316:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800131a:	6413      	str	r3, [r2, #64]	@ 0x40
 800131c:	4b26      	ldr	r3, [pc, #152]	@ (80013b8 <SystemClock_Config+0xd0>)
 800131e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001320:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001324:	60bb      	str	r3, [r7, #8]
 8001326:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001328:	2300      	movs	r3, #0
 800132a:	607b      	str	r3, [r7, #4]
 800132c:	4b23      	ldr	r3, [pc, #140]	@ (80013bc <SystemClock_Config+0xd4>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001334:	4a21      	ldr	r2, [pc, #132]	@ (80013bc <SystemClock_Config+0xd4>)
 8001336:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800133a:	6013      	str	r3, [r2, #0]
 800133c:	4b1f      	ldr	r3, [pc, #124]	@ (80013bc <SystemClock_Config+0xd4>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001344:	607b      	str	r3, [r7, #4]
 8001346:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001348:	2302      	movs	r3, #2
 800134a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800134c:	2301      	movs	r3, #1
 800134e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001350:	2310      	movs	r3, #16
 8001352:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001354:	2302      	movs	r3, #2
 8001356:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001358:	2300      	movs	r3, #0
 800135a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800135c:	2310      	movs	r3, #16
 800135e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001360:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001364:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001366:	2304      	movs	r3, #4
 8001368:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800136a:	2307      	movs	r3, #7
 800136c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800136e:	f107 0320 	add.w	r3, r7, #32
 8001372:	4618      	mov	r0, r3
 8001374:	f001 f98a 	bl	800268c <HAL_RCC_OscConfig>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800137e:	f000 f923 	bl	80015c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001382:	230f      	movs	r3, #15
 8001384:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001386:	2302      	movs	r3, #2
 8001388:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800138a:	2300      	movs	r3, #0
 800138c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800138e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001392:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001394:	2300      	movs	r3, #0
 8001396:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001398:	f107 030c 	add.w	r3, r7, #12
 800139c:	2102      	movs	r1, #2
 800139e:	4618      	mov	r0, r3
 80013a0:	f001 fbec 	bl	8002b7c <HAL_RCC_ClockConfig>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80013aa:	f000 f90d 	bl	80015c8 <Error_Handler>
  }
}
 80013ae:	bf00      	nop
 80013b0:	3750      	adds	r7, #80	@ 0x50
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	40023800 	.word	0x40023800
 80013bc:	40007000 	.word	0x40007000

080013c0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b084      	sub	sp, #16
 80013c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80013c6:	463b      	mov	r3, r7
 80013c8:	2200      	movs	r2, #0
 80013ca:	601a      	str	r2, [r3, #0]
 80013cc:	605a      	str	r2, [r3, #4]
 80013ce:	609a      	str	r2, [r3, #8]
 80013d0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80013d2:	4b21      	ldr	r3, [pc, #132]	@ (8001458 <MX_ADC1_Init+0x98>)
 80013d4:	4a21      	ldr	r2, [pc, #132]	@ (800145c <MX_ADC1_Init+0x9c>)
 80013d6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80013d8:	4b1f      	ldr	r3, [pc, #124]	@ (8001458 <MX_ADC1_Init+0x98>)
 80013da:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80013de:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80013e0:	4b1d      	ldr	r3, [pc, #116]	@ (8001458 <MX_ADC1_Init+0x98>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80013e6:	4b1c      	ldr	r3, [pc, #112]	@ (8001458 <MX_ADC1_Init+0x98>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80013ec:	4b1a      	ldr	r3, [pc, #104]	@ (8001458 <MX_ADC1_Init+0x98>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80013f2:	4b19      	ldr	r3, [pc, #100]	@ (8001458 <MX_ADC1_Init+0x98>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80013fa:	4b17      	ldr	r3, [pc, #92]	@ (8001458 <MX_ADC1_Init+0x98>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001400:	4b15      	ldr	r3, [pc, #84]	@ (8001458 <MX_ADC1_Init+0x98>)
 8001402:	4a17      	ldr	r2, [pc, #92]	@ (8001460 <MX_ADC1_Init+0xa0>)
 8001404:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001406:	4b14      	ldr	r3, [pc, #80]	@ (8001458 <MX_ADC1_Init+0x98>)
 8001408:	2200      	movs	r2, #0
 800140a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800140c:	4b12      	ldr	r3, [pc, #72]	@ (8001458 <MX_ADC1_Init+0x98>)
 800140e:	2201      	movs	r2, #1
 8001410:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001412:	4b11      	ldr	r3, [pc, #68]	@ (8001458 <MX_ADC1_Init+0x98>)
 8001414:	2200      	movs	r2, #0
 8001416:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800141a:	4b0f      	ldr	r3, [pc, #60]	@ (8001458 <MX_ADC1_Init+0x98>)
 800141c:	2201      	movs	r2, #1
 800141e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001420:	480d      	ldr	r0, [pc, #52]	@ (8001458 <MX_ADC1_Init+0x98>)
 8001422:	f000 fac3 	bl	80019ac <HAL_ADC_Init>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800142c:	f000 f8cc 	bl	80015c8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001430:	2308      	movs	r3, #8
 8001432:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001434:	2301      	movs	r3, #1
 8001436:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001438:	2300      	movs	r3, #0
 800143a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800143c:	463b      	mov	r3, r7
 800143e:	4619      	mov	r1, r3
 8001440:	4805      	ldr	r0, [pc, #20]	@ (8001458 <MX_ADC1_Init+0x98>)
 8001442:	f000 fc81 	bl	8001d48 <HAL_ADC_ConfigChannel>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800144c:	f000 f8bc 	bl	80015c8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001450:	bf00      	nop
 8001452:	3710      	adds	r7, #16
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	20000078 	.word	0x20000078
 800145c:	40012000 	.word	0x40012000
 8001460:	0f000001 	.word	0x0f000001

08001464 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001468:	4b11      	ldr	r3, [pc, #68]	@ (80014b0 <MX_USART2_UART_Init+0x4c>)
 800146a:	4a12      	ldr	r2, [pc, #72]	@ (80014b4 <MX_USART2_UART_Init+0x50>)
 800146c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800146e:	4b10      	ldr	r3, [pc, #64]	@ (80014b0 <MX_USART2_UART_Init+0x4c>)
 8001470:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001474:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001476:	4b0e      	ldr	r3, [pc, #56]	@ (80014b0 <MX_USART2_UART_Init+0x4c>)
 8001478:	2200      	movs	r2, #0
 800147a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800147c:	4b0c      	ldr	r3, [pc, #48]	@ (80014b0 <MX_USART2_UART_Init+0x4c>)
 800147e:	2200      	movs	r2, #0
 8001480:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001482:	4b0b      	ldr	r3, [pc, #44]	@ (80014b0 <MX_USART2_UART_Init+0x4c>)
 8001484:	2200      	movs	r2, #0
 8001486:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001488:	4b09      	ldr	r3, [pc, #36]	@ (80014b0 <MX_USART2_UART_Init+0x4c>)
 800148a:	220c      	movs	r2, #12
 800148c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800148e:	4b08      	ldr	r3, [pc, #32]	@ (80014b0 <MX_USART2_UART_Init+0x4c>)
 8001490:	2200      	movs	r2, #0
 8001492:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001494:	4b06      	ldr	r3, [pc, #24]	@ (80014b0 <MX_USART2_UART_Init+0x4c>)
 8001496:	2200      	movs	r2, #0
 8001498:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800149a:	4805      	ldr	r0, [pc, #20]	@ (80014b0 <MX_USART2_UART_Init+0x4c>)
 800149c:	f001 fd8e 	bl	8002fbc <HAL_UART_Init>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80014a6:	f000 f88f 	bl	80015c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80014aa:	bf00      	nop
 80014ac:	bd80      	pop	{r7, pc}
 80014ae:	bf00      	nop
 80014b0:	200000c0 	.word	0x200000c0
 80014b4:	40004400 	.word	0x40004400

080014b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b08a      	sub	sp, #40	@ 0x28
 80014bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014be:	f107 0314 	add.w	r3, r7, #20
 80014c2:	2200      	movs	r2, #0
 80014c4:	601a      	str	r2, [r3, #0]
 80014c6:	605a      	str	r2, [r3, #4]
 80014c8:	609a      	str	r2, [r3, #8]
 80014ca:	60da      	str	r2, [r3, #12]
 80014cc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014ce:	2300      	movs	r3, #0
 80014d0:	613b      	str	r3, [r7, #16]
 80014d2:	4b39      	ldr	r3, [pc, #228]	@ (80015b8 <MX_GPIO_Init+0x100>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014d6:	4a38      	ldr	r2, [pc, #224]	@ (80015b8 <MX_GPIO_Init+0x100>)
 80014d8:	f043 0304 	orr.w	r3, r3, #4
 80014dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80014de:	4b36      	ldr	r3, [pc, #216]	@ (80015b8 <MX_GPIO_Init+0x100>)
 80014e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014e2:	f003 0304 	and.w	r3, r3, #4
 80014e6:	613b      	str	r3, [r7, #16]
 80014e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80014ea:	2300      	movs	r3, #0
 80014ec:	60fb      	str	r3, [r7, #12]
 80014ee:	4b32      	ldr	r3, [pc, #200]	@ (80015b8 <MX_GPIO_Init+0x100>)
 80014f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014f2:	4a31      	ldr	r2, [pc, #196]	@ (80015b8 <MX_GPIO_Init+0x100>)
 80014f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80014f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014fa:	4b2f      	ldr	r3, [pc, #188]	@ (80015b8 <MX_GPIO_Init+0x100>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001502:	60fb      	str	r3, [r7, #12]
 8001504:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001506:	2300      	movs	r3, #0
 8001508:	60bb      	str	r3, [r7, #8]
 800150a:	4b2b      	ldr	r3, [pc, #172]	@ (80015b8 <MX_GPIO_Init+0x100>)
 800150c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800150e:	4a2a      	ldr	r2, [pc, #168]	@ (80015b8 <MX_GPIO_Init+0x100>)
 8001510:	f043 0301 	orr.w	r3, r3, #1
 8001514:	6313      	str	r3, [r2, #48]	@ 0x30
 8001516:	4b28      	ldr	r3, [pc, #160]	@ (80015b8 <MX_GPIO_Init+0x100>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800151a:	f003 0301 	and.w	r3, r3, #1
 800151e:	60bb      	str	r3, [r7, #8]
 8001520:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001522:	2300      	movs	r3, #0
 8001524:	607b      	str	r3, [r7, #4]
 8001526:	4b24      	ldr	r3, [pc, #144]	@ (80015b8 <MX_GPIO_Init+0x100>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800152a:	4a23      	ldr	r2, [pc, #140]	@ (80015b8 <MX_GPIO_Init+0x100>)
 800152c:	f043 0302 	orr.w	r3, r3, #2
 8001530:	6313      	str	r3, [r2, #48]	@ 0x30
 8001532:	4b21      	ldr	r3, [pc, #132]	@ (80015b8 <MX_GPIO_Init+0x100>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001536:	f003 0302 	and.w	r3, r3, #2
 800153a:	607b      	str	r3, [r7, #4]
 800153c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 800153e:	2200      	movs	r2, #0
 8001540:	f44f 6187 	mov.w	r1, #1080	@ 0x438
 8001544:	481d      	ldr	r0, [pc, #116]	@ (80015bc <MX_GPIO_Init+0x104>)
 8001546:	f001 f887 	bl	8002658 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_10, GPIO_PIN_RESET);
 800154a:	2200      	movs	r2, #0
 800154c:	f44f 61a0 	mov.w	r1, #1280	@ 0x500
 8001550:	481b      	ldr	r0, [pc, #108]	@ (80015c0 <MX_GPIO_Init+0x108>)
 8001552:	f001 f881 	bl	8002658 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001556:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800155a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800155c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001560:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001562:	2300      	movs	r3, #0
 8001564:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001566:	f107 0314 	add.w	r3, r7, #20
 800156a:	4619      	mov	r1, r3
 800156c:	4815      	ldr	r0, [pc, #84]	@ (80015c4 <MX_GPIO_Init+0x10c>)
 800156e:	f000 feef 	bl	8002350 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001572:	f44f 6387 	mov.w	r3, #1080	@ 0x438
 8001576:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001578:	2301      	movs	r3, #1
 800157a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157c:	2300      	movs	r3, #0
 800157e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001580:	2300      	movs	r3, #0
 8001582:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001584:	f107 0314 	add.w	r3, r7, #20
 8001588:	4619      	mov	r1, r3
 800158a:	480c      	ldr	r0, [pc, #48]	@ (80015bc <MX_GPIO_Init+0x104>)
 800158c:	f000 fee0 	bl	8002350 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 8001590:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 8001594:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001596:	2301      	movs	r3, #1
 8001598:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159a:	2300      	movs	r3, #0
 800159c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800159e:	2300      	movs	r3, #0
 80015a0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a2:	f107 0314 	add.w	r3, r7, #20
 80015a6:	4619      	mov	r1, r3
 80015a8:	4805      	ldr	r0, [pc, #20]	@ (80015c0 <MX_GPIO_Init+0x108>)
 80015aa:	f000 fed1 	bl	8002350 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 80015ae:	bf00      	nop
 80015b0:	3728      	adds	r7, #40	@ 0x28
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	bf00      	nop
 80015b8:	40023800 	.word	0x40023800
 80015bc:	40020400 	.word	0x40020400
 80015c0:	40020000 	.word	0x40020000
 80015c4:	40020800 	.word	0x40020800

080015c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015cc:	b672      	cpsid	i
}
 80015ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015d0:	bf00      	nop
 80015d2:	e7fd      	b.n	80015d0 <Error_Handler+0x8>

080015d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015da:	2300      	movs	r3, #0
 80015dc:	607b      	str	r3, [r7, #4]
 80015de:	4b10      	ldr	r3, [pc, #64]	@ (8001620 <HAL_MspInit+0x4c>)
 80015e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015e2:	4a0f      	ldr	r2, [pc, #60]	@ (8001620 <HAL_MspInit+0x4c>)
 80015e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80015e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80015ea:	4b0d      	ldr	r3, [pc, #52]	@ (8001620 <HAL_MspInit+0x4c>)
 80015ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80015f2:	607b      	str	r3, [r7, #4]
 80015f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015f6:	2300      	movs	r3, #0
 80015f8:	603b      	str	r3, [r7, #0]
 80015fa:	4b09      	ldr	r3, [pc, #36]	@ (8001620 <HAL_MspInit+0x4c>)
 80015fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015fe:	4a08      	ldr	r2, [pc, #32]	@ (8001620 <HAL_MspInit+0x4c>)
 8001600:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001604:	6413      	str	r3, [r2, #64]	@ 0x40
 8001606:	4b06      	ldr	r3, [pc, #24]	@ (8001620 <HAL_MspInit+0x4c>)
 8001608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800160a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800160e:	603b      	str	r3, [r7, #0]
 8001610:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001612:	bf00      	nop
 8001614:	370c      	adds	r7, #12
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop
 8001620:	40023800 	.word	0x40023800

08001624 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b08a      	sub	sp, #40	@ 0x28
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800162c:	f107 0314 	add.w	r3, r7, #20
 8001630:	2200      	movs	r2, #0
 8001632:	601a      	str	r2, [r3, #0]
 8001634:	605a      	str	r2, [r3, #4]
 8001636:	609a      	str	r2, [r3, #8]
 8001638:	60da      	str	r2, [r3, #12]
 800163a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a17      	ldr	r2, [pc, #92]	@ (80016a0 <HAL_ADC_MspInit+0x7c>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d127      	bne.n	8001696 <HAL_ADC_MspInit+0x72>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001646:	2300      	movs	r3, #0
 8001648:	613b      	str	r3, [r7, #16]
 800164a:	4b16      	ldr	r3, [pc, #88]	@ (80016a4 <HAL_ADC_MspInit+0x80>)
 800164c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800164e:	4a15      	ldr	r2, [pc, #84]	@ (80016a4 <HAL_ADC_MspInit+0x80>)
 8001650:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001654:	6453      	str	r3, [r2, #68]	@ 0x44
 8001656:	4b13      	ldr	r3, [pc, #76]	@ (80016a4 <HAL_ADC_MspInit+0x80>)
 8001658:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800165a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800165e:	613b      	str	r3, [r7, #16]
 8001660:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001662:	2300      	movs	r3, #0
 8001664:	60fb      	str	r3, [r7, #12]
 8001666:	4b0f      	ldr	r3, [pc, #60]	@ (80016a4 <HAL_ADC_MspInit+0x80>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800166a:	4a0e      	ldr	r2, [pc, #56]	@ (80016a4 <HAL_ADC_MspInit+0x80>)
 800166c:	f043 0302 	orr.w	r3, r3, #2
 8001670:	6313      	str	r3, [r2, #48]	@ 0x30
 8001672:	4b0c      	ldr	r3, [pc, #48]	@ (80016a4 <HAL_ADC_MspInit+0x80>)
 8001674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001676:	f003 0302 	and.w	r3, r3, #2
 800167a:	60fb      	str	r3, [r7, #12]
 800167c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800167e:	2301      	movs	r3, #1
 8001680:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001682:	2303      	movs	r3, #3
 8001684:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001686:	2300      	movs	r3, #0
 8001688:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800168a:	f107 0314 	add.w	r3, r7, #20
 800168e:	4619      	mov	r1, r3
 8001690:	4805      	ldr	r0, [pc, #20]	@ (80016a8 <HAL_ADC_MspInit+0x84>)
 8001692:	f000 fe5d 	bl	8002350 <HAL_GPIO_Init>

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001696:	bf00      	nop
 8001698:	3728      	adds	r7, #40	@ 0x28
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
 800169e:	bf00      	nop
 80016a0:	40012000 	.word	0x40012000
 80016a4:	40023800 	.word	0x40023800
 80016a8:	40020400 	.word	0x40020400

080016ac <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b08a      	sub	sp, #40	@ 0x28
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b4:	f107 0314 	add.w	r3, r7, #20
 80016b8:	2200      	movs	r2, #0
 80016ba:	601a      	str	r2, [r3, #0]
 80016bc:	605a      	str	r2, [r3, #4]
 80016be:	609a      	str	r2, [r3, #8]
 80016c0:	60da      	str	r2, [r3, #12]
 80016c2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4a19      	ldr	r2, [pc, #100]	@ (8001730 <HAL_UART_MspInit+0x84>)
 80016ca:	4293      	cmp	r3, r2
 80016cc:	d12b      	bne.n	8001726 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016ce:	2300      	movs	r3, #0
 80016d0:	613b      	str	r3, [r7, #16]
 80016d2:	4b18      	ldr	r3, [pc, #96]	@ (8001734 <HAL_UART_MspInit+0x88>)
 80016d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016d6:	4a17      	ldr	r2, [pc, #92]	@ (8001734 <HAL_UART_MspInit+0x88>)
 80016d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80016de:	4b15      	ldr	r3, [pc, #84]	@ (8001734 <HAL_UART_MspInit+0x88>)
 80016e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016e6:	613b      	str	r3, [r7, #16]
 80016e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ea:	2300      	movs	r3, #0
 80016ec:	60fb      	str	r3, [r7, #12]
 80016ee:	4b11      	ldr	r3, [pc, #68]	@ (8001734 <HAL_UART_MspInit+0x88>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016f2:	4a10      	ldr	r2, [pc, #64]	@ (8001734 <HAL_UART_MspInit+0x88>)
 80016f4:	f043 0301 	orr.w	r3, r3, #1
 80016f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80016fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001734 <HAL_UART_MspInit+0x88>)
 80016fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016fe:	f003 0301 	and.w	r3, r3, #1
 8001702:	60fb      	str	r3, [r7, #12]
 8001704:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001706:	230c      	movs	r3, #12
 8001708:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800170a:	2302      	movs	r3, #2
 800170c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170e:	2300      	movs	r3, #0
 8001710:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001712:	2300      	movs	r3, #0
 8001714:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001716:	2307      	movs	r3, #7
 8001718:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800171a:	f107 0314 	add.w	r3, r7, #20
 800171e:	4619      	mov	r1, r3
 8001720:	4805      	ldr	r0, [pc, #20]	@ (8001738 <HAL_UART_MspInit+0x8c>)
 8001722:	f000 fe15 	bl	8002350 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001726:	bf00      	nop
 8001728:	3728      	adds	r7, #40	@ 0x28
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	40004400 	.word	0x40004400
 8001734:	40023800 	.word	0x40023800
 8001738:	40020000 	.word	0x40020000

0800173c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001740:	bf00      	nop
 8001742:	e7fd      	b.n	8001740 <NMI_Handler+0x4>

08001744 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001748:	bf00      	nop
 800174a:	e7fd      	b.n	8001748 <HardFault_Handler+0x4>

0800174c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001750:	bf00      	nop
 8001752:	e7fd      	b.n	8001750 <MemManage_Handler+0x4>

08001754 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001758:	bf00      	nop
 800175a:	e7fd      	b.n	8001758 <BusFault_Handler+0x4>

0800175c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800175c:	b480      	push	{r7}
 800175e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001760:	bf00      	nop
 8001762:	e7fd      	b.n	8001760 <UsageFault_Handler+0x4>

08001764 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001768:	bf00      	nop
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr

08001772 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001772:	b480      	push	{r7}
 8001774:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001776:	bf00      	nop
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr

08001780 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001784:	bf00      	nop
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr

0800178e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800178e:	b580      	push	{r7, lr}
 8001790:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001792:	f000 f8c7 	bl	8001924 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001796:	bf00      	nop
 8001798:	bd80      	pop	{r7, pc}
	...

0800179c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b086      	sub	sp, #24
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017a4:	4a14      	ldr	r2, [pc, #80]	@ (80017f8 <_sbrk+0x5c>)
 80017a6:	4b15      	ldr	r3, [pc, #84]	@ (80017fc <_sbrk+0x60>)
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017b0:	4b13      	ldr	r3, [pc, #76]	@ (8001800 <_sbrk+0x64>)
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d102      	bne.n	80017be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017b8:	4b11      	ldr	r3, [pc, #68]	@ (8001800 <_sbrk+0x64>)
 80017ba:	4a12      	ldr	r2, [pc, #72]	@ (8001804 <_sbrk+0x68>)
 80017bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017be:	4b10      	ldr	r3, [pc, #64]	@ (8001800 <_sbrk+0x64>)
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	4413      	add	r3, r2
 80017c6:	693a      	ldr	r2, [r7, #16]
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d207      	bcs.n	80017dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017cc:	f002 f82c 	bl	8003828 <__errno>
 80017d0:	4603      	mov	r3, r0
 80017d2:	220c      	movs	r2, #12
 80017d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017d6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80017da:	e009      	b.n	80017f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017dc:	4b08      	ldr	r3, [pc, #32]	@ (8001800 <_sbrk+0x64>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017e2:	4b07      	ldr	r3, [pc, #28]	@ (8001800 <_sbrk+0x64>)
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	4413      	add	r3, r2
 80017ea:	4a05      	ldr	r2, [pc, #20]	@ (8001800 <_sbrk+0x64>)
 80017ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017ee:	68fb      	ldr	r3, [r7, #12]
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	3718      	adds	r7, #24
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	20018000 	.word	0x20018000
 80017fc:	00000400 	.word	0x00000400
 8001800:	20000108 	.word	0x20000108
 8001804:	20000258 	.word	0x20000258

08001808 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800180c:	4b06      	ldr	r3, [pc, #24]	@ (8001828 <SystemInit+0x20>)
 800180e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001812:	4a05      	ldr	r2, [pc, #20]	@ (8001828 <SystemInit+0x20>)
 8001814:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001818:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800181c:	bf00      	nop
 800181e:	46bd      	mov	sp, r7
 8001820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001824:	4770      	bx	lr
 8001826:	bf00      	nop
 8001828:	e000ed00 	.word	0xe000ed00

0800182c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800182c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001864 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001830:	f7ff ffea 	bl	8001808 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001834:	480c      	ldr	r0, [pc, #48]	@ (8001868 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001836:	490d      	ldr	r1, [pc, #52]	@ (800186c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001838:	4a0d      	ldr	r2, [pc, #52]	@ (8001870 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800183a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800183c:	e002      	b.n	8001844 <LoopCopyDataInit>

0800183e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800183e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001840:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001842:	3304      	adds	r3, #4

08001844 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001844:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001846:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001848:	d3f9      	bcc.n	800183e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800184a:	4a0a      	ldr	r2, [pc, #40]	@ (8001874 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800184c:	4c0a      	ldr	r4, [pc, #40]	@ (8001878 <LoopFillZerobss+0x22>)
  movs r3, #0
 800184e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001850:	e001      	b.n	8001856 <LoopFillZerobss>

08001852 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001852:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001854:	3204      	adds	r2, #4

08001856 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001856:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001858:	d3fb      	bcc.n	8001852 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800185a:	f001 ffeb 	bl	8003834 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800185e:	f7ff fc23 	bl	80010a8 <main>
  bx  lr    
 8001862:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001864:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001868:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800186c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001870:	080041d8 	.word	0x080041d8
  ldr r2, =_sbss
 8001874:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001878:	20000258 	.word	0x20000258

0800187c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800187c:	e7fe      	b.n	800187c <ADC_IRQHandler>
	...

08001880 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001884:	4b0e      	ldr	r3, [pc, #56]	@ (80018c0 <HAL_Init+0x40>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a0d      	ldr	r2, [pc, #52]	@ (80018c0 <HAL_Init+0x40>)
 800188a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800188e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001890:	4b0b      	ldr	r3, [pc, #44]	@ (80018c0 <HAL_Init+0x40>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a0a      	ldr	r2, [pc, #40]	@ (80018c0 <HAL_Init+0x40>)
 8001896:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800189a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800189c:	4b08      	ldr	r3, [pc, #32]	@ (80018c0 <HAL_Init+0x40>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a07      	ldr	r2, [pc, #28]	@ (80018c0 <HAL_Init+0x40>)
 80018a2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018a8:	2003      	movs	r0, #3
 80018aa:	f000 fd1d 	bl	80022e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018ae:	2000      	movs	r0, #0
 80018b0:	f000 f808 	bl	80018c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018b4:	f7ff fe8e 	bl	80015d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018b8:	2300      	movs	r3, #0
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	40023c00 	.word	0x40023c00

080018c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018cc:	4b12      	ldr	r3, [pc, #72]	@ (8001918 <HAL_InitTick+0x54>)
 80018ce:	681a      	ldr	r2, [r3, #0]
 80018d0:	4b12      	ldr	r3, [pc, #72]	@ (800191c <HAL_InitTick+0x58>)
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	4619      	mov	r1, r3
 80018d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018da:	fbb3 f3f1 	udiv	r3, r3, r1
 80018de:	fbb2 f3f3 	udiv	r3, r2, r3
 80018e2:	4618      	mov	r0, r3
 80018e4:	f000 fd27 	bl	8002336 <HAL_SYSTICK_Config>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	e00e      	b.n	8001910 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2b0f      	cmp	r3, #15
 80018f6:	d80a      	bhi.n	800190e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018f8:	2200      	movs	r2, #0
 80018fa:	6879      	ldr	r1, [r7, #4]
 80018fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001900:	f000 fcfd 	bl	80022fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001904:	4a06      	ldr	r2, [pc, #24]	@ (8001920 <HAL_InitTick+0x5c>)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800190a:	2300      	movs	r3, #0
 800190c:	e000      	b.n	8001910 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800190e:	2301      	movs	r3, #1
}
 8001910:	4618      	mov	r0, r3
 8001912:	3708      	adds	r7, #8
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}
 8001918:	20000000 	.word	0x20000000
 800191c:	20000008 	.word	0x20000008
 8001920:	20000004 	.word	0x20000004

08001924 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001928:	4b06      	ldr	r3, [pc, #24]	@ (8001944 <HAL_IncTick+0x20>)
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	461a      	mov	r2, r3
 800192e:	4b06      	ldr	r3, [pc, #24]	@ (8001948 <HAL_IncTick+0x24>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4413      	add	r3, r2
 8001934:	4a04      	ldr	r2, [pc, #16]	@ (8001948 <HAL_IncTick+0x24>)
 8001936:	6013      	str	r3, [r2, #0]
}
 8001938:	bf00      	nop
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	20000008 	.word	0x20000008
 8001948:	2000010c 	.word	0x2000010c

0800194c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800194c:	b480      	push	{r7}
 800194e:	af00      	add	r7, sp, #0
  return uwTick;
 8001950:	4b03      	ldr	r3, [pc, #12]	@ (8001960 <HAL_GetTick+0x14>)
 8001952:	681b      	ldr	r3, [r3, #0]
}
 8001954:	4618      	mov	r0, r3
 8001956:	46bd      	mov	sp, r7
 8001958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	2000010c 	.word	0x2000010c

08001964 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b084      	sub	sp, #16
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800196c:	f7ff ffee 	bl	800194c <HAL_GetTick>
 8001970:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800197c:	d005      	beq.n	800198a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800197e:	4b0a      	ldr	r3, [pc, #40]	@ (80019a8 <HAL_Delay+0x44>)
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	461a      	mov	r2, r3
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	4413      	add	r3, r2
 8001988:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800198a:	bf00      	nop
 800198c:	f7ff ffde 	bl	800194c <HAL_GetTick>
 8001990:	4602      	mov	r2, r0
 8001992:	68bb      	ldr	r3, [r7, #8]
 8001994:	1ad3      	subs	r3, r2, r3
 8001996:	68fa      	ldr	r2, [r7, #12]
 8001998:	429a      	cmp	r2, r3
 800199a:	d8f7      	bhi.n	800198c <HAL_Delay+0x28>
  {
  }
}
 800199c:	bf00      	nop
 800199e:	bf00      	nop
 80019a0:	3710      	adds	r7, #16
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	20000008 	.word	0x20000008

080019ac <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b084      	sub	sp, #16
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019b4:	2300      	movs	r3, #0
 80019b6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d101      	bne.n	80019c2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80019be:	2301      	movs	r3, #1
 80019c0:	e033      	b.n	8001a2a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d109      	bne.n	80019de <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f7ff fe2a 	bl	8001624 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2200      	movs	r2, #0
 80019d4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2200      	movs	r2, #0
 80019da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019e2:	f003 0310 	and.w	r3, r3, #16
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d118      	bne.n	8001a1c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ee:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80019f2:	f023 0302 	bic.w	r3, r3, #2
 80019f6:	f043 0202 	orr.w	r2, r3, #2
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80019fe:	6878      	ldr	r0, [r7, #4]
 8001a00:	f000 fac4 	bl	8001f8c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2200      	movs	r2, #0
 8001a08:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a0e:	f023 0303 	bic.w	r3, r3, #3
 8001a12:	f043 0201 	orr.w	r2, r3, #1
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	641a      	str	r2, [r3, #64]	@ 0x40
 8001a1a:	e001      	b.n	8001a20 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2200      	movs	r2, #0
 8001a24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001a28:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3710      	adds	r7, #16
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}

08001a32 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001a32:	b480      	push	{r7}
 8001a34:	b083      	sub	sp, #12
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d101      	bne.n	8001a48 <HAL_ADC_Stop+0x16>
 8001a44:	2302      	movs	r3, #2
 8001a46:	e021      	b.n	8001a8c <HAL_ADC_Stop+0x5a>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	689a      	ldr	r2, [r3, #8]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f022 0201 	bic.w	r2, r2, #1
 8001a5e:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	689b      	ldr	r3, [r3, #8]
 8001a66:	f003 0301 	and.w	r3, r3, #1
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d109      	bne.n	8001a82 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a72:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001a76:	f023 0301 	bic.w	r3, r3, #1
 8001a7a:	f043 0201 	orr.w	r2, r3, #1
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2200      	movs	r2, #0
 8001a86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001a8a:	2300      	movs	r3, #0
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	370c      	adds	r7, #12
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr

08001a98 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b084      	sub	sp, #16
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	689b      	ldr	r3, [r3, #8]
 8001aac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ab0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ab4:	d113      	bne.n	8001ade <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	689b      	ldr	r3, [r3, #8]
 8001abc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001ac0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001ac4:	d10b      	bne.n	8001ade <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aca:	f043 0220 	orr.w	r2, r3, #32
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8001ada:	2301      	movs	r3, #1
 8001adc:	e063      	b.n	8001ba6 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ade:	f7ff ff35 	bl	800194c <HAL_GetTick>
 8001ae2:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001ae4:	e021      	b.n	8001b2a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001aec:	d01d      	beq.n	8001b2a <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001aee:	683b      	ldr	r3, [r7, #0]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d007      	beq.n	8001b04 <HAL_ADC_PollForConversion+0x6c>
 8001af4:	f7ff ff2a 	bl	800194c <HAL_GetTick>
 8001af8:	4602      	mov	r2, r0
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	683a      	ldr	r2, [r7, #0]
 8001b00:	429a      	cmp	r2, r3
 8001b02:	d212      	bcs.n	8001b2a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 0302 	and.w	r3, r3, #2
 8001b0e:	2b02      	cmp	r3, #2
 8001b10:	d00b      	beq.n	8001b2a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b16:	f043 0204 	orr.w	r2, r3, #4
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	2200      	movs	r2, #0
 8001b22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8001b26:	2303      	movs	r3, #3
 8001b28:	e03d      	b.n	8001ba6 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 0302 	and.w	r3, r3, #2
 8001b34:	2b02      	cmp	r3, #2
 8001b36:	d1d6      	bne.n	8001ae6 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f06f 0212 	mvn.w	r2, #18
 8001b40:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b46:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d123      	bne.n	8001ba4 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d11f      	bne.n	8001ba4 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b6a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d006      	beq.n	8001b80 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d111      	bne.n	8001ba4 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b84:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b90:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d105      	bne.n	8001ba4 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b9c:	f043 0201 	orr.w	r2, r3, #1
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8001ba4:	2300      	movs	r3, #0
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3710      	adds	r7, #16
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
	...

08001bb0 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b085      	sub	sp, #20
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d101      	bne.n	8001bca <HAL_ADC_Start_IT+0x1a>
 8001bc6:	2302      	movs	r3, #2
 8001bc8:	e0a1      	b.n	8001d0e <HAL_ADC_Start_IT+0x15e>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2201      	movs	r2, #1
 8001bce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	f003 0301 	and.w	r3, r3, #1
 8001bdc:	2b01      	cmp	r3, #1
 8001bde:	d018      	beq.n	8001c12 <HAL_ADC_Start_IT+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	689a      	ldr	r2, [r3, #8]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f042 0201 	orr.w	r2, r2, #1
 8001bee:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001bf0:	4b4a      	ldr	r3, [pc, #296]	@ (8001d1c <HAL_ADC_Start_IT+0x16c>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a4a      	ldr	r2, [pc, #296]	@ (8001d20 <HAL_ADC_Start_IT+0x170>)
 8001bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8001bfa:	0c9a      	lsrs	r2, r3, #18
 8001bfc:	4613      	mov	r3, r2
 8001bfe:	005b      	lsls	r3, r3, #1
 8001c00:	4413      	add	r3, r2
 8001c02:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001c04:	e002      	b.n	8001c0c <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8001c06:	68bb      	ldr	r3, [r7, #8]
 8001c08:	3b01      	subs	r3, #1
 8001c0a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d1f9      	bne.n	8001c06 <HAL_ADC_Start_IT+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	f003 0301 	and.w	r3, r3, #1
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	d169      	bne.n	8001cf4 <HAL_ADC_Start_IT+0x144>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c24:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001c28:	f023 0301 	bic.w	r3, r3, #1
 8001c2c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d007      	beq.n	8001c52 <HAL_ADC_Start_IT+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c46:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001c4a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c56:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001c5e:	d106      	bne.n	8001c6e <HAL_ADC_Start_IT+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c64:	f023 0206 	bic.w	r2, r3, #6
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	645a      	str	r2, [r3, #68]	@ 0x44
 8001c6c:	e002      	b.n	8001c74 <HAL_ADC_Start_IT+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2200      	movs	r2, #0
 8001c72:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2200      	movs	r2, #0
 8001c78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c7c:	4b29      	ldr	r3, [pc, #164]	@ (8001d24 <HAL_ADC_Start_IT+0x174>)
 8001c7e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001c88:	601a      	str	r2, [r3, #0]

    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	687a      	ldr	r2, [r7, #4]
 8001c92:	6812      	ldr	r2, [r2, #0]
 8001c94:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001c98:	f043 0320 	orr.w	r3, r3, #32
 8001c9c:	6053      	str	r3, [r2, #4]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	f003 031f 	and.w	r3, r3, #31
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d10f      	bne.n	8001cca <HAL_ADC_Start_IT+0x11a>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d129      	bne.n	8001d0c <HAL_ADC_Start_IT+0x15c>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	689a      	ldr	r2, [r3, #8]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001cc6:	609a      	str	r2, [r3, #8]
 8001cc8:	e020      	b.n	8001d0c <HAL_ADC_Start_IT+0x15c>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a16      	ldr	r2, [pc, #88]	@ (8001d28 <HAL_ADC_Start_IT+0x178>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d11b      	bne.n	8001d0c <HAL_ADC_Start_IT+0x15c>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	689b      	ldr	r3, [r3, #8]
 8001cda:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d114      	bne.n	8001d0c <HAL_ADC_Start_IT+0x15c>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	689a      	ldr	r2, [r3, #8]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001cf0:	609a      	str	r2, [r3, #8]
 8001cf2:	e00b      	b.n	8001d0c <HAL_ADC_Start_IT+0x15c>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cf8:	f043 0210 	orr.w	r2, r3, #16
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d04:	f043 0201 	orr.w	r2, r3, #1
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001d0c:	2300      	movs	r3, #0
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3714      	adds	r7, #20
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	20000000 	.word	0x20000000
 8001d20:	431bde83 	.word	0x431bde83
 8001d24:	40012300 	.word	0x40012300
 8001d28:	40012000 	.word	0x40012000

08001d2c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	370c      	adds	r7, #12
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
	...

08001d48 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b085      	sub	sp, #20
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
 8001d50:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001d52:	2300      	movs	r3, #0
 8001d54:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d101      	bne.n	8001d64 <HAL_ADC_ConfigChannel+0x1c>
 8001d60:	2302      	movs	r3, #2
 8001d62:	e105      	b.n	8001f70 <HAL_ADC_ConfigChannel+0x228>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2201      	movs	r2, #1
 8001d68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	2b09      	cmp	r3, #9
 8001d72:	d925      	bls.n	8001dc0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	68d9      	ldr	r1, [r3, #12]
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	b29b      	uxth	r3, r3
 8001d80:	461a      	mov	r2, r3
 8001d82:	4613      	mov	r3, r2
 8001d84:	005b      	lsls	r3, r3, #1
 8001d86:	4413      	add	r3, r2
 8001d88:	3b1e      	subs	r3, #30
 8001d8a:	2207      	movs	r2, #7
 8001d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d90:	43da      	mvns	r2, r3
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	400a      	ands	r2, r1
 8001d98:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	68d9      	ldr	r1, [r3, #12]
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	689a      	ldr	r2, [r3, #8]
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	b29b      	uxth	r3, r3
 8001daa:	4618      	mov	r0, r3
 8001dac:	4603      	mov	r3, r0
 8001dae:	005b      	lsls	r3, r3, #1
 8001db0:	4403      	add	r3, r0
 8001db2:	3b1e      	subs	r3, #30
 8001db4:	409a      	lsls	r2, r3
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	430a      	orrs	r2, r1
 8001dbc:	60da      	str	r2, [r3, #12]
 8001dbe:	e022      	b.n	8001e06 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	6919      	ldr	r1, [r3, #16]
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	b29b      	uxth	r3, r3
 8001dcc:	461a      	mov	r2, r3
 8001dce:	4613      	mov	r3, r2
 8001dd0:	005b      	lsls	r3, r3, #1
 8001dd2:	4413      	add	r3, r2
 8001dd4:	2207      	movs	r2, #7
 8001dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dda:	43da      	mvns	r2, r3
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	400a      	ands	r2, r1
 8001de2:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	6919      	ldr	r1, [r3, #16]
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	689a      	ldr	r2, [r3, #8]
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	b29b      	uxth	r3, r3
 8001df4:	4618      	mov	r0, r3
 8001df6:	4603      	mov	r3, r0
 8001df8:	005b      	lsls	r3, r3, #1
 8001dfa:	4403      	add	r3, r0
 8001dfc:	409a      	lsls	r2, r3
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	430a      	orrs	r2, r1
 8001e04:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	2b06      	cmp	r3, #6
 8001e0c:	d824      	bhi.n	8001e58 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	685a      	ldr	r2, [r3, #4]
 8001e18:	4613      	mov	r3, r2
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	4413      	add	r3, r2
 8001e1e:	3b05      	subs	r3, #5
 8001e20:	221f      	movs	r2, #31
 8001e22:	fa02 f303 	lsl.w	r3, r2, r3
 8001e26:	43da      	mvns	r2, r3
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	400a      	ands	r2, r1
 8001e2e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	b29b      	uxth	r3, r3
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	685a      	ldr	r2, [r3, #4]
 8001e42:	4613      	mov	r3, r2
 8001e44:	009b      	lsls	r3, r3, #2
 8001e46:	4413      	add	r3, r2
 8001e48:	3b05      	subs	r3, #5
 8001e4a:	fa00 f203 	lsl.w	r2, r0, r3
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	430a      	orrs	r2, r1
 8001e54:	635a      	str	r2, [r3, #52]	@ 0x34
 8001e56:	e04c      	b.n	8001ef2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	2b0c      	cmp	r3, #12
 8001e5e:	d824      	bhi.n	8001eaa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	685a      	ldr	r2, [r3, #4]
 8001e6a:	4613      	mov	r3, r2
 8001e6c:	009b      	lsls	r3, r3, #2
 8001e6e:	4413      	add	r3, r2
 8001e70:	3b23      	subs	r3, #35	@ 0x23
 8001e72:	221f      	movs	r2, #31
 8001e74:	fa02 f303 	lsl.w	r3, r2, r3
 8001e78:	43da      	mvns	r2, r3
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	400a      	ands	r2, r1
 8001e80:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	b29b      	uxth	r3, r3
 8001e8e:	4618      	mov	r0, r3
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	685a      	ldr	r2, [r3, #4]
 8001e94:	4613      	mov	r3, r2
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	4413      	add	r3, r2
 8001e9a:	3b23      	subs	r3, #35	@ 0x23
 8001e9c:	fa00 f203 	lsl.w	r2, r0, r3
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	430a      	orrs	r2, r1
 8001ea6:	631a      	str	r2, [r3, #48]	@ 0x30
 8001ea8:	e023      	b.n	8001ef2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	685a      	ldr	r2, [r3, #4]
 8001eb4:	4613      	mov	r3, r2
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	4413      	add	r3, r2
 8001eba:	3b41      	subs	r3, #65	@ 0x41
 8001ebc:	221f      	movs	r2, #31
 8001ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec2:	43da      	mvns	r2, r3
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	400a      	ands	r2, r1
 8001eca:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	b29b      	uxth	r3, r3
 8001ed8:	4618      	mov	r0, r3
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	685a      	ldr	r2, [r3, #4]
 8001ede:	4613      	mov	r3, r2
 8001ee0:	009b      	lsls	r3, r3, #2
 8001ee2:	4413      	add	r3, r2
 8001ee4:	3b41      	subs	r3, #65	@ 0x41
 8001ee6:	fa00 f203 	lsl.w	r2, r0, r3
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	430a      	orrs	r2, r1
 8001ef0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ef2:	4b22      	ldr	r3, [pc, #136]	@ (8001f7c <HAL_ADC_ConfigChannel+0x234>)
 8001ef4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a21      	ldr	r2, [pc, #132]	@ (8001f80 <HAL_ADC_ConfigChannel+0x238>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d109      	bne.n	8001f14 <HAL_ADC_ConfigChannel+0x1cc>
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	2b12      	cmp	r3, #18
 8001f06:	d105      	bne.n	8001f14 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a19      	ldr	r2, [pc, #100]	@ (8001f80 <HAL_ADC_ConfigChannel+0x238>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d123      	bne.n	8001f66 <HAL_ADC_ConfigChannel+0x21e>
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	2b10      	cmp	r3, #16
 8001f24:	d003      	beq.n	8001f2e <HAL_ADC_ConfigChannel+0x1e6>
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	2b11      	cmp	r3, #17
 8001f2c:	d11b      	bne.n	8001f66 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	2b10      	cmp	r3, #16
 8001f40:	d111      	bne.n	8001f66 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001f42:	4b10      	ldr	r3, [pc, #64]	@ (8001f84 <HAL_ADC_ConfigChannel+0x23c>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a10      	ldr	r2, [pc, #64]	@ (8001f88 <HAL_ADC_ConfigChannel+0x240>)
 8001f48:	fba2 2303 	umull	r2, r3, r2, r3
 8001f4c:	0c9a      	lsrs	r2, r3, #18
 8001f4e:	4613      	mov	r3, r2
 8001f50:	009b      	lsls	r3, r3, #2
 8001f52:	4413      	add	r3, r2
 8001f54:	005b      	lsls	r3, r3, #1
 8001f56:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001f58:	e002      	b.n	8001f60 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	3b01      	subs	r3, #1
 8001f5e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d1f9      	bne.n	8001f5a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001f6e:	2300      	movs	r3, #0
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3714      	adds	r7, #20
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr
 8001f7c:	40012300 	.word	0x40012300
 8001f80:	40012000 	.word	0x40012000
 8001f84:	20000000 	.word	0x20000000
 8001f88:	431bde83 	.word	0x431bde83

08001f8c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b085      	sub	sp, #20
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f94:	4b79      	ldr	r3, [pc, #484]	@ (800217c <ADC_Init+0x1f0>)
 8001f96:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	685a      	ldr	r2, [r3, #4]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	431a      	orrs	r2, r3
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	685a      	ldr	r2, [r3, #4]
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001fc0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	6859      	ldr	r1, [r3, #4]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	691b      	ldr	r3, [r3, #16]
 8001fcc:	021a      	lsls	r2, r3, #8
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	430a      	orrs	r2, r1
 8001fd4:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	685a      	ldr	r2, [r3, #4]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001fe4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	6859      	ldr	r1, [r3, #4]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	689a      	ldr	r2, [r3, #8]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	430a      	orrs	r2, r1
 8001ff6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	689a      	ldr	r2, [r3, #8]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002006:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	6899      	ldr	r1, [r3, #8]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	68da      	ldr	r2, [r3, #12]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	430a      	orrs	r2, r1
 8002018:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800201e:	4a58      	ldr	r2, [pc, #352]	@ (8002180 <ADC_Init+0x1f4>)
 8002020:	4293      	cmp	r3, r2
 8002022:	d022      	beq.n	800206a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	689a      	ldr	r2, [r3, #8]
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002032:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	6899      	ldr	r1, [r3, #8]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	430a      	orrs	r2, r1
 8002044:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	689a      	ldr	r2, [r3, #8]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002054:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	6899      	ldr	r1, [r3, #8]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	430a      	orrs	r2, r1
 8002066:	609a      	str	r2, [r3, #8]
 8002068:	e00f      	b.n	800208a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	689a      	ldr	r2, [r3, #8]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002078:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	689a      	ldr	r2, [r3, #8]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002088:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	689a      	ldr	r2, [r3, #8]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f022 0202 	bic.w	r2, r2, #2
 8002098:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	6899      	ldr	r1, [r3, #8]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	7e1b      	ldrb	r3, [r3, #24]
 80020a4:	005a      	lsls	r2, r3, #1
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	430a      	orrs	r2, r1
 80020ac:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d01b      	beq.n	80020f0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	685a      	ldr	r2, [r3, #4]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80020c6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	685a      	ldr	r2, [r3, #4]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80020d6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	6859      	ldr	r1, [r3, #4]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020e2:	3b01      	subs	r3, #1
 80020e4:	035a      	lsls	r2, r3, #13
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	430a      	orrs	r2, r1
 80020ec:	605a      	str	r2, [r3, #4]
 80020ee:	e007      	b.n	8002100 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	685a      	ldr	r2, [r3, #4]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80020fe:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800210e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	69db      	ldr	r3, [r3, #28]
 800211a:	3b01      	subs	r3, #1
 800211c:	051a      	lsls	r2, r3, #20
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	430a      	orrs	r2, r1
 8002124:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	689a      	ldr	r2, [r3, #8]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002134:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	6899      	ldr	r1, [r3, #8]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002142:	025a      	lsls	r2, r3, #9
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	430a      	orrs	r2, r1
 800214a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	689a      	ldr	r2, [r3, #8]
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800215a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	6899      	ldr	r1, [r3, #8]
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	695b      	ldr	r3, [r3, #20]
 8002166:	029a      	lsls	r2, r3, #10
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	430a      	orrs	r2, r1
 800216e:	609a      	str	r2, [r3, #8]
}
 8002170:	bf00      	nop
 8002172:	3714      	adds	r7, #20
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr
 800217c:	40012300 	.word	0x40012300
 8002180:	0f000001 	.word	0x0f000001

08002184 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002184:	b480      	push	{r7}
 8002186:	b085      	sub	sp, #20
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	f003 0307 	and.w	r3, r3, #7
 8002192:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002194:	4b0c      	ldr	r3, [pc, #48]	@ (80021c8 <__NVIC_SetPriorityGrouping+0x44>)
 8002196:	68db      	ldr	r3, [r3, #12]
 8002198:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800219a:	68ba      	ldr	r2, [r7, #8]
 800219c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80021a0:	4013      	ands	r3, r2
 80021a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021ac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80021b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80021b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021b6:	4a04      	ldr	r2, [pc, #16]	@ (80021c8 <__NVIC_SetPriorityGrouping+0x44>)
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	60d3      	str	r3, [r2, #12]
}
 80021bc:	bf00      	nop
 80021be:	3714      	adds	r7, #20
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr
 80021c8:	e000ed00 	.word	0xe000ed00

080021cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021d0:	4b04      	ldr	r3, [pc, #16]	@ (80021e4 <__NVIC_GetPriorityGrouping+0x18>)
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	0a1b      	lsrs	r3, r3, #8
 80021d6:	f003 0307 	and.w	r3, r3, #7
}
 80021da:	4618      	mov	r0, r3
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr
 80021e4:	e000ed00 	.word	0xe000ed00

080021e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021e8:	b480      	push	{r7}
 80021ea:	b083      	sub	sp, #12
 80021ec:	af00      	add	r7, sp, #0
 80021ee:	4603      	mov	r3, r0
 80021f0:	6039      	str	r1, [r7, #0]
 80021f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	db0a      	blt.n	8002212 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	b2da      	uxtb	r2, r3
 8002200:	490c      	ldr	r1, [pc, #48]	@ (8002234 <__NVIC_SetPriority+0x4c>)
 8002202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002206:	0112      	lsls	r2, r2, #4
 8002208:	b2d2      	uxtb	r2, r2
 800220a:	440b      	add	r3, r1
 800220c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002210:	e00a      	b.n	8002228 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	b2da      	uxtb	r2, r3
 8002216:	4908      	ldr	r1, [pc, #32]	@ (8002238 <__NVIC_SetPriority+0x50>)
 8002218:	79fb      	ldrb	r3, [r7, #7]
 800221a:	f003 030f 	and.w	r3, r3, #15
 800221e:	3b04      	subs	r3, #4
 8002220:	0112      	lsls	r2, r2, #4
 8002222:	b2d2      	uxtb	r2, r2
 8002224:	440b      	add	r3, r1
 8002226:	761a      	strb	r2, [r3, #24]
}
 8002228:	bf00      	nop
 800222a:	370c      	adds	r7, #12
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr
 8002234:	e000e100 	.word	0xe000e100
 8002238:	e000ed00 	.word	0xe000ed00

0800223c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800223c:	b480      	push	{r7}
 800223e:	b089      	sub	sp, #36	@ 0x24
 8002240:	af00      	add	r7, sp, #0
 8002242:	60f8      	str	r0, [r7, #12]
 8002244:	60b9      	str	r1, [r7, #8]
 8002246:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	f003 0307 	and.w	r3, r3, #7
 800224e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002250:	69fb      	ldr	r3, [r7, #28]
 8002252:	f1c3 0307 	rsb	r3, r3, #7
 8002256:	2b04      	cmp	r3, #4
 8002258:	bf28      	it	cs
 800225a:	2304      	movcs	r3, #4
 800225c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800225e:	69fb      	ldr	r3, [r7, #28]
 8002260:	3304      	adds	r3, #4
 8002262:	2b06      	cmp	r3, #6
 8002264:	d902      	bls.n	800226c <NVIC_EncodePriority+0x30>
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	3b03      	subs	r3, #3
 800226a:	e000      	b.n	800226e <NVIC_EncodePriority+0x32>
 800226c:	2300      	movs	r3, #0
 800226e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002270:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002274:	69bb      	ldr	r3, [r7, #24]
 8002276:	fa02 f303 	lsl.w	r3, r2, r3
 800227a:	43da      	mvns	r2, r3
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	401a      	ands	r2, r3
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002284:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	fa01 f303 	lsl.w	r3, r1, r3
 800228e:	43d9      	mvns	r1, r3
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002294:	4313      	orrs	r3, r2
         );
}
 8002296:	4618      	mov	r0, r3
 8002298:	3724      	adds	r7, #36	@ 0x24
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr
	...

080022a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022a4:	b580      	push	{r7, lr}
 80022a6:	b082      	sub	sp, #8
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	3b01      	subs	r3, #1
 80022b0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80022b4:	d301      	bcc.n	80022ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022b6:	2301      	movs	r3, #1
 80022b8:	e00f      	b.n	80022da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022ba:	4a0a      	ldr	r2, [pc, #40]	@ (80022e4 <SysTick_Config+0x40>)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	3b01      	subs	r3, #1
 80022c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022c2:	210f      	movs	r1, #15
 80022c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80022c8:	f7ff ff8e 	bl	80021e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022cc:	4b05      	ldr	r3, [pc, #20]	@ (80022e4 <SysTick_Config+0x40>)
 80022ce:	2200      	movs	r2, #0
 80022d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022d2:	4b04      	ldr	r3, [pc, #16]	@ (80022e4 <SysTick_Config+0x40>)
 80022d4:	2207      	movs	r2, #7
 80022d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022d8:	2300      	movs	r3, #0
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3708      	adds	r7, #8
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	e000e010 	.word	0xe000e010

080022e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b082      	sub	sp, #8
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022f0:	6878      	ldr	r0, [r7, #4]
 80022f2:	f7ff ff47 	bl	8002184 <__NVIC_SetPriorityGrouping>
}
 80022f6:	bf00      	nop
 80022f8:	3708      	adds	r7, #8
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}

080022fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022fe:	b580      	push	{r7, lr}
 8002300:	b086      	sub	sp, #24
 8002302:	af00      	add	r7, sp, #0
 8002304:	4603      	mov	r3, r0
 8002306:	60b9      	str	r1, [r7, #8]
 8002308:	607a      	str	r2, [r7, #4]
 800230a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800230c:	2300      	movs	r3, #0
 800230e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002310:	f7ff ff5c 	bl	80021cc <__NVIC_GetPriorityGrouping>
 8002314:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002316:	687a      	ldr	r2, [r7, #4]
 8002318:	68b9      	ldr	r1, [r7, #8]
 800231a:	6978      	ldr	r0, [r7, #20]
 800231c:	f7ff ff8e 	bl	800223c <NVIC_EncodePriority>
 8002320:	4602      	mov	r2, r0
 8002322:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002326:	4611      	mov	r1, r2
 8002328:	4618      	mov	r0, r3
 800232a:	f7ff ff5d 	bl	80021e8 <__NVIC_SetPriority>
}
 800232e:	bf00      	nop
 8002330:	3718      	adds	r7, #24
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}

08002336 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002336:	b580      	push	{r7, lr}
 8002338:	b082      	sub	sp, #8
 800233a:	af00      	add	r7, sp, #0
 800233c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800233e:	6878      	ldr	r0, [r7, #4]
 8002340:	f7ff ffb0 	bl	80022a4 <SysTick_Config>
 8002344:	4603      	mov	r3, r0
}
 8002346:	4618      	mov	r0, r3
 8002348:	3708      	adds	r7, #8
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
	...

08002350 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002350:	b480      	push	{r7}
 8002352:	b089      	sub	sp, #36	@ 0x24
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800235a:	2300      	movs	r3, #0
 800235c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800235e:	2300      	movs	r3, #0
 8002360:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002362:	2300      	movs	r3, #0
 8002364:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002366:	2300      	movs	r3, #0
 8002368:	61fb      	str	r3, [r7, #28]
 800236a:	e159      	b.n	8002620 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800236c:	2201      	movs	r2, #1
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	fa02 f303 	lsl.w	r3, r2, r3
 8002374:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	697a      	ldr	r2, [r7, #20]
 800237c:	4013      	ands	r3, r2
 800237e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002380:	693a      	ldr	r2, [r7, #16]
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	429a      	cmp	r2, r3
 8002386:	f040 8148 	bne.w	800261a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	f003 0303 	and.w	r3, r3, #3
 8002392:	2b01      	cmp	r3, #1
 8002394:	d005      	beq.n	80023a2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800239e:	2b02      	cmp	r3, #2
 80023a0:	d130      	bne.n	8002404 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80023a8:	69fb      	ldr	r3, [r7, #28]
 80023aa:	005b      	lsls	r3, r3, #1
 80023ac:	2203      	movs	r2, #3
 80023ae:	fa02 f303 	lsl.w	r3, r2, r3
 80023b2:	43db      	mvns	r3, r3
 80023b4:	69ba      	ldr	r2, [r7, #24]
 80023b6:	4013      	ands	r3, r2
 80023b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	68da      	ldr	r2, [r3, #12]
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	005b      	lsls	r3, r3, #1
 80023c2:	fa02 f303 	lsl.w	r3, r2, r3
 80023c6:	69ba      	ldr	r2, [r7, #24]
 80023c8:	4313      	orrs	r3, r2
 80023ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	69ba      	ldr	r2, [r7, #24]
 80023d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023d8:	2201      	movs	r2, #1
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	fa02 f303 	lsl.w	r3, r2, r3
 80023e0:	43db      	mvns	r3, r3
 80023e2:	69ba      	ldr	r2, [r7, #24]
 80023e4:	4013      	ands	r3, r2
 80023e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	091b      	lsrs	r3, r3, #4
 80023ee:	f003 0201 	and.w	r2, r3, #1
 80023f2:	69fb      	ldr	r3, [r7, #28]
 80023f4:	fa02 f303 	lsl.w	r3, r2, r3
 80023f8:	69ba      	ldr	r2, [r7, #24]
 80023fa:	4313      	orrs	r3, r2
 80023fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	69ba      	ldr	r2, [r7, #24]
 8002402:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	f003 0303 	and.w	r3, r3, #3
 800240c:	2b03      	cmp	r3, #3
 800240e:	d017      	beq.n	8002440 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002416:	69fb      	ldr	r3, [r7, #28]
 8002418:	005b      	lsls	r3, r3, #1
 800241a:	2203      	movs	r2, #3
 800241c:	fa02 f303 	lsl.w	r3, r2, r3
 8002420:	43db      	mvns	r3, r3
 8002422:	69ba      	ldr	r2, [r7, #24]
 8002424:	4013      	ands	r3, r2
 8002426:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	689a      	ldr	r2, [r3, #8]
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	005b      	lsls	r3, r3, #1
 8002430:	fa02 f303 	lsl.w	r3, r2, r3
 8002434:	69ba      	ldr	r2, [r7, #24]
 8002436:	4313      	orrs	r3, r2
 8002438:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	69ba      	ldr	r2, [r7, #24]
 800243e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	685b      	ldr	r3, [r3, #4]
 8002444:	f003 0303 	and.w	r3, r3, #3
 8002448:	2b02      	cmp	r3, #2
 800244a:	d123      	bne.n	8002494 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	08da      	lsrs	r2, r3, #3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	3208      	adds	r2, #8
 8002454:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002458:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	f003 0307 	and.w	r3, r3, #7
 8002460:	009b      	lsls	r3, r3, #2
 8002462:	220f      	movs	r2, #15
 8002464:	fa02 f303 	lsl.w	r3, r2, r3
 8002468:	43db      	mvns	r3, r3
 800246a:	69ba      	ldr	r2, [r7, #24]
 800246c:	4013      	ands	r3, r2
 800246e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	691a      	ldr	r2, [r3, #16]
 8002474:	69fb      	ldr	r3, [r7, #28]
 8002476:	f003 0307 	and.w	r3, r3, #7
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	fa02 f303 	lsl.w	r3, r2, r3
 8002480:	69ba      	ldr	r2, [r7, #24]
 8002482:	4313      	orrs	r3, r2
 8002484:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002486:	69fb      	ldr	r3, [r7, #28]
 8002488:	08da      	lsrs	r2, r3, #3
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	3208      	adds	r2, #8
 800248e:	69b9      	ldr	r1, [r7, #24]
 8002490:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	005b      	lsls	r3, r3, #1
 800249e:	2203      	movs	r2, #3
 80024a0:	fa02 f303 	lsl.w	r3, r2, r3
 80024a4:	43db      	mvns	r3, r3
 80024a6:	69ba      	ldr	r2, [r7, #24]
 80024a8:	4013      	ands	r3, r2
 80024aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80024ac:	683b      	ldr	r3, [r7, #0]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	f003 0203 	and.w	r2, r3, #3
 80024b4:	69fb      	ldr	r3, [r7, #28]
 80024b6:	005b      	lsls	r3, r3, #1
 80024b8:	fa02 f303 	lsl.w	r3, r2, r3
 80024bc:	69ba      	ldr	r2, [r7, #24]
 80024be:	4313      	orrs	r3, r2
 80024c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	69ba      	ldr	r2, [r7, #24]
 80024c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	f000 80a2 	beq.w	800261a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024d6:	2300      	movs	r3, #0
 80024d8:	60fb      	str	r3, [r7, #12]
 80024da:	4b57      	ldr	r3, [pc, #348]	@ (8002638 <HAL_GPIO_Init+0x2e8>)
 80024dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024de:	4a56      	ldr	r2, [pc, #344]	@ (8002638 <HAL_GPIO_Init+0x2e8>)
 80024e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80024e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80024e6:	4b54      	ldr	r3, [pc, #336]	@ (8002638 <HAL_GPIO_Init+0x2e8>)
 80024e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80024ee:	60fb      	str	r3, [r7, #12]
 80024f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80024f2:	4a52      	ldr	r2, [pc, #328]	@ (800263c <HAL_GPIO_Init+0x2ec>)
 80024f4:	69fb      	ldr	r3, [r7, #28]
 80024f6:	089b      	lsrs	r3, r3, #2
 80024f8:	3302      	adds	r3, #2
 80024fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	f003 0303 	and.w	r3, r3, #3
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	220f      	movs	r2, #15
 800250a:	fa02 f303 	lsl.w	r3, r2, r3
 800250e:	43db      	mvns	r3, r3
 8002510:	69ba      	ldr	r2, [r7, #24]
 8002512:	4013      	ands	r3, r2
 8002514:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	4a49      	ldr	r2, [pc, #292]	@ (8002640 <HAL_GPIO_Init+0x2f0>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d019      	beq.n	8002552 <HAL_GPIO_Init+0x202>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	4a48      	ldr	r2, [pc, #288]	@ (8002644 <HAL_GPIO_Init+0x2f4>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d013      	beq.n	800254e <HAL_GPIO_Init+0x1fe>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	4a47      	ldr	r2, [pc, #284]	@ (8002648 <HAL_GPIO_Init+0x2f8>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d00d      	beq.n	800254a <HAL_GPIO_Init+0x1fa>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	4a46      	ldr	r2, [pc, #280]	@ (800264c <HAL_GPIO_Init+0x2fc>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d007      	beq.n	8002546 <HAL_GPIO_Init+0x1f6>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	4a45      	ldr	r2, [pc, #276]	@ (8002650 <HAL_GPIO_Init+0x300>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d101      	bne.n	8002542 <HAL_GPIO_Init+0x1f2>
 800253e:	2304      	movs	r3, #4
 8002540:	e008      	b.n	8002554 <HAL_GPIO_Init+0x204>
 8002542:	2307      	movs	r3, #7
 8002544:	e006      	b.n	8002554 <HAL_GPIO_Init+0x204>
 8002546:	2303      	movs	r3, #3
 8002548:	e004      	b.n	8002554 <HAL_GPIO_Init+0x204>
 800254a:	2302      	movs	r3, #2
 800254c:	e002      	b.n	8002554 <HAL_GPIO_Init+0x204>
 800254e:	2301      	movs	r3, #1
 8002550:	e000      	b.n	8002554 <HAL_GPIO_Init+0x204>
 8002552:	2300      	movs	r3, #0
 8002554:	69fa      	ldr	r2, [r7, #28]
 8002556:	f002 0203 	and.w	r2, r2, #3
 800255a:	0092      	lsls	r2, r2, #2
 800255c:	4093      	lsls	r3, r2
 800255e:	69ba      	ldr	r2, [r7, #24]
 8002560:	4313      	orrs	r3, r2
 8002562:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002564:	4935      	ldr	r1, [pc, #212]	@ (800263c <HAL_GPIO_Init+0x2ec>)
 8002566:	69fb      	ldr	r3, [r7, #28]
 8002568:	089b      	lsrs	r3, r3, #2
 800256a:	3302      	adds	r3, #2
 800256c:	69ba      	ldr	r2, [r7, #24]
 800256e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002572:	4b38      	ldr	r3, [pc, #224]	@ (8002654 <HAL_GPIO_Init+0x304>)
 8002574:	689b      	ldr	r3, [r3, #8]
 8002576:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	43db      	mvns	r3, r3
 800257c:	69ba      	ldr	r2, [r7, #24]
 800257e:	4013      	ands	r3, r2
 8002580:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800258a:	2b00      	cmp	r3, #0
 800258c:	d003      	beq.n	8002596 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800258e:	69ba      	ldr	r2, [r7, #24]
 8002590:	693b      	ldr	r3, [r7, #16]
 8002592:	4313      	orrs	r3, r2
 8002594:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002596:	4a2f      	ldr	r2, [pc, #188]	@ (8002654 <HAL_GPIO_Init+0x304>)
 8002598:	69bb      	ldr	r3, [r7, #24]
 800259a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800259c:	4b2d      	ldr	r3, [pc, #180]	@ (8002654 <HAL_GPIO_Init+0x304>)
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	43db      	mvns	r3, r3
 80025a6:	69ba      	ldr	r2, [r7, #24]
 80025a8:	4013      	ands	r3, r2
 80025aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d003      	beq.n	80025c0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80025b8:	69ba      	ldr	r2, [r7, #24]
 80025ba:	693b      	ldr	r3, [r7, #16]
 80025bc:	4313      	orrs	r3, r2
 80025be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80025c0:	4a24      	ldr	r2, [pc, #144]	@ (8002654 <HAL_GPIO_Init+0x304>)
 80025c2:	69bb      	ldr	r3, [r7, #24]
 80025c4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80025c6:	4b23      	ldr	r3, [pc, #140]	@ (8002654 <HAL_GPIO_Init+0x304>)
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	43db      	mvns	r3, r3
 80025d0:	69ba      	ldr	r2, [r7, #24]
 80025d2:	4013      	ands	r3, r2
 80025d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80025d6:	683b      	ldr	r3, [r7, #0]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d003      	beq.n	80025ea <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80025e2:	69ba      	ldr	r2, [r7, #24]
 80025e4:	693b      	ldr	r3, [r7, #16]
 80025e6:	4313      	orrs	r3, r2
 80025e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80025ea:	4a1a      	ldr	r2, [pc, #104]	@ (8002654 <HAL_GPIO_Init+0x304>)
 80025ec:	69bb      	ldr	r3, [r7, #24]
 80025ee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80025f0:	4b18      	ldr	r3, [pc, #96]	@ (8002654 <HAL_GPIO_Init+0x304>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	43db      	mvns	r3, r3
 80025fa:	69ba      	ldr	r2, [r7, #24]
 80025fc:	4013      	ands	r3, r2
 80025fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002608:	2b00      	cmp	r3, #0
 800260a:	d003      	beq.n	8002614 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800260c:	69ba      	ldr	r2, [r7, #24]
 800260e:	693b      	ldr	r3, [r7, #16]
 8002610:	4313      	orrs	r3, r2
 8002612:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002614:	4a0f      	ldr	r2, [pc, #60]	@ (8002654 <HAL_GPIO_Init+0x304>)
 8002616:	69bb      	ldr	r3, [r7, #24]
 8002618:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800261a:	69fb      	ldr	r3, [r7, #28]
 800261c:	3301      	adds	r3, #1
 800261e:	61fb      	str	r3, [r7, #28]
 8002620:	69fb      	ldr	r3, [r7, #28]
 8002622:	2b0f      	cmp	r3, #15
 8002624:	f67f aea2 	bls.w	800236c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002628:	bf00      	nop
 800262a:	bf00      	nop
 800262c:	3724      	adds	r7, #36	@ 0x24
 800262e:	46bd      	mov	sp, r7
 8002630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002634:	4770      	bx	lr
 8002636:	bf00      	nop
 8002638:	40023800 	.word	0x40023800
 800263c:	40013800 	.word	0x40013800
 8002640:	40020000 	.word	0x40020000
 8002644:	40020400 	.word	0x40020400
 8002648:	40020800 	.word	0x40020800
 800264c:	40020c00 	.word	0x40020c00
 8002650:	40021000 	.word	0x40021000
 8002654:	40013c00 	.word	0x40013c00

08002658 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
 8002660:	460b      	mov	r3, r1
 8002662:	807b      	strh	r3, [r7, #2]
 8002664:	4613      	mov	r3, r2
 8002666:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002668:	787b      	ldrb	r3, [r7, #1]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d003      	beq.n	8002676 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800266e:	887a      	ldrh	r2, [r7, #2]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002674:	e003      	b.n	800267e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002676:	887b      	ldrh	r3, [r7, #2]
 8002678:	041a      	lsls	r2, r3, #16
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	619a      	str	r2, [r3, #24]
}
 800267e:	bf00      	nop
 8002680:	370c      	adds	r7, #12
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr
	...

0800268c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b086      	sub	sp, #24
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d101      	bne.n	800269e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e267      	b.n	8002b6e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0301 	and.w	r3, r3, #1
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d075      	beq.n	8002796 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80026aa:	4b88      	ldr	r3, [pc, #544]	@ (80028cc <HAL_RCC_OscConfig+0x240>)
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	f003 030c 	and.w	r3, r3, #12
 80026b2:	2b04      	cmp	r3, #4
 80026b4:	d00c      	beq.n	80026d0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026b6:	4b85      	ldr	r3, [pc, #532]	@ (80028cc <HAL_RCC_OscConfig+0x240>)
 80026b8:	689b      	ldr	r3, [r3, #8]
 80026ba:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80026be:	2b08      	cmp	r3, #8
 80026c0:	d112      	bne.n	80026e8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80026c2:	4b82      	ldr	r3, [pc, #520]	@ (80028cc <HAL_RCC_OscConfig+0x240>)
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026ca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80026ce:	d10b      	bne.n	80026e8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026d0:	4b7e      	ldr	r3, [pc, #504]	@ (80028cc <HAL_RCC_OscConfig+0x240>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d05b      	beq.n	8002794 <HAL_RCC_OscConfig+0x108>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d157      	bne.n	8002794 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e242      	b.n	8002b6e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80026f0:	d106      	bne.n	8002700 <HAL_RCC_OscConfig+0x74>
 80026f2:	4b76      	ldr	r3, [pc, #472]	@ (80028cc <HAL_RCC_OscConfig+0x240>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4a75      	ldr	r2, [pc, #468]	@ (80028cc <HAL_RCC_OscConfig+0x240>)
 80026f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80026fc:	6013      	str	r3, [r2, #0]
 80026fe:	e01d      	b.n	800273c <HAL_RCC_OscConfig+0xb0>
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002708:	d10c      	bne.n	8002724 <HAL_RCC_OscConfig+0x98>
 800270a:	4b70      	ldr	r3, [pc, #448]	@ (80028cc <HAL_RCC_OscConfig+0x240>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a6f      	ldr	r2, [pc, #444]	@ (80028cc <HAL_RCC_OscConfig+0x240>)
 8002710:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002714:	6013      	str	r3, [r2, #0]
 8002716:	4b6d      	ldr	r3, [pc, #436]	@ (80028cc <HAL_RCC_OscConfig+0x240>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a6c      	ldr	r2, [pc, #432]	@ (80028cc <HAL_RCC_OscConfig+0x240>)
 800271c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002720:	6013      	str	r3, [r2, #0]
 8002722:	e00b      	b.n	800273c <HAL_RCC_OscConfig+0xb0>
 8002724:	4b69      	ldr	r3, [pc, #420]	@ (80028cc <HAL_RCC_OscConfig+0x240>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a68      	ldr	r2, [pc, #416]	@ (80028cc <HAL_RCC_OscConfig+0x240>)
 800272a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800272e:	6013      	str	r3, [r2, #0]
 8002730:	4b66      	ldr	r3, [pc, #408]	@ (80028cc <HAL_RCC_OscConfig+0x240>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a65      	ldr	r2, [pc, #404]	@ (80028cc <HAL_RCC_OscConfig+0x240>)
 8002736:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800273a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d013      	beq.n	800276c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002744:	f7ff f902 	bl	800194c <HAL_GetTick>
 8002748:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800274a:	e008      	b.n	800275e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800274c:	f7ff f8fe 	bl	800194c <HAL_GetTick>
 8002750:	4602      	mov	r2, r0
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	1ad3      	subs	r3, r2, r3
 8002756:	2b64      	cmp	r3, #100	@ 0x64
 8002758:	d901      	bls.n	800275e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800275a:	2303      	movs	r3, #3
 800275c:	e207      	b.n	8002b6e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800275e:	4b5b      	ldr	r3, [pc, #364]	@ (80028cc <HAL_RCC_OscConfig+0x240>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002766:	2b00      	cmp	r3, #0
 8002768:	d0f0      	beq.n	800274c <HAL_RCC_OscConfig+0xc0>
 800276a:	e014      	b.n	8002796 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800276c:	f7ff f8ee 	bl	800194c <HAL_GetTick>
 8002770:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002772:	e008      	b.n	8002786 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002774:	f7ff f8ea 	bl	800194c <HAL_GetTick>
 8002778:	4602      	mov	r2, r0
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	2b64      	cmp	r3, #100	@ 0x64
 8002780:	d901      	bls.n	8002786 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002782:	2303      	movs	r3, #3
 8002784:	e1f3      	b.n	8002b6e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002786:	4b51      	ldr	r3, [pc, #324]	@ (80028cc <HAL_RCC_OscConfig+0x240>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d1f0      	bne.n	8002774 <HAL_RCC_OscConfig+0xe8>
 8002792:	e000      	b.n	8002796 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002794:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 0302 	and.w	r3, r3, #2
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d063      	beq.n	800286a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80027a2:	4b4a      	ldr	r3, [pc, #296]	@ (80028cc <HAL_RCC_OscConfig+0x240>)
 80027a4:	689b      	ldr	r3, [r3, #8]
 80027a6:	f003 030c 	and.w	r3, r3, #12
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d00b      	beq.n	80027c6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027ae:	4b47      	ldr	r3, [pc, #284]	@ (80028cc <HAL_RCC_OscConfig+0x240>)
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80027b6:	2b08      	cmp	r3, #8
 80027b8:	d11c      	bne.n	80027f4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80027ba:	4b44      	ldr	r3, [pc, #272]	@ (80028cc <HAL_RCC_OscConfig+0x240>)
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d116      	bne.n	80027f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027c6:	4b41      	ldr	r3, [pc, #260]	@ (80028cc <HAL_RCC_OscConfig+0x240>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 0302 	and.w	r3, r3, #2
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d005      	beq.n	80027de <HAL_RCC_OscConfig+0x152>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	68db      	ldr	r3, [r3, #12]
 80027d6:	2b01      	cmp	r3, #1
 80027d8:	d001      	beq.n	80027de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e1c7      	b.n	8002b6e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027de:	4b3b      	ldr	r3, [pc, #236]	@ (80028cc <HAL_RCC_OscConfig+0x240>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	691b      	ldr	r3, [r3, #16]
 80027ea:	00db      	lsls	r3, r3, #3
 80027ec:	4937      	ldr	r1, [pc, #220]	@ (80028cc <HAL_RCC_OscConfig+0x240>)
 80027ee:	4313      	orrs	r3, r2
 80027f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027f2:	e03a      	b.n	800286a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d020      	beq.n	800283e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027fc:	4b34      	ldr	r3, [pc, #208]	@ (80028d0 <HAL_RCC_OscConfig+0x244>)
 80027fe:	2201      	movs	r2, #1
 8002800:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002802:	f7ff f8a3 	bl	800194c <HAL_GetTick>
 8002806:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002808:	e008      	b.n	800281c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800280a:	f7ff f89f 	bl	800194c <HAL_GetTick>
 800280e:	4602      	mov	r2, r0
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	1ad3      	subs	r3, r2, r3
 8002814:	2b02      	cmp	r3, #2
 8002816:	d901      	bls.n	800281c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002818:	2303      	movs	r3, #3
 800281a:	e1a8      	b.n	8002b6e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800281c:	4b2b      	ldr	r3, [pc, #172]	@ (80028cc <HAL_RCC_OscConfig+0x240>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f003 0302 	and.w	r3, r3, #2
 8002824:	2b00      	cmp	r3, #0
 8002826:	d0f0      	beq.n	800280a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002828:	4b28      	ldr	r3, [pc, #160]	@ (80028cc <HAL_RCC_OscConfig+0x240>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	691b      	ldr	r3, [r3, #16]
 8002834:	00db      	lsls	r3, r3, #3
 8002836:	4925      	ldr	r1, [pc, #148]	@ (80028cc <HAL_RCC_OscConfig+0x240>)
 8002838:	4313      	orrs	r3, r2
 800283a:	600b      	str	r3, [r1, #0]
 800283c:	e015      	b.n	800286a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800283e:	4b24      	ldr	r3, [pc, #144]	@ (80028d0 <HAL_RCC_OscConfig+0x244>)
 8002840:	2200      	movs	r2, #0
 8002842:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002844:	f7ff f882 	bl	800194c <HAL_GetTick>
 8002848:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800284a:	e008      	b.n	800285e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800284c:	f7ff f87e 	bl	800194c <HAL_GetTick>
 8002850:	4602      	mov	r2, r0
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	2b02      	cmp	r3, #2
 8002858:	d901      	bls.n	800285e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800285a:	2303      	movs	r3, #3
 800285c:	e187      	b.n	8002b6e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800285e:	4b1b      	ldr	r3, [pc, #108]	@ (80028cc <HAL_RCC_OscConfig+0x240>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 0302 	and.w	r3, r3, #2
 8002866:	2b00      	cmp	r3, #0
 8002868:	d1f0      	bne.n	800284c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 0308 	and.w	r3, r3, #8
 8002872:	2b00      	cmp	r3, #0
 8002874:	d036      	beq.n	80028e4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	695b      	ldr	r3, [r3, #20]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d016      	beq.n	80028ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800287e:	4b15      	ldr	r3, [pc, #84]	@ (80028d4 <HAL_RCC_OscConfig+0x248>)
 8002880:	2201      	movs	r2, #1
 8002882:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002884:	f7ff f862 	bl	800194c <HAL_GetTick>
 8002888:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800288a:	e008      	b.n	800289e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800288c:	f7ff f85e 	bl	800194c <HAL_GetTick>
 8002890:	4602      	mov	r2, r0
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	2b02      	cmp	r3, #2
 8002898:	d901      	bls.n	800289e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800289a:	2303      	movs	r3, #3
 800289c:	e167      	b.n	8002b6e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800289e:	4b0b      	ldr	r3, [pc, #44]	@ (80028cc <HAL_RCC_OscConfig+0x240>)
 80028a0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028a2:	f003 0302 	and.w	r3, r3, #2
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d0f0      	beq.n	800288c <HAL_RCC_OscConfig+0x200>
 80028aa:	e01b      	b.n	80028e4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028ac:	4b09      	ldr	r3, [pc, #36]	@ (80028d4 <HAL_RCC_OscConfig+0x248>)
 80028ae:	2200      	movs	r2, #0
 80028b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028b2:	f7ff f84b 	bl	800194c <HAL_GetTick>
 80028b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028b8:	e00e      	b.n	80028d8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028ba:	f7ff f847 	bl	800194c <HAL_GetTick>
 80028be:	4602      	mov	r2, r0
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	1ad3      	subs	r3, r2, r3
 80028c4:	2b02      	cmp	r3, #2
 80028c6:	d907      	bls.n	80028d8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80028c8:	2303      	movs	r3, #3
 80028ca:	e150      	b.n	8002b6e <HAL_RCC_OscConfig+0x4e2>
 80028cc:	40023800 	.word	0x40023800
 80028d0:	42470000 	.word	0x42470000
 80028d4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80028d8:	4b88      	ldr	r3, [pc, #544]	@ (8002afc <HAL_RCC_OscConfig+0x470>)
 80028da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80028dc:	f003 0302 	and.w	r3, r3, #2
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d1ea      	bne.n	80028ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 0304 	and.w	r3, r3, #4
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	f000 8097 	beq.w	8002a20 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028f2:	2300      	movs	r3, #0
 80028f4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028f6:	4b81      	ldr	r3, [pc, #516]	@ (8002afc <HAL_RCC_OscConfig+0x470>)
 80028f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d10f      	bne.n	8002922 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002902:	2300      	movs	r3, #0
 8002904:	60bb      	str	r3, [r7, #8]
 8002906:	4b7d      	ldr	r3, [pc, #500]	@ (8002afc <HAL_RCC_OscConfig+0x470>)
 8002908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800290a:	4a7c      	ldr	r2, [pc, #496]	@ (8002afc <HAL_RCC_OscConfig+0x470>)
 800290c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002910:	6413      	str	r3, [r2, #64]	@ 0x40
 8002912:	4b7a      	ldr	r3, [pc, #488]	@ (8002afc <HAL_RCC_OscConfig+0x470>)
 8002914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002916:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800291a:	60bb      	str	r3, [r7, #8]
 800291c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800291e:	2301      	movs	r3, #1
 8002920:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002922:	4b77      	ldr	r3, [pc, #476]	@ (8002b00 <HAL_RCC_OscConfig+0x474>)
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800292a:	2b00      	cmp	r3, #0
 800292c:	d118      	bne.n	8002960 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800292e:	4b74      	ldr	r3, [pc, #464]	@ (8002b00 <HAL_RCC_OscConfig+0x474>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a73      	ldr	r2, [pc, #460]	@ (8002b00 <HAL_RCC_OscConfig+0x474>)
 8002934:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002938:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800293a:	f7ff f807 	bl	800194c <HAL_GetTick>
 800293e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002940:	e008      	b.n	8002954 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002942:	f7ff f803 	bl	800194c <HAL_GetTick>
 8002946:	4602      	mov	r2, r0
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	1ad3      	subs	r3, r2, r3
 800294c:	2b02      	cmp	r3, #2
 800294e:	d901      	bls.n	8002954 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002950:	2303      	movs	r3, #3
 8002952:	e10c      	b.n	8002b6e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002954:	4b6a      	ldr	r3, [pc, #424]	@ (8002b00 <HAL_RCC_OscConfig+0x474>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800295c:	2b00      	cmp	r3, #0
 800295e:	d0f0      	beq.n	8002942 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	2b01      	cmp	r3, #1
 8002966:	d106      	bne.n	8002976 <HAL_RCC_OscConfig+0x2ea>
 8002968:	4b64      	ldr	r3, [pc, #400]	@ (8002afc <HAL_RCC_OscConfig+0x470>)
 800296a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800296c:	4a63      	ldr	r2, [pc, #396]	@ (8002afc <HAL_RCC_OscConfig+0x470>)
 800296e:	f043 0301 	orr.w	r3, r3, #1
 8002972:	6713      	str	r3, [r2, #112]	@ 0x70
 8002974:	e01c      	b.n	80029b0 <HAL_RCC_OscConfig+0x324>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	2b05      	cmp	r3, #5
 800297c:	d10c      	bne.n	8002998 <HAL_RCC_OscConfig+0x30c>
 800297e:	4b5f      	ldr	r3, [pc, #380]	@ (8002afc <HAL_RCC_OscConfig+0x470>)
 8002980:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002982:	4a5e      	ldr	r2, [pc, #376]	@ (8002afc <HAL_RCC_OscConfig+0x470>)
 8002984:	f043 0304 	orr.w	r3, r3, #4
 8002988:	6713      	str	r3, [r2, #112]	@ 0x70
 800298a:	4b5c      	ldr	r3, [pc, #368]	@ (8002afc <HAL_RCC_OscConfig+0x470>)
 800298c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800298e:	4a5b      	ldr	r2, [pc, #364]	@ (8002afc <HAL_RCC_OscConfig+0x470>)
 8002990:	f043 0301 	orr.w	r3, r3, #1
 8002994:	6713      	str	r3, [r2, #112]	@ 0x70
 8002996:	e00b      	b.n	80029b0 <HAL_RCC_OscConfig+0x324>
 8002998:	4b58      	ldr	r3, [pc, #352]	@ (8002afc <HAL_RCC_OscConfig+0x470>)
 800299a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800299c:	4a57      	ldr	r2, [pc, #348]	@ (8002afc <HAL_RCC_OscConfig+0x470>)
 800299e:	f023 0301 	bic.w	r3, r3, #1
 80029a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80029a4:	4b55      	ldr	r3, [pc, #340]	@ (8002afc <HAL_RCC_OscConfig+0x470>)
 80029a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029a8:	4a54      	ldr	r2, [pc, #336]	@ (8002afc <HAL_RCC_OscConfig+0x470>)
 80029aa:	f023 0304 	bic.w	r3, r3, #4
 80029ae:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	689b      	ldr	r3, [r3, #8]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d015      	beq.n	80029e4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029b8:	f7fe ffc8 	bl	800194c <HAL_GetTick>
 80029bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029be:	e00a      	b.n	80029d6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029c0:	f7fe ffc4 	bl	800194c <HAL_GetTick>
 80029c4:	4602      	mov	r2, r0
 80029c6:	693b      	ldr	r3, [r7, #16]
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d901      	bls.n	80029d6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80029d2:	2303      	movs	r3, #3
 80029d4:	e0cb      	b.n	8002b6e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80029d6:	4b49      	ldr	r3, [pc, #292]	@ (8002afc <HAL_RCC_OscConfig+0x470>)
 80029d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80029da:	f003 0302 	and.w	r3, r3, #2
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d0ee      	beq.n	80029c0 <HAL_RCC_OscConfig+0x334>
 80029e2:	e014      	b.n	8002a0e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029e4:	f7fe ffb2 	bl	800194c <HAL_GetTick>
 80029e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029ea:	e00a      	b.n	8002a02 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029ec:	f7fe ffae 	bl	800194c <HAL_GetTick>
 80029f0:	4602      	mov	r2, r0
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	1ad3      	subs	r3, r2, r3
 80029f6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d901      	bls.n	8002a02 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80029fe:	2303      	movs	r3, #3
 8002a00:	e0b5      	b.n	8002b6e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a02:	4b3e      	ldr	r3, [pc, #248]	@ (8002afc <HAL_RCC_OscConfig+0x470>)
 8002a04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a06:	f003 0302 	and.w	r3, r3, #2
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d1ee      	bne.n	80029ec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002a0e:	7dfb      	ldrb	r3, [r7, #23]
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d105      	bne.n	8002a20 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a14:	4b39      	ldr	r3, [pc, #228]	@ (8002afc <HAL_RCC_OscConfig+0x470>)
 8002a16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a18:	4a38      	ldr	r2, [pc, #224]	@ (8002afc <HAL_RCC_OscConfig+0x470>)
 8002a1a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a1e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	699b      	ldr	r3, [r3, #24]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	f000 80a1 	beq.w	8002b6c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002a2a:	4b34      	ldr	r3, [pc, #208]	@ (8002afc <HAL_RCC_OscConfig+0x470>)
 8002a2c:	689b      	ldr	r3, [r3, #8]
 8002a2e:	f003 030c 	and.w	r3, r3, #12
 8002a32:	2b08      	cmp	r3, #8
 8002a34:	d05c      	beq.n	8002af0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	699b      	ldr	r3, [r3, #24]
 8002a3a:	2b02      	cmp	r3, #2
 8002a3c:	d141      	bne.n	8002ac2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a3e:	4b31      	ldr	r3, [pc, #196]	@ (8002b04 <HAL_RCC_OscConfig+0x478>)
 8002a40:	2200      	movs	r2, #0
 8002a42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a44:	f7fe ff82 	bl	800194c <HAL_GetTick>
 8002a48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a4a:	e008      	b.n	8002a5e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a4c:	f7fe ff7e 	bl	800194c <HAL_GetTick>
 8002a50:	4602      	mov	r2, r0
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d901      	bls.n	8002a5e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e087      	b.n	8002b6e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a5e:	4b27      	ldr	r3, [pc, #156]	@ (8002afc <HAL_RCC_OscConfig+0x470>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d1f0      	bne.n	8002a4c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	69da      	ldr	r2, [r3, #28]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6a1b      	ldr	r3, [r3, #32]
 8002a72:	431a      	orrs	r2, r3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a78:	019b      	lsls	r3, r3, #6
 8002a7a:	431a      	orrs	r2, r3
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a80:	085b      	lsrs	r3, r3, #1
 8002a82:	3b01      	subs	r3, #1
 8002a84:	041b      	lsls	r3, r3, #16
 8002a86:	431a      	orrs	r2, r3
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a8c:	061b      	lsls	r3, r3, #24
 8002a8e:	491b      	ldr	r1, [pc, #108]	@ (8002afc <HAL_RCC_OscConfig+0x470>)
 8002a90:	4313      	orrs	r3, r2
 8002a92:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a94:	4b1b      	ldr	r3, [pc, #108]	@ (8002b04 <HAL_RCC_OscConfig+0x478>)
 8002a96:	2201      	movs	r2, #1
 8002a98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a9a:	f7fe ff57 	bl	800194c <HAL_GetTick>
 8002a9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002aa0:	e008      	b.n	8002ab4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002aa2:	f7fe ff53 	bl	800194c <HAL_GetTick>
 8002aa6:	4602      	mov	r2, r0
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	1ad3      	subs	r3, r2, r3
 8002aac:	2b02      	cmp	r3, #2
 8002aae:	d901      	bls.n	8002ab4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002ab0:	2303      	movs	r3, #3
 8002ab2:	e05c      	b.n	8002b6e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ab4:	4b11      	ldr	r3, [pc, #68]	@ (8002afc <HAL_RCC_OscConfig+0x470>)
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d0f0      	beq.n	8002aa2 <HAL_RCC_OscConfig+0x416>
 8002ac0:	e054      	b.n	8002b6c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ac2:	4b10      	ldr	r3, [pc, #64]	@ (8002b04 <HAL_RCC_OscConfig+0x478>)
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ac8:	f7fe ff40 	bl	800194c <HAL_GetTick>
 8002acc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ace:	e008      	b.n	8002ae2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ad0:	f7fe ff3c 	bl	800194c <HAL_GetTick>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	2b02      	cmp	r3, #2
 8002adc:	d901      	bls.n	8002ae2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002ade:	2303      	movs	r3, #3
 8002ae0:	e045      	b.n	8002b6e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ae2:	4b06      	ldr	r3, [pc, #24]	@ (8002afc <HAL_RCC_OscConfig+0x470>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d1f0      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x444>
 8002aee:	e03d      	b.n	8002b6c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	699b      	ldr	r3, [r3, #24]
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	d107      	bne.n	8002b08 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e038      	b.n	8002b6e <HAL_RCC_OscConfig+0x4e2>
 8002afc:	40023800 	.word	0x40023800
 8002b00:	40007000 	.word	0x40007000
 8002b04:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002b08:	4b1b      	ldr	r3, [pc, #108]	@ (8002b78 <HAL_RCC_OscConfig+0x4ec>)
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	699b      	ldr	r3, [r3, #24]
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d028      	beq.n	8002b68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d121      	bne.n	8002b68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b2e:	429a      	cmp	r2, r3
 8002b30:	d11a      	bne.n	8002b68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b32:	68fa      	ldr	r2, [r7, #12]
 8002b34:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002b38:	4013      	ands	r3, r2
 8002b3a:	687a      	ldr	r2, [r7, #4]
 8002b3c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002b3e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d111      	bne.n	8002b68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b4e:	085b      	lsrs	r3, r3, #1
 8002b50:	3b01      	subs	r3, #1
 8002b52:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d107      	bne.n	8002b68 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b62:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d001      	beq.n	8002b6c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002b68:	2301      	movs	r3, #1
 8002b6a:	e000      	b.n	8002b6e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002b6c:	2300      	movs	r3, #0
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3718      	adds	r7, #24
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	40023800 	.word	0x40023800

08002b7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b084      	sub	sp, #16
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
 8002b84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d101      	bne.n	8002b90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e0cc      	b.n	8002d2a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b90:	4b68      	ldr	r3, [pc, #416]	@ (8002d34 <HAL_RCC_ClockConfig+0x1b8>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	f003 0307 	and.w	r3, r3, #7
 8002b98:	683a      	ldr	r2, [r7, #0]
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	d90c      	bls.n	8002bb8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b9e:	4b65      	ldr	r3, [pc, #404]	@ (8002d34 <HAL_RCC_ClockConfig+0x1b8>)
 8002ba0:	683a      	ldr	r2, [r7, #0]
 8002ba2:	b2d2      	uxtb	r2, r2
 8002ba4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ba6:	4b63      	ldr	r3, [pc, #396]	@ (8002d34 <HAL_RCC_ClockConfig+0x1b8>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 0307 	and.w	r3, r3, #7
 8002bae:	683a      	ldr	r2, [r7, #0]
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d001      	beq.n	8002bb8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	e0b8      	b.n	8002d2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f003 0302 	and.w	r3, r3, #2
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d020      	beq.n	8002c06 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 0304 	and.w	r3, r3, #4
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d005      	beq.n	8002bdc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002bd0:	4b59      	ldr	r3, [pc, #356]	@ (8002d38 <HAL_RCC_ClockConfig+0x1bc>)
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	4a58      	ldr	r2, [pc, #352]	@ (8002d38 <HAL_RCC_ClockConfig+0x1bc>)
 8002bd6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002bda:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 0308 	and.w	r3, r3, #8
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d005      	beq.n	8002bf4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002be8:	4b53      	ldr	r3, [pc, #332]	@ (8002d38 <HAL_RCC_ClockConfig+0x1bc>)
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	4a52      	ldr	r2, [pc, #328]	@ (8002d38 <HAL_RCC_ClockConfig+0x1bc>)
 8002bee:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002bf2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bf4:	4b50      	ldr	r3, [pc, #320]	@ (8002d38 <HAL_RCC_ClockConfig+0x1bc>)
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	494d      	ldr	r1, [pc, #308]	@ (8002d38 <HAL_RCC_ClockConfig+0x1bc>)
 8002c02:	4313      	orrs	r3, r2
 8002c04:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f003 0301 	and.w	r3, r3, #1
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d044      	beq.n	8002c9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	d107      	bne.n	8002c2a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c1a:	4b47      	ldr	r3, [pc, #284]	@ (8002d38 <HAL_RCC_ClockConfig+0x1bc>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d119      	bne.n	8002c5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e07f      	b.n	8002d2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	2b02      	cmp	r3, #2
 8002c30:	d003      	beq.n	8002c3a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002c36:	2b03      	cmp	r3, #3
 8002c38:	d107      	bne.n	8002c4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c3a:	4b3f      	ldr	r3, [pc, #252]	@ (8002d38 <HAL_RCC_ClockConfig+0x1bc>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d109      	bne.n	8002c5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e06f      	b.n	8002d2a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c4a:	4b3b      	ldr	r3, [pc, #236]	@ (8002d38 <HAL_RCC_ClockConfig+0x1bc>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	f003 0302 	and.w	r3, r3, #2
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d101      	bne.n	8002c5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e067      	b.n	8002d2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c5a:	4b37      	ldr	r3, [pc, #220]	@ (8002d38 <HAL_RCC_ClockConfig+0x1bc>)
 8002c5c:	689b      	ldr	r3, [r3, #8]
 8002c5e:	f023 0203 	bic.w	r2, r3, #3
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	4934      	ldr	r1, [pc, #208]	@ (8002d38 <HAL_RCC_ClockConfig+0x1bc>)
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c6c:	f7fe fe6e 	bl	800194c <HAL_GetTick>
 8002c70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c72:	e00a      	b.n	8002c8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c74:	f7fe fe6a 	bl	800194c <HAL_GetTick>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	1ad3      	subs	r3, r2, r3
 8002c7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d901      	bls.n	8002c8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c86:	2303      	movs	r3, #3
 8002c88:	e04f      	b.n	8002d2a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c8a:	4b2b      	ldr	r3, [pc, #172]	@ (8002d38 <HAL_RCC_ClockConfig+0x1bc>)
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	f003 020c 	and.w	r2, r3, #12
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	009b      	lsls	r3, r3, #2
 8002c98:	429a      	cmp	r2, r3
 8002c9a:	d1eb      	bne.n	8002c74 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c9c:	4b25      	ldr	r3, [pc, #148]	@ (8002d34 <HAL_RCC_ClockConfig+0x1b8>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 0307 	and.w	r3, r3, #7
 8002ca4:	683a      	ldr	r2, [r7, #0]
 8002ca6:	429a      	cmp	r2, r3
 8002ca8:	d20c      	bcs.n	8002cc4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002caa:	4b22      	ldr	r3, [pc, #136]	@ (8002d34 <HAL_RCC_ClockConfig+0x1b8>)
 8002cac:	683a      	ldr	r2, [r7, #0]
 8002cae:	b2d2      	uxtb	r2, r2
 8002cb0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cb2:	4b20      	ldr	r3, [pc, #128]	@ (8002d34 <HAL_RCC_ClockConfig+0x1b8>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0307 	and.w	r3, r3, #7
 8002cba:	683a      	ldr	r2, [r7, #0]
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d001      	beq.n	8002cc4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e032      	b.n	8002d2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f003 0304 	and.w	r3, r3, #4
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d008      	beq.n	8002ce2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cd0:	4b19      	ldr	r3, [pc, #100]	@ (8002d38 <HAL_RCC_ClockConfig+0x1bc>)
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	4916      	ldr	r1, [pc, #88]	@ (8002d38 <HAL_RCC_ClockConfig+0x1bc>)
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f003 0308 	and.w	r3, r3, #8
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d009      	beq.n	8002d02 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002cee:	4b12      	ldr	r3, [pc, #72]	@ (8002d38 <HAL_RCC_ClockConfig+0x1bc>)
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	691b      	ldr	r3, [r3, #16]
 8002cfa:	00db      	lsls	r3, r3, #3
 8002cfc:	490e      	ldr	r1, [pc, #56]	@ (8002d38 <HAL_RCC_ClockConfig+0x1bc>)
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002d02:	f000 f821 	bl	8002d48 <HAL_RCC_GetSysClockFreq>
 8002d06:	4602      	mov	r2, r0
 8002d08:	4b0b      	ldr	r3, [pc, #44]	@ (8002d38 <HAL_RCC_ClockConfig+0x1bc>)
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	091b      	lsrs	r3, r3, #4
 8002d0e:	f003 030f 	and.w	r3, r3, #15
 8002d12:	490a      	ldr	r1, [pc, #40]	@ (8002d3c <HAL_RCC_ClockConfig+0x1c0>)
 8002d14:	5ccb      	ldrb	r3, [r1, r3]
 8002d16:	fa22 f303 	lsr.w	r3, r2, r3
 8002d1a:	4a09      	ldr	r2, [pc, #36]	@ (8002d40 <HAL_RCC_ClockConfig+0x1c4>)
 8002d1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002d1e:	4b09      	ldr	r3, [pc, #36]	@ (8002d44 <HAL_RCC_ClockConfig+0x1c8>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4618      	mov	r0, r3
 8002d24:	f7fe fdce 	bl	80018c4 <HAL_InitTick>

  return HAL_OK;
 8002d28:	2300      	movs	r3, #0
}
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	3710      	adds	r7, #16
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	bf00      	nop
 8002d34:	40023c00 	.word	0x40023c00
 8002d38:	40023800 	.word	0x40023800
 8002d3c:	0800417c 	.word	0x0800417c
 8002d40:	20000000 	.word	0x20000000
 8002d44:	20000004 	.word	0x20000004

08002d48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d48:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d4c:	b094      	sub	sp, #80	@ 0x50
 8002d4e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002d50:	2300      	movs	r3, #0
 8002d52:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002d54:	2300      	movs	r3, #0
 8002d56:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002d58:	2300      	movs	r3, #0
 8002d5a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d60:	4b79      	ldr	r3, [pc, #484]	@ (8002f48 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	f003 030c 	and.w	r3, r3, #12
 8002d68:	2b08      	cmp	r3, #8
 8002d6a:	d00d      	beq.n	8002d88 <HAL_RCC_GetSysClockFreq+0x40>
 8002d6c:	2b08      	cmp	r3, #8
 8002d6e:	f200 80e1 	bhi.w	8002f34 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d002      	beq.n	8002d7c <HAL_RCC_GetSysClockFreq+0x34>
 8002d76:	2b04      	cmp	r3, #4
 8002d78:	d003      	beq.n	8002d82 <HAL_RCC_GetSysClockFreq+0x3a>
 8002d7a:	e0db      	b.n	8002f34 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d7c:	4b73      	ldr	r3, [pc, #460]	@ (8002f4c <HAL_RCC_GetSysClockFreq+0x204>)
 8002d7e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002d80:	e0db      	b.n	8002f3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d82:	4b73      	ldr	r3, [pc, #460]	@ (8002f50 <HAL_RCC_GetSysClockFreq+0x208>)
 8002d84:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002d86:	e0d8      	b.n	8002f3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d88:	4b6f      	ldr	r3, [pc, #444]	@ (8002f48 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d8a:	685b      	ldr	r3, [r3, #4]
 8002d8c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002d90:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d92:	4b6d      	ldr	r3, [pc, #436]	@ (8002f48 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d063      	beq.n	8002e66 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d9e:	4b6a      	ldr	r3, [pc, #424]	@ (8002f48 <HAL_RCC_GetSysClockFreq+0x200>)
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	099b      	lsrs	r3, r3, #6
 8002da4:	2200      	movs	r2, #0
 8002da6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002da8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002daa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002dac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002db0:	633b      	str	r3, [r7, #48]	@ 0x30
 8002db2:	2300      	movs	r3, #0
 8002db4:	637b      	str	r3, [r7, #52]	@ 0x34
 8002db6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002dba:	4622      	mov	r2, r4
 8002dbc:	462b      	mov	r3, r5
 8002dbe:	f04f 0000 	mov.w	r0, #0
 8002dc2:	f04f 0100 	mov.w	r1, #0
 8002dc6:	0159      	lsls	r1, r3, #5
 8002dc8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002dcc:	0150      	lsls	r0, r2, #5
 8002dce:	4602      	mov	r2, r0
 8002dd0:	460b      	mov	r3, r1
 8002dd2:	4621      	mov	r1, r4
 8002dd4:	1a51      	subs	r1, r2, r1
 8002dd6:	6139      	str	r1, [r7, #16]
 8002dd8:	4629      	mov	r1, r5
 8002dda:	eb63 0301 	sbc.w	r3, r3, r1
 8002dde:	617b      	str	r3, [r7, #20]
 8002de0:	f04f 0200 	mov.w	r2, #0
 8002de4:	f04f 0300 	mov.w	r3, #0
 8002de8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002dec:	4659      	mov	r1, fp
 8002dee:	018b      	lsls	r3, r1, #6
 8002df0:	4651      	mov	r1, sl
 8002df2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002df6:	4651      	mov	r1, sl
 8002df8:	018a      	lsls	r2, r1, #6
 8002dfa:	4651      	mov	r1, sl
 8002dfc:	ebb2 0801 	subs.w	r8, r2, r1
 8002e00:	4659      	mov	r1, fp
 8002e02:	eb63 0901 	sbc.w	r9, r3, r1
 8002e06:	f04f 0200 	mov.w	r2, #0
 8002e0a:	f04f 0300 	mov.w	r3, #0
 8002e0e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002e12:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002e16:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002e1a:	4690      	mov	r8, r2
 8002e1c:	4699      	mov	r9, r3
 8002e1e:	4623      	mov	r3, r4
 8002e20:	eb18 0303 	adds.w	r3, r8, r3
 8002e24:	60bb      	str	r3, [r7, #8]
 8002e26:	462b      	mov	r3, r5
 8002e28:	eb49 0303 	adc.w	r3, r9, r3
 8002e2c:	60fb      	str	r3, [r7, #12]
 8002e2e:	f04f 0200 	mov.w	r2, #0
 8002e32:	f04f 0300 	mov.w	r3, #0
 8002e36:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002e3a:	4629      	mov	r1, r5
 8002e3c:	024b      	lsls	r3, r1, #9
 8002e3e:	4621      	mov	r1, r4
 8002e40:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002e44:	4621      	mov	r1, r4
 8002e46:	024a      	lsls	r2, r1, #9
 8002e48:	4610      	mov	r0, r2
 8002e4a:	4619      	mov	r1, r3
 8002e4c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002e4e:	2200      	movs	r2, #0
 8002e50:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002e52:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002e54:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002e58:	f7fd fe08 	bl	8000a6c <__aeabi_uldivmod>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	460b      	mov	r3, r1
 8002e60:	4613      	mov	r3, r2
 8002e62:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002e64:	e058      	b.n	8002f18 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e66:	4b38      	ldr	r3, [pc, #224]	@ (8002f48 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	099b      	lsrs	r3, r3, #6
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	4618      	mov	r0, r3
 8002e70:	4611      	mov	r1, r2
 8002e72:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002e76:	623b      	str	r3, [r7, #32]
 8002e78:	2300      	movs	r3, #0
 8002e7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e7c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002e80:	4642      	mov	r2, r8
 8002e82:	464b      	mov	r3, r9
 8002e84:	f04f 0000 	mov.w	r0, #0
 8002e88:	f04f 0100 	mov.w	r1, #0
 8002e8c:	0159      	lsls	r1, r3, #5
 8002e8e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e92:	0150      	lsls	r0, r2, #5
 8002e94:	4602      	mov	r2, r0
 8002e96:	460b      	mov	r3, r1
 8002e98:	4641      	mov	r1, r8
 8002e9a:	ebb2 0a01 	subs.w	sl, r2, r1
 8002e9e:	4649      	mov	r1, r9
 8002ea0:	eb63 0b01 	sbc.w	fp, r3, r1
 8002ea4:	f04f 0200 	mov.w	r2, #0
 8002ea8:	f04f 0300 	mov.w	r3, #0
 8002eac:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002eb0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002eb4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002eb8:	ebb2 040a 	subs.w	r4, r2, sl
 8002ebc:	eb63 050b 	sbc.w	r5, r3, fp
 8002ec0:	f04f 0200 	mov.w	r2, #0
 8002ec4:	f04f 0300 	mov.w	r3, #0
 8002ec8:	00eb      	lsls	r3, r5, #3
 8002eca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ece:	00e2      	lsls	r2, r4, #3
 8002ed0:	4614      	mov	r4, r2
 8002ed2:	461d      	mov	r5, r3
 8002ed4:	4643      	mov	r3, r8
 8002ed6:	18e3      	adds	r3, r4, r3
 8002ed8:	603b      	str	r3, [r7, #0]
 8002eda:	464b      	mov	r3, r9
 8002edc:	eb45 0303 	adc.w	r3, r5, r3
 8002ee0:	607b      	str	r3, [r7, #4]
 8002ee2:	f04f 0200 	mov.w	r2, #0
 8002ee6:	f04f 0300 	mov.w	r3, #0
 8002eea:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002eee:	4629      	mov	r1, r5
 8002ef0:	028b      	lsls	r3, r1, #10
 8002ef2:	4621      	mov	r1, r4
 8002ef4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ef8:	4621      	mov	r1, r4
 8002efa:	028a      	lsls	r2, r1, #10
 8002efc:	4610      	mov	r0, r2
 8002efe:	4619      	mov	r1, r3
 8002f00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f02:	2200      	movs	r2, #0
 8002f04:	61bb      	str	r3, [r7, #24]
 8002f06:	61fa      	str	r2, [r7, #28]
 8002f08:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f0c:	f7fd fdae 	bl	8000a6c <__aeabi_uldivmod>
 8002f10:	4602      	mov	r2, r0
 8002f12:	460b      	mov	r3, r1
 8002f14:	4613      	mov	r3, r2
 8002f16:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002f18:	4b0b      	ldr	r3, [pc, #44]	@ (8002f48 <HAL_RCC_GetSysClockFreq+0x200>)
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	0c1b      	lsrs	r3, r3, #16
 8002f1e:	f003 0303 	and.w	r3, r3, #3
 8002f22:	3301      	adds	r3, #1
 8002f24:	005b      	lsls	r3, r3, #1
 8002f26:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002f28:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002f2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002f2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f30:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002f32:	e002      	b.n	8002f3a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002f34:	4b05      	ldr	r3, [pc, #20]	@ (8002f4c <HAL_RCC_GetSysClockFreq+0x204>)
 8002f36:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002f38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002f3a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002f3c:	4618      	mov	r0, r3
 8002f3e:	3750      	adds	r7, #80	@ 0x50
 8002f40:	46bd      	mov	sp, r7
 8002f42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002f46:	bf00      	nop
 8002f48:	40023800 	.word	0x40023800
 8002f4c:	00f42400 	.word	0x00f42400
 8002f50:	007a1200 	.word	0x007a1200

08002f54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f54:	b480      	push	{r7}
 8002f56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f58:	4b03      	ldr	r3, [pc, #12]	@ (8002f68 <HAL_RCC_GetHCLKFreq+0x14>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr
 8002f66:	bf00      	nop
 8002f68:	20000000 	.word	0x20000000

08002f6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002f70:	f7ff fff0 	bl	8002f54 <HAL_RCC_GetHCLKFreq>
 8002f74:	4602      	mov	r2, r0
 8002f76:	4b05      	ldr	r3, [pc, #20]	@ (8002f8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	0a9b      	lsrs	r3, r3, #10
 8002f7c:	f003 0307 	and.w	r3, r3, #7
 8002f80:	4903      	ldr	r1, [pc, #12]	@ (8002f90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f82:	5ccb      	ldrb	r3, [r1, r3]
 8002f84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	bd80      	pop	{r7, pc}
 8002f8c:	40023800 	.word	0x40023800
 8002f90:	0800418c 	.word	0x0800418c

08002f94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002f98:	f7ff ffdc 	bl	8002f54 <HAL_RCC_GetHCLKFreq>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	4b05      	ldr	r3, [pc, #20]	@ (8002fb4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002fa0:	689b      	ldr	r3, [r3, #8]
 8002fa2:	0b5b      	lsrs	r3, r3, #13
 8002fa4:	f003 0307 	and.w	r3, r3, #7
 8002fa8:	4903      	ldr	r1, [pc, #12]	@ (8002fb8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002faa:	5ccb      	ldrb	r3, [r1, r3]
 8002fac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	bd80      	pop	{r7, pc}
 8002fb4:	40023800 	.word	0x40023800
 8002fb8:	0800418c 	.word	0x0800418c

08002fbc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b082      	sub	sp, #8
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d101      	bne.n	8002fce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e042      	b.n	8003054 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002fd4:	b2db      	uxtb	r3, r3
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d106      	bne.n	8002fe8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f7fe fb62 	bl	80016ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2224      	movs	r2, #36	@ 0x24
 8002fec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	68da      	ldr	r2, [r3, #12]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002ffe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003000:	6878      	ldr	r0, [r7, #4]
 8003002:	f000 f973 	bl	80032ec <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	691a      	ldr	r2, [r3, #16]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003014:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	695a      	ldr	r2, [r3, #20]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003024:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	68da      	ldr	r2, [r3, #12]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003034:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	2200      	movs	r2, #0
 800303a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2220      	movs	r2, #32
 8003040:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2220      	movs	r2, #32
 8003048:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2200      	movs	r2, #0
 8003050:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003052:	2300      	movs	r3, #0
}
 8003054:	4618      	mov	r0, r3
 8003056:	3708      	adds	r7, #8
 8003058:	46bd      	mov	sp, r7
 800305a:	bd80      	pop	{r7, pc}

0800305c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b08a      	sub	sp, #40	@ 0x28
 8003060:	af02      	add	r7, sp, #8
 8003062:	60f8      	str	r0, [r7, #12]
 8003064:	60b9      	str	r1, [r7, #8]
 8003066:	603b      	str	r3, [r7, #0]
 8003068:	4613      	mov	r3, r2
 800306a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800306c:	2300      	movs	r3, #0
 800306e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003076:	b2db      	uxtb	r3, r3
 8003078:	2b20      	cmp	r3, #32
 800307a:	d175      	bne.n	8003168 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d002      	beq.n	8003088 <HAL_UART_Transmit+0x2c>
 8003082:	88fb      	ldrh	r3, [r7, #6]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d101      	bne.n	800308c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003088:	2301      	movs	r3, #1
 800308a:	e06e      	b.n	800316a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2200      	movs	r2, #0
 8003090:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2221      	movs	r2, #33	@ 0x21
 8003096:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800309a:	f7fe fc57 	bl	800194c <HAL_GetTick>
 800309e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	88fa      	ldrh	r2, [r7, #6]
 80030a4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	88fa      	ldrh	r2, [r7, #6]
 80030aa:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80030b4:	d108      	bne.n	80030c8 <HAL_UART_Transmit+0x6c>
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	691b      	ldr	r3, [r3, #16]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d104      	bne.n	80030c8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80030be:	2300      	movs	r3, #0
 80030c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	61bb      	str	r3, [r7, #24]
 80030c6:	e003      	b.n	80030d0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80030c8:	68bb      	ldr	r3, [r7, #8]
 80030ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80030cc:	2300      	movs	r3, #0
 80030ce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80030d0:	e02e      	b.n	8003130 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	9300      	str	r3, [sp, #0]
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	2200      	movs	r2, #0
 80030da:	2180      	movs	r1, #128	@ 0x80
 80030dc:	68f8      	ldr	r0, [r7, #12]
 80030de:	f000 f848 	bl	8003172 <UART_WaitOnFlagUntilTimeout>
 80030e2:	4603      	mov	r3, r0
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d005      	beq.n	80030f4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	2220      	movs	r2, #32
 80030ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80030f0:	2303      	movs	r3, #3
 80030f2:	e03a      	b.n	800316a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80030f4:	69fb      	ldr	r3, [r7, #28]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d10b      	bne.n	8003112 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80030fa:	69bb      	ldr	r3, [r7, #24]
 80030fc:	881b      	ldrh	r3, [r3, #0]
 80030fe:	461a      	mov	r2, r3
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003108:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800310a:	69bb      	ldr	r3, [r7, #24]
 800310c:	3302      	adds	r3, #2
 800310e:	61bb      	str	r3, [r7, #24]
 8003110:	e007      	b.n	8003122 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	781a      	ldrb	r2, [r3, #0]
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800311c:	69fb      	ldr	r3, [r7, #28]
 800311e:	3301      	adds	r3, #1
 8003120:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003126:	b29b      	uxth	r3, r3
 8003128:	3b01      	subs	r3, #1
 800312a:	b29a      	uxth	r2, r3
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003134:	b29b      	uxth	r3, r3
 8003136:	2b00      	cmp	r3, #0
 8003138:	d1cb      	bne.n	80030d2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	9300      	str	r3, [sp, #0]
 800313e:	697b      	ldr	r3, [r7, #20]
 8003140:	2200      	movs	r2, #0
 8003142:	2140      	movs	r1, #64	@ 0x40
 8003144:	68f8      	ldr	r0, [r7, #12]
 8003146:	f000 f814 	bl	8003172 <UART_WaitOnFlagUntilTimeout>
 800314a:	4603      	mov	r3, r0
 800314c:	2b00      	cmp	r3, #0
 800314e:	d005      	beq.n	800315c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2220      	movs	r2, #32
 8003154:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003158:	2303      	movs	r3, #3
 800315a:	e006      	b.n	800316a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2220      	movs	r2, #32
 8003160:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003164:	2300      	movs	r3, #0
 8003166:	e000      	b.n	800316a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003168:	2302      	movs	r3, #2
  }
}
 800316a:	4618      	mov	r0, r3
 800316c:	3720      	adds	r7, #32
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}

08003172 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003172:	b580      	push	{r7, lr}
 8003174:	b086      	sub	sp, #24
 8003176:	af00      	add	r7, sp, #0
 8003178:	60f8      	str	r0, [r7, #12]
 800317a:	60b9      	str	r1, [r7, #8]
 800317c:	603b      	str	r3, [r7, #0]
 800317e:	4613      	mov	r3, r2
 8003180:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003182:	e03b      	b.n	80031fc <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003184:	6a3b      	ldr	r3, [r7, #32]
 8003186:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800318a:	d037      	beq.n	80031fc <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800318c:	f7fe fbde 	bl	800194c <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	6a3a      	ldr	r2, [r7, #32]
 8003198:	429a      	cmp	r2, r3
 800319a:	d302      	bcc.n	80031a2 <UART_WaitOnFlagUntilTimeout+0x30>
 800319c:	6a3b      	ldr	r3, [r7, #32]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d101      	bne.n	80031a6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80031a2:	2303      	movs	r3, #3
 80031a4:	e03a      	b.n	800321c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	f003 0304 	and.w	r3, r3, #4
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d023      	beq.n	80031fc <UART_WaitOnFlagUntilTimeout+0x8a>
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	2b80      	cmp	r3, #128	@ 0x80
 80031b8:	d020      	beq.n	80031fc <UART_WaitOnFlagUntilTimeout+0x8a>
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	2b40      	cmp	r3, #64	@ 0x40
 80031be:	d01d      	beq.n	80031fc <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 0308 	and.w	r3, r3, #8
 80031ca:	2b08      	cmp	r3, #8
 80031cc:	d116      	bne.n	80031fc <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80031ce:	2300      	movs	r3, #0
 80031d0:	617b      	str	r3, [r7, #20]
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	617b      	str	r3, [r7, #20]
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	617b      	str	r3, [r7, #20]
 80031e2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80031e4:	68f8      	ldr	r0, [r7, #12]
 80031e6:	f000 f81d 	bl	8003224 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2208      	movs	r2, #8
 80031ee:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	2200      	movs	r2, #0
 80031f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80031f8:	2301      	movs	r3, #1
 80031fa:	e00f      	b.n	800321c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	4013      	ands	r3, r2
 8003206:	68ba      	ldr	r2, [r7, #8]
 8003208:	429a      	cmp	r2, r3
 800320a:	bf0c      	ite	eq
 800320c:	2301      	moveq	r3, #1
 800320e:	2300      	movne	r3, #0
 8003210:	b2db      	uxtb	r3, r3
 8003212:	461a      	mov	r2, r3
 8003214:	79fb      	ldrb	r3, [r7, #7]
 8003216:	429a      	cmp	r2, r3
 8003218:	d0b4      	beq.n	8003184 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800321a:	2300      	movs	r3, #0
}
 800321c:	4618      	mov	r0, r3
 800321e:	3718      	adds	r7, #24
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}

08003224 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003224:	b480      	push	{r7}
 8003226:	b095      	sub	sp, #84	@ 0x54
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	330c      	adds	r3, #12
 8003232:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003234:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003236:	e853 3f00 	ldrex	r3, [r3]
 800323a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800323c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800323e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003242:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	330c      	adds	r3, #12
 800324a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800324c:	643a      	str	r2, [r7, #64]	@ 0x40
 800324e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003250:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003252:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003254:	e841 2300 	strex	r3, r2, [r1]
 8003258:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800325a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800325c:	2b00      	cmp	r3, #0
 800325e:	d1e5      	bne.n	800322c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	3314      	adds	r3, #20
 8003266:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003268:	6a3b      	ldr	r3, [r7, #32]
 800326a:	e853 3f00 	ldrex	r3, [r3]
 800326e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003270:	69fb      	ldr	r3, [r7, #28]
 8003272:	f023 0301 	bic.w	r3, r3, #1
 8003276:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	3314      	adds	r3, #20
 800327e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003280:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003282:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003284:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003286:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003288:	e841 2300 	strex	r3, r2, [r1]
 800328c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800328e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003290:	2b00      	cmp	r3, #0
 8003292:	d1e5      	bne.n	8003260 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003298:	2b01      	cmp	r3, #1
 800329a:	d119      	bne.n	80032d0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	330c      	adds	r3, #12
 80032a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	e853 3f00 	ldrex	r3, [r3]
 80032aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80032ac:	68bb      	ldr	r3, [r7, #8]
 80032ae:	f023 0310 	bic.w	r3, r3, #16
 80032b2:	647b      	str	r3, [r7, #68]	@ 0x44
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	330c      	adds	r3, #12
 80032ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80032bc:	61ba      	str	r2, [r7, #24]
 80032be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032c0:	6979      	ldr	r1, [r7, #20]
 80032c2:	69ba      	ldr	r2, [r7, #24]
 80032c4:	e841 2300 	strex	r3, r2, [r1]
 80032c8:	613b      	str	r3, [r7, #16]
   return(result);
 80032ca:	693b      	ldr	r3, [r7, #16]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d1e5      	bne.n	800329c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2220      	movs	r2, #32
 80032d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2200      	movs	r2, #0
 80032dc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80032de:	bf00      	nop
 80032e0:	3754      	adds	r7, #84	@ 0x54
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr
	...

080032ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80032ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80032f0:	b0c0      	sub	sp, #256	@ 0x100
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80032f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	691b      	ldr	r3, [r3, #16]
 8003300:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003304:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003308:	68d9      	ldr	r1, [r3, #12]
 800330a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800330e:	681a      	ldr	r2, [r3, #0]
 8003310:	ea40 0301 	orr.w	r3, r0, r1
 8003314:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003316:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800331a:	689a      	ldr	r2, [r3, #8]
 800331c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003320:	691b      	ldr	r3, [r3, #16]
 8003322:	431a      	orrs	r2, r3
 8003324:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003328:	695b      	ldr	r3, [r3, #20]
 800332a:	431a      	orrs	r2, r3
 800332c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003330:	69db      	ldr	r3, [r3, #28]
 8003332:	4313      	orrs	r3, r2
 8003334:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003338:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003344:	f021 010c 	bic.w	r1, r1, #12
 8003348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800334c:	681a      	ldr	r2, [r3, #0]
 800334e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003352:	430b      	orrs	r3, r1
 8003354:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003356:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	695b      	ldr	r3, [r3, #20]
 800335e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003362:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003366:	6999      	ldr	r1, [r3, #24]
 8003368:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	ea40 0301 	orr.w	r3, r0, r1
 8003372:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003374:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	4b8f      	ldr	r3, [pc, #572]	@ (80035b8 <UART_SetConfig+0x2cc>)
 800337c:	429a      	cmp	r2, r3
 800337e:	d005      	beq.n	800338c <UART_SetConfig+0xa0>
 8003380:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003384:	681a      	ldr	r2, [r3, #0]
 8003386:	4b8d      	ldr	r3, [pc, #564]	@ (80035bc <UART_SetConfig+0x2d0>)
 8003388:	429a      	cmp	r2, r3
 800338a:	d104      	bne.n	8003396 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800338c:	f7ff fe02 	bl	8002f94 <HAL_RCC_GetPCLK2Freq>
 8003390:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003394:	e003      	b.n	800339e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003396:	f7ff fde9 	bl	8002f6c <HAL_RCC_GetPCLK1Freq>
 800339a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800339e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80033a2:	69db      	ldr	r3, [r3, #28]
 80033a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80033a8:	f040 810c 	bne.w	80035c4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80033ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80033b0:	2200      	movs	r2, #0
 80033b2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80033b6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80033ba:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80033be:	4622      	mov	r2, r4
 80033c0:	462b      	mov	r3, r5
 80033c2:	1891      	adds	r1, r2, r2
 80033c4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80033c6:	415b      	adcs	r3, r3
 80033c8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80033ca:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80033ce:	4621      	mov	r1, r4
 80033d0:	eb12 0801 	adds.w	r8, r2, r1
 80033d4:	4629      	mov	r1, r5
 80033d6:	eb43 0901 	adc.w	r9, r3, r1
 80033da:	f04f 0200 	mov.w	r2, #0
 80033de:	f04f 0300 	mov.w	r3, #0
 80033e2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80033e6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80033ea:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80033ee:	4690      	mov	r8, r2
 80033f0:	4699      	mov	r9, r3
 80033f2:	4623      	mov	r3, r4
 80033f4:	eb18 0303 	adds.w	r3, r8, r3
 80033f8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80033fc:	462b      	mov	r3, r5
 80033fe:	eb49 0303 	adc.w	r3, r9, r3
 8003402:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003406:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800340a:	685b      	ldr	r3, [r3, #4]
 800340c:	2200      	movs	r2, #0
 800340e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003412:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003416:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800341a:	460b      	mov	r3, r1
 800341c:	18db      	adds	r3, r3, r3
 800341e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003420:	4613      	mov	r3, r2
 8003422:	eb42 0303 	adc.w	r3, r2, r3
 8003426:	657b      	str	r3, [r7, #84]	@ 0x54
 8003428:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800342c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003430:	f7fd fb1c 	bl	8000a6c <__aeabi_uldivmod>
 8003434:	4602      	mov	r2, r0
 8003436:	460b      	mov	r3, r1
 8003438:	4b61      	ldr	r3, [pc, #388]	@ (80035c0 <UART_SetConfig+0x2d4>)
 800343a:	fba3 2302 	umull	r2, r3, r3, r2
 800343e:	095b      	lsrs	r3, r3, #5
 8003440:	011c      	lsls	r4, r3, #4
 8003442:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003446:	2200      	movs	r2, #0
 8003448:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800344c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003450:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003454:	4642      	mov	r2, r8
 8003456:	464b      	mov	r3, r9
 8003458:	1891      	adds	r1, r2, r2
 800345a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800345c:	415b      	adcs	r3, r3
 800345e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003460:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003464:	4641      	mov	r1, r8
 8003466:	eb12 0a01 	adds.w	sl, r2, r1
 800346a:	4649      	mov	r1, r9
 800346c:	eb43 0b01 	adc.w	fp, r3, r1
 8003470:	f04f 0200 	mov.w	r2, #0
 8003474:	f04f 0300 	mov.w	r3, #0
 8003478:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800347c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003480:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003484:	4692      	mov	sl, r2
 8003486:	469b      	mov	fp, r3
 8003488:	4643      	mov	r3, r8
 800348a:	eb1a 0303 	adds.w	r3, sl, r3
 800348e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003492:	464b      	mov	r3, r9
 8003494:	eb4b 0303 	adc.w	r3, fp, r3
 8003498:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800349c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	2200      	movs	r2, #0
 80034a4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80034a8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80034ac:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80034b0:	460b      	mov	r3, r1
 80034b2:	18db      	adds	r3, r3, r3
 80034b4:	643b      	str	r3, [r7, #64]	@ 0x40
 80034b6:	4613      	mov	r3, r2
 80034b8:	eb42 0303 	adc.w	r3, r2, r3
 80034bc:	647b      	str	r3, [r7, #68]	@ 0x44
 80034be:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80034c2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80034c6:	f7fd fad1 	bl	8000a6c <__aeabi_uldivmod>
 80034ca:	4602      	mov	r2, r0
 80034cc:	460b      	mov	r3, r1
 80034ce:	4611      	mov	r1, r2
 80034d0:	4b3b      	ldr	r3, [pc, #236]	@ (80035c0 <UART_SetConfig+0x2d4>)
 80034d2:	fba3 2301 	umull	r2, r3, r3, r1
 80034d6:	095b      	lsrs	r3, r3, #5
 80034d8:	2264      	movs	r2, #100	@ 0x64
 80034da:	fb02 f303 	mul.w	r3, r2, r3
 80034de:	1acb      	subs	r3, r1, r3
 80034e0:	00db      	lsls	r3, r3, #3
 80034e2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80034e6:	4b36      	ldr	r3, [pc, #216]	@ (80035c0 <UART_SetConfig+0x2d4>)
 80034e8:	fba3 2302 	umull	r2, r3, r3, r2
 80034ec:	095b      	lsrs	r3, r3, #5
 80034ee:	005b      	lsls	r3, r3, #1
 80034f0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80034f4:	441c      	add	r4, r3
 80034f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80034fa:	2200      	movs	r2, #0
 80034fc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003500:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003504:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003508:	4642      	mov	r2, r8
 800350a:	464b      	mov	r3, r9
 800350c:	1891      	adds	r1, r2, r2
 800350e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003510:	415b      	adcs	r3, r3
 8003512:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003514:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003518:	4641      	mov	r1, r8
 800351a:	1851      	adds	r1, r2, r1
 800351c:	6339      	str	r1, [r7, #48]	@ 0x30
 800351e:	4649      	mov	r1, r9
 8003520:	414b      	adcs	r3, r1
 8003522:	637b      	str	r3, [r7, #52]	@ 0x34
 8003524:	f04f 0200 	mov.w	r2, #0
 8003528:	f04f 0300 	mov.w	r3, #0
 800352c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003530:	4659      	mov	r1, fp
 8003532:	00cb      	lsls	r3, r1, #3
 8003534:	4651      	mov	r1, sl
 8003536:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800353a:	4651      	mov	r1, sl
 800353c:	00ca      	lsls	r2, r1, #3
 800353e:	4610      	mov	r0, r2
 8003540:	4619      	mov	r1, r3
 8003542:	4603      	mov	r3, r0
 8003544:	4642      	mov	r2, r8
 8003546:	189b      	adds	r3, r3, r2
 8003548:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800354c:	464b      	mov	r3, r9
 800354e:	460a      	mov	r2, r1
 8003550:	eb42 0303 	adc.w	r3, r2, r3
 8003554:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	2200      	movs	r2, #0
 8003560:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003564:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003568:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800356c:	460b      	mov	r3, r1
 800356e:	18db      	adds	r3, r3, r3
 8003570:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003572:	4613      	mov	r3, r2
 8003574:	eb42 0303 	adc.w	r3, r2, r3
 8003578:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800357a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800357e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003582:	f7fd fa73 	bl	8000a6c <__aeabi_uldivmod>
 8003586:	4602      	mov	r2, r0
 8003588:	460b      	mov	r3, r1
 800358a:	4b0d      	ldr	r3, [pc, #52]	@ (80035c0 <UART_SetConfig+0x2d4>)
 800358c:	fba3 1302 	umull	r1, r3, r3, r2
 8003590:	095b      	lsrs	r3, r3, #5
 8003592:	2164      	movs	r1, #100	@ 0x64
 8003594:	fb01 f303 	mul.w	r3, r1, r3
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	00db      	lsls	r3, r3, #3
 800359c:	3332      	adds	r3, #50	@ 0x32
 800359e:	4a08      	ldr	r2, [pc, #32]	@ (80035c0 <UART_SetConfig+0x2d4>)
 80035a0:	fba2 2303 	umull	r2, r3, r2, r3
 80035a4:	095b      	lsrs	r3, r3, #5
 80035a6:	f003 0207 	and.w	r2, r3, #7
 80035aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4422      	add	r2, r4
 80035b2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80035b4:	e106      	b.n	80037c4 <UART_SetConfig+0x4d8>
 80035b6:	bf00      	nop
 80035b8:	40011000 	.word	0x40011000
 80035bc:	40011400 	.word	0x40011400
 80035c0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80035c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80035c8:	2200      	movs	r2, #0
 80035ca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80035ce:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80035d2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80035d6:	4642      	mov	r2, r8
 80035d8:	464b      	mov	r3, r9
 80035da:	1891      	adds	r1, r2, r2
 80035dc:	6239      	str	r1, [r7, #32]
 80035de:	415b      	adcs	r3, r3
 80035e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80035e2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80035e6:	4641      	mov	r1, r8
 80035e8:	1854      	adds	r4, r2, r1
 80035ea:	4649      	mov	r1, r9
 80035ec:	eb43 0501 	adc.w	r5, r3, r1
 80035f0:	f04f 0200 	mov.w	r2, #0
 80035f4:	f04f 0300 	mov.w	r3, #0
 80035f8:	00eb      	lsls	r3, r5, #3
 80035fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80035fe:	00e2      	lsls	r2, r4, #3
 8003600:	4614      	mov	r4, r2
 8003602:	461d      	mov	r5, r3
 8003604:	4643      	mov	r3, r8
 8003606:	18e3      	adds	r3, r4, r3
 8003608:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800360c:	464b      	mov	r3, r9
 800360e:	eb45 0303 	adc.w	r3, r5, r3
 8003612:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003616:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	2200      	movs	r2, #0
 800361e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003622:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003626:	f04f 0200 	mov.w	r2, #0
 800362a:	f04f 0300 	mov.w	r3, #0
 800362e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003632:	4629      	mov	r1, r5
 8003634:	008b      	lsls	r3, r1, #2
 8003636:	4621      	mov	r1, r4
 8003638:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800363c:	4621      	mov	r1, r4
 800363e:	008a      	lsls	r2, r1, #2
 8003640:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003644:	f7fd fa12 	bl	8000a6c <__aeabi_uldivmod>
 8003648:	4602      	mov	r2, r0
 800364a:	460b      	mov	r3, r1
 800364c:	4b60      	ldr	r3, [pc, #384]	@ (80037d0 <UART_SetConfig+0x4e4>)
 800364e:	fba3 2302 	umull	r2, r3, r3, r2
 8003652:	095b      	lsrs	r3, r3, #5
 8003654:	011c      	lsls	r4, r3, #4
 8003656:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800365a:	2200      	movs	r2, #0
 800365c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003660:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003664:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003668:	4642      	mov	r2, r8
 800366a:	464b      	mov	r3, r9
 800366c:	1891      	adds	r1, r2, r2
 800366e:	61b9      	str	r1, [r7, #24]
 8003670:	415b      	adcs	r3, r3
 8003672:	61fb      	str	r3, [r7, #28]
 8003674:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003678:	4641      	mov	r1, r8
 800367a:	1851      	adds	r1, r2, r1
 800367c:	6139      	str	r1, [r7, #16]
 800367e:	4649      	mov	r1, r9
 8003680:	414b      	adcs	r3, r1
 8003682:	617b      	str	r3, [r7, #20]
 8003684:	f04f 0200 	mov.w	r2, #0
 8003688:	f04f 0300 	mov.w	r3, #0
 800368c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003690:	4659      	mov	r1, fp
 8003692:	00cb      	lsls	r3, r1, #3
 8003694:	4651      	mov	r1, sl
 8003696:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800369a:	4651      	mov	r1, sl
 800369c:	00ca      	lsls	r2, r1, #3
 800369e:	4610      	mov	r0, r2
 80036a0:	4619      	mov	r1, r3
 80036a2:	4603      	mov	r3, r0
 80036a4:	4642      	mov	r2, r8
 80036a6:	189b      	adds	r3, r3, r2
 80036a8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80036ac:	464b      	mov	r3, r9
 80036ae:	460a      	mov	r2, r1
 80036b0:	eb42 0303 	adc.w	r3, r2, r3
 80036b4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80036b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	2200      	movs	r2, #0
 80036c0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80036c2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80036c4:	f04f 0200 	mov.w	r2, #0
 80036c8:	f04f 0300 	mov.w	r3, #0
 80036cc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80036d0:	4649      	mov	r1, r9
 80036d2:	008b      	lsls	r3, r1, #2
 80036d4:	4641      	mov	r1, r8
 80036d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80036da:	4641      	mov	r1, r8
 80036dc:	008a      	lsls	r2, r1, #2
 80036de:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80036e2:	f7fd f9c3 	bl	8000a6c <__aeabi_uldivmod>
 80036e6:	4602      	mov	r2, r0
 80036e8:	460b      	mov	r3, r1
 80036ea:	4611      	mov	r1, r2
 80036ec:	4b38      	ldr	r3, [pc, #224]	@ (80037d0 <UART_SetConfig+0x4e4>)
 80036ee:	fba3 2301 	umull	r2, r3, r3, r1
 80036f2:	095b      	lsrs	r3, r3, #5
 80036f4:	2264      	movs	r2, #100	@ 0x64
 80036f6:	fb02 f303 	mul.w	r3, r2, r3
 80036fa:	1acb      	subs	r3, r1, r3
 80036fc:	011b      	lsls	r3, r3, #4
 80036fe:	3332      	adds	r3, #50	@ 0x32
 8003700:	4a33      	ldr	r2, [pc, #204]	@ (80037d0 <UART_SetConfig+0x4e4>)
 8003702:	fba2 2303 	umull	r2, r3, r2, r3
 8003706:	095b      	lsrs	r3, r3, #5
 8003708:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800370c:	441c      	add	r4, r3
 800370e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003712:	2200      	movs	r2, #0
 8003714:	673b      	str	r3, [r7, #112]	@ 0x70
 8003716:	677a      	str	r2, [r7, #116]	@ 0x74
 8003718:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800371c:	4642      	mov	r2, r8
 800371e:	464b      	mov	r3, r9
 8003720:	1891      	adds	r1, r2, r2
 8003722:	60b9      	str	r1, [r7, #8]
 8003724:	415b      	adcs	r3, r3
 8003726:	60fb      	str	r3, [r7, #12]
 8003728:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800372c:	4641      	mov	r1, r8
 800372e:	1851      	adds	r1, r2, r1
 8003730:	6039      	str	r1, [r7, #0]
 8003732:	4649      	mov	r1, r9
 8003734:	414b      	adcs	r3, r1
 8003736:	607b      	str	r3, [r7, #4]
 8003738:	f04f 0200 	mov.w	r2, #0
 800373c:	f04f 0300 	mov.w	r3, #0
 8003740:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003744:	4659      	mov	r1, fp
 8003746:	00cb      	lsls	r3, r1, #3
 8003748:	4651      	mov	r1, sl
 800374a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800374e:	4651      	mov	r1, sl
 8003750:	00ca      	lsls	r2, r1, #3
 8003752:	4610      	mov	r0, r2
 8003754:	4619      	mov	r1, r3
 8003756:	4603      	mov	r3, r0
 8003758:	4642      	mov	r2, r8
 800375a:	189b      	adds	r3, r3, r2
 800375c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800375e:	464b      	mov	r3, r9
 8003760:	460a      	mov	r2, r1
 8003762:	eb42 0303 	adc.w	r3, r2, r3
 8003766:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003768:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	2200      	movs	r2, #0
 8003770:	663b      	str	r3, [r7, #96]	@ 0x60
 8003772:	667a      	str	r2, [r7, #100]	@ 0x64
 8003774:	f04f 0200 	mov.w	r2, #0
 8003778:	f04f 0300 	mov.w	r3, #0
 800377c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003780:	4649      	mov	r1, r9
 8003782:	008b      	lsls	r3, r1, #2
 8003784:	4641      	mov	r1, r8
 8003786:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800378a:	4641      	mov	r1, r8
 800378c:	008a      	lsls	r2, r1, #2
 800378e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003792:	f7fd f96b 	bl	8000a6c <__aeabi_uldivmod>
 8003796:	4602      	mov	r2, r0
 8003798:	460b      	mov	r3, r1
 800379a:	4b0d      	ldr	r3, [pc, #52]	@ (80037d0 <UART_SetConfig+0x4e4>)
 800379c:	fba3 1302 	umull	r1, r3, r3, r2
 80037a0:	095b      	lsrs	r3, r3, #5
 80037a2:	2164      	movs	r1, #100	@ 0x64
 80037a4:	fb01 f303 	mul.w	r3, r1, r3
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	011b      	lsls	r3, r3, #4
 80037ac:	3332      	adds	r3, #50	@ 0x32
 80037ae:	4a08      	ldr	r2, [pc, #32]	@ (80037d0 <UART_SetConfig+0x4e4>)
 80037b0:	fba2 2303 	umull	r2, r3, r2, r3
 80037b4:	095b      	lsrs	r3, r3, #5
 80037b6:	f003 020f 	and.w	r2, r3, #15
 80037ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4422      	add	r2, r4
 80037c2:	609a      	str	r2, [r3, #8]
}
 80037c4:	bf00      	nop
 80037c6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80037ca:	46bd      	mov	sp, r7
 80037cc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80037d0:	51eb851f 	.word	0x51eb851f

080037d4 <siprintf>:
 80037d4:	b40e      	push	{r1, r2, r3}
 80037d6:	b510      	push	{r4, lr}
 80037d8:	b09d      	sub	sp, #116	@ 0x74
 80037da:	ab1f      	add	r3, sp, #124	@ 0x7c
 80037dc:	9002      	str	r0, [sp, #8]
 80037de:	9006      	str	r0, [sp, #24]
 80037e0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80037e4:	480a      	ldr	r0, [pc, #40]	@ (8003810 <siprintf+0x3c>)
 80037e6:	9107      	str	r1, [sp, #28]
 80037e8:	9104      	str	r1, [sp, #16]
 80037ea:	490a      	ldr	r1, [pc, #40]	@ (8003814 <siprintf+0x40>)
 80037ec:	f853 2b04 	ldr.w	r2, [r3], #4
 80037f0:	9105      	str	r1, [sp, #20]
 80037f2:	2400      	movs	r4, #0
 80037f4:	a902      	add	r1, sp, #8
 80037f6:	6800      	ldr	r0, [r0, #0]
 80037f8:	9301      	str	r3, [sp, #4]
 80037fa:	941b      	str	r4, [sp, #108]	@ 0x6c
 80037fc:	f000 f994 	bl	8003b28 <_svfiprintf_r>
 8003800:	9b02      	ldr	r3, [sp, #8]
 8003802:	701c      	strb	r4, [r3, #0]
 8003804:	b01d      	add	sp, #116	@ 0x74
 8003806:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800380a:	b003      	add	sp, #12
 800380c:	4770      	bx	lr
 800380e:	bf00      	nop
 8003810:	2000000c 	.word	0x2000000c
 8003814:	ffff0208 	.word	0xffff0208

08003818 <memset>:
 8003818:	4402      	add	r2, r0
 800381a:	4603      	mov	r3, r0
 800381c:	4293      	cmp	r3, r2
 800381e:	d100      	bne.n	8003822 <memset+0xa>
 8003820:	4770      	bx	lr
 8003822:	f803 1b01 	strb.w	r1, [r3], #1
 8003826:	e7f9      	b.n	800381c <memset+0x4>

08003828 <__errno>:
 8003828:	4b01      	ldr	r3, [pc, #4]	@ (8003830 <__errno+0x8>)
 800382a:	6818      	ldr	r0, [r3, #0]
 800382c:	4770      	bx	lr
 800382e:	bf00      	nop
 8003830:	2000000c 	.word	0x2000000c

08003834 <__libc_init_array>:
 8003834:	b570      	push	{r4, r5, r6, lr}
 8003836:	4d0d      	ldr	r5, [pc, #52]	@ (800386c <__libc_init_array+0x38>)
 8003838:	4c0d      	ldr	r4, [pc, #52]	@ (8003870 <__libc_init_array+0x3c>)
 800383a:	1b64      	subs	r4, r4, r5
 800383c:	10a4      	asrs	r4, r4, #2
 800383e:	2600      	movs	r6, #0
 8003840:	42a6      	cmp	r6, r4
 8003842:	d109      	bne.n	8003858 <__libc_init_array+0x24>
 8003844:	4d0b      	ldr	r5, [pc, #44]	@ (8003874 <__libc_init_array+0x40>)
 8003846:	4c0c      	ldr	r4, [pc, #48]	@ (8003878 <__libc_init_array+0x44>)
 8003848:	f000 fc64 	bl	8004114 <_init>
 800384c:	1b64      	subs	r4, r4, r5
 800384e:	10a4      	asrs	r4, r4, #2
 8003850:	2600      	movs	r6, #0
 8003852:	42a6      	cmp	r6, r4
 8003854:	d105      	bne.n	8003862 <__libc_init_array+0x2e>
 8003856:	bd70      	pop	{r4, r5, r6, pc}
 8003858:	f855 3b04 	ldr.w	r3, [r5], #4
 800385c:	4798      	blx	r3
 800385e:	3601      	adds	r6, #1
 8003860:	e7ee      	b.n	8003840 <__libc_init_array+0xc>
 8003862:	f855 3b04 	ldr.w	r3, [r5], #4
 8003866:	4798      	blx	r3
 8003868:	3601      	adds	r6, #1
 800386a:	e7f2      	b.n	8003852 <__libc_init_array+0x1e>
 800386c:	080041d0 	.word	0x080041d0
 8003870:	080041d0 	.word	0x080041d0
 8003874:	080041d0 	.word	0x080041d0
 8003878:	080041d4 	.word	0x080041d4

0800387c <__retarget_lock_acquire_recursive>:
 800387c:	4770      	bx	lr

0800387e <__retarget_lock_release_recursive>:
 800387e:	4770      	bx	lr

08003880 <_free_r>:
 8003880:	b538      	push	{r3, r4, r5, lr}
 8003882:	4605      	mov	r5, r0
 8003884:	2900      	cmp	r1, #0
 8003886:	d041      	beq.n	800390c <_free_r+0x8c>
 8003888:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800388c:	1f0c      	subs	r4, r1, #4
 800388e:	2b00      	cmp	r3, #0
 8003890:	bfb8      	it	lt
 8003892:	18e4      	addlt	r4, r4, r3
 8003894:	f000 f8e0 	bl	8003a58 <__malloc_lock>
 8003898:	4a1d      	ldr	r2, [pc, #116]	@ (8003910 <_free_r+0x90>)
 800389a:	6813      	ldr	r3, [r2, #0]
 800389c:	b933      	cbnz	r3, 80038ac <_free_r+0x2c>
 800389e:	6063      	str	r3, [r4, #4]
 80038a0:	6014      	str	r4, [r2, #0]
 80038a2:	4628      	mov	r0, r5
 80038a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80038a8:	f000 b8dc 	b.w	8003a64 <__malloc_unlock>
 80038ac:	42a3      	cmp	r3, r4
 80038ae:	d908      	bls.n	80038c2 <_free_r+0x42>
 80038b0:	6820      	ldr	r0, [r4, #0]
 80038b2:	1821      	adds	r1, r4, r0
 80038b4:	428b      	cmp	r3, r1
 80038b6:	bf01      	itttt	eq
 80038b8:	6819      	ldreq	r1, [r3, #0]
 80038ba:	685b      	ldreq	r3, [r3, #4]
 80038bc:	1809      	addeq	r1, r1, r0
 80038be:	6021      	streq	r1, [r4, #0]
 80038c0:	e7ed      	b.n	800389e <_free_r+0x1e>
 80038c2:	461a      	mov	r2, r3
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	b10b      	cbz	r3, 80038cc <_free_r+0x4c>
 80038c8:	42a3      	cmp	r3, r4
 80038ca:	d9fa      	bls.n	80038c2 <_free_r+0x42>
 80038cc:	6811      	ldr	r1, [r2, #0]
 80038ce:	1850      	adds	r0, r2, r1
 80038d0:	42a0      	cmp	r0, r4
 80038d2:	d10b      	bne.n	80038ec <_free_r+0x6c>
 80038d4:	6820      	ldr	r0, [r4, #0]
 80038d6:	4401      	add	r1, r0
 80038d8:	1850      	adds	r0, r2, r1
 80038da:	4283      	cmp	r3, r0
 80038dc:	6011      	str	r1, [r2, #0]
 80038de:	d1e0      	bne.n	80038a2 <_free_r+0x22>
 80038e0:	6818      	ldr	r0, [r3, #0]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	6053      	str	r3, [r2, #4]
 80038e6:	4408      	add	r0, r1
 80038e8:	6010      	str	r0, [r2, #0]
 80038ea:	e7da      	b.n	80038a2 <_free_r+0x22>
 80038ec:	d902      	bls.n	80038f4 <_free_r+0x74>
 80038ee:	230c      	movs	r3, #12
 80038f0:	602b      	str	r3, [r5, #0]
 80038f2:	e7d6      	b.n	80038a2 <_free_r+0x22>
 80038f4:	6820      	ldr	r0, [r4, #0]
 80038f6:	1821      	adds	r1, r4, r0
 80038f8:	428b      	cmp	r3, r1
 80038fa:	bf04      	itt	eq
 80038fc:	6819      	ldreq	r1, [r3, #0]
 80038fe:	685b      	ldreq	r3, [r3, #4]
 8003900:	6063      	str	r3, [r4, #4]
 8003902:	bf04      	itt	eq
 8003904:	1809      	addeq	r1, r1, r0
 8003906:	6021      	streq	r1, [r4, #0]
 8003908:	6054      	str	r4, [r2, #4]
 800390a:	e7ca      	b.n	80038a2 <_free_r+0x22>
 800390c:	bd38      	pop	{r3, r4, r5, pc}
 800390e:	bf00      	nop
 8003910:	20000254 	.word	0x20000254

08003914 <sbrk_aligned>:
 8003914:	b570      	push	{r4, r5, r6, lr}
 8003916:	4e0f      	ldr	r6, [pc, #60]	@ (8003954 <sbrk_aligned+0x40>)
 8003918:	460c      	mov	r4, r1
 800391a:	6831      	ldr	r1, [r6, #0]
 800391c:	4605      	mov	r5, r0
 800391e:	b911      	cbnz	r1, 8003926 <sbrk_aligned+0x12>
 8003920:	f000 fba4 	bl	800406c <_sbrk_r>
 8003924:	6030      	str	r0, [r6, #0]
 8003926:	4621      	mov	r1, r4
 8003928:	4628      	mov	r0, r5
 800392a:	f000 fb9f 	bl	800406c <_sbrk_r>
 800392e:	1c43      	adds	r3, r0, #1
 8003930:	d103      	bne.n	800393a <sbrk_aligned+0x26>
 8003932:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8003936:	4620      	mov	r0, r4
 8003938:	bd70      	pop	{r4, r5, r6, pc}
 800393a:	1cc4      	adds	r4, r0, #3
 800393c:	f024 0403 	bic.w	r4, r4, #3
 8003940:	42a0      	cmp	r0, r4
 8003942:	d0f8      	beq.n	8003936 <sbrk_aligned+0x22>
 8003944:	1a21      	subs	r1, r4, r0
 8003946:	4628      	mov	r0, r5
 8003948:	f000 fb90 	bl	800406c <_sbrk_r>
 800394c:	3001      	adds	r0, #1
 800394e:	d1f2      	bne.n	8003936 <sbrk_aligned+0x22>
 8003950:	e7ef      	b.n	8003932 <sbrk_aligned+0x1e>
 8003952:	bf00      	nop
 8003954:	20000250 	.word	0x20000250

08003958 <_malloc_r>:
 8003958:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800395c:	1ccd      	adds	r5, r1, #3
 800395e:	f025 0503 	bic.w	r5, r5, #3
 8003962:	3508      	adds	r5, #8
 8003964:	2d0c      	cmp	r5, #12
 8003966:	bf38      	it	cc
 8003968:	250c      	movcc	r5, #12
 800396a:	2d00      	cmp	r5, #0
 800396c:	4606      	mov	r6, r0
 800396e:	db01      	blt.n	8003974 <_malloc_r+0x1c>
 8003970:	42a9      	cmp	r1, r5
 8003972:	d904      	bls.n	800397e <_malloc_r+0x26>
 8003974:	230c      	movs	r3, #12
 8003976:	6033      	str	r3, [r6, #0]
 8003978:	2000      	movs	r0, #0
 800397a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800397e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003a54 <_malloc_r+0xfc>
 8003982:	f000 f869 	bl	8003a58 <__malloc_lock>
 8003986:	f8d8 3000 	ldr.w	r3, [r8]
 800398a:	461c      	mov	r4, r3
 800398c:	bb44      	cbnz	r4, 80039e0 <_malloc_r+0x88>
 800398e:	4629      	mov	r1, r5
 8003990:	4630      	mov	r0, r6
 8003992:	f7ff ffbf 	bl	8003914 <sbrk_aligned>
 8003996:	1c43      	adds	r3, r0, #1
 8003998:	4604      	mov	r4, r0
 800399a:	d158      	bne.n	8003a4e <_malloc_r+0xf6>
 800399c:	f8d8 4000 	ldr.w	r4, [r8]
 80039a0:	4627      	mov	r7, r4
 80039a2:	2f00      	cmp	r7, #0
 80039a4:	d143      	bne.n	8003a2e <_malloc_r+0xd6>
 80039a6:	2c00      	cmp	r4, #0
 80039a8:	d04b      	beq.n	8003a42 <_malloc_r+0xea>
 80039aa:	6823      	ldr	r3, [r4, #0]
 80039ac:	4639      	mov	r1, r7
 80039ae:	4630      	mov	r0, r6
 80039b0:	eb04 0903 	add.w	r9, r4, r3
 80039b4:	f000 fb5a 	bl	800406c <_sbrk_r>
 80039b8:	4581      	cmp	r9, r0
 80039ba:	d142      	bne.n	8003a42 <_malloc_r+0xea>
 80039bc:	6821      	ldr	r1, [r4, #0]
 80039be:	1a6d      	subs	r5, r5, r1
 80039c0:	4629      	mov	r1, r5
 80039c2:	4630      	mov	r0, r6
 80039c4:	f7ff ffa6 	bl	8003914 <sbrk_aligned>
 80039c8:	3001      	adds	r0, #1
 80039ca:	d03a      	beq.n	8003a42 <_malloc_r+0xea>
 80039cc:	6823      	ldr	r3, [r4, #0]
 80039ce:	442b      	add	r3, r5
 80039d0:	6023      	str	r3, [r4, #0]
 80039d2:	f8d8 3000 	ldr.w	r3, [r8]
 80039d6:	685a      	ldr	r2, [r3, #4]
 80039d8:	bb62      	cbnz	r2, 8003a34 <_malloc_r+0xdc>
 80039da:	f8c8 7000 	str.w	r7, [r8]
 80039de:	e00f      	b.n	8003a00 <_malloc_r+0xa8>
 80039e0:	6822      	ldr	r2, [r4, #0]
 80039e2:	1b52      	subs	r2, r2, r5
 80039e4:	d420      	bmi.n	8003a28 <_malloc_r+0xd0>
 80039e6:	2a0b      	cmp	r2, #11
 80039e8:	d917      	bls.n	8003a1a <_malloc_r+0xc2>
 80039ea:	1961      	adds	r1, r4, r5
 80039ec:	42a3      	cmp	r3, r4
 80039ee:	6025      	str	r5, [r4, #0]
 80039f0:	bf18      	it	ne
 80039f2:	6059      	strne	r1, [r3, #4]
 80039f4:	6863      	ldr	r3, [r4, #4]
 80039f6:	bf08      	it	eq
 80039f8:	f8c8 1000 	streq.w	r1, [r8]
 80039fc:	5162      	str	r2, [r4, r5]
 80039fe:	604b      	str	r3, [r1, #4]
 8003a00:	4630      	mov	r0, r6
 8003a02:	f000 f82f 	bl	8003a64 <__malloc_unlock>
 8003a06:	f104 000b 	add.w	r0, r4, #11
 8003a0a:	1d23      	adds	r3, r4, #4
 8003a0c:	f020 0007 	bic.w	r0, r0, #7
 8003a10:	1ac2      	subs	r2, r0, r3
 8003a12:	bf1c      	itt	ne
 8003a14:	1a1b      	subne	r3, r3, r0
 8003a16:	50a3      	strne	r3, [r4, r2]
 8003a18:	e7af      	b.n	800397a <_malloc_r+0x22>
 8003a1a:	6862      	ldr	r2, [r4, #4]
 8003a1c:	42a3      	cmp	r3, r4
 8003a1e:	bf0c      	ite	eq
 8003a20:	f8c8 2000 	streq.w	r2, [r8]
 8003a24:	605a      	strne	r2, [r3, #4]
 8003a26:	e7eb      	b.n	8003a00 <_malloc_r+0xa8>
 8003a28:	4623      	mov	r3, r4
 8003a2a:	6864      	ldr	r4, [r4, #4]
 8003a2c:	e7ae      	b.n	800398c <_malloc_r+0x34>
 8003a2e:	463c      	mov	r4, r7
 8003a30:	687f      	ldr	r7, [r7, #4]
 8003a32:	e7b6      	b.n	80039a2 <_malloc_r+0x4a>
 8003a34:	461a      	mov	r2, r3
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	42a3      	cmp	r3, r4
 8003a3a:	d1fb      	bne.n	8003a34 <_malloc_r+0xdc>
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	6053      	str	r3, [r2, #4]
 8003a40:	e7de      	b.n	8003a00 <_malloc_r+0xa8>
 8003a42:	230c      	movs	r3, #12
 8003a44:	6033      	str	r3, [r6, #0]
 8003a46:	4630      	mov	r0, r6
 8003a48:	f000 f80c 	bl	8003a64 <__malloc_unlock>
 8003a4c:	e794      	b.n	8003978 <_malloc_r+0x20>
 8003a4e:	6005      	str	r5, [r0, #0]
 8003a50:	e7d6      	b.n	8003a00 <_malloc_r+0xa8>
 8003a52:	bf00      	nop
 8003a54:	20000254 	.word	0x20000254

08003a58 <__malloc_lock>:
 8003a58:	4801      	ldr	r0, [pc, #4]	@ (8003a60 <__malloc_lock+0x8>)
 8003a5a:	f7ff bf0f 	b.w	800387c <__retarget_lock_acquire_recursive>
 8003a5e:	bf00      	nop
 8003a60:	2000024c 	.word	0x2000024c

08003a64 <__malloc_unlock>:
 8003a64:	4801      	ldr	r0, [pc, #4]	@ (8003a6c <__malloc_unlock+0x8>)
 8003a66:	f7ff bf0a 	b.w	800387e <__retarget_lock_release_recursive>
 8003a6a:	bf00      	nop
 8003a6c:	2000024c 	.word	0x2000024c

08003a70 <__ssputs_r>:
 8003a70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a74:	688e      	ldr	r6, [r1, #8]
 8003a76:	461f      	mov	r7, r3
 8003a78:	42be      	cmp	r6, r7
 8003a7a:	680b      	ldr	r3, [r1, #0]
 8003a7c:	4682      	mov	sl, r0
 8003a7e:	460c      	mov	r4, r1
 8003a80:	4690      	mov	r8, r2
 8003a82:	d82d      	bhi.n	8003ae0 <__ssputs_r+0x70>
 8003a84:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003a88:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003a8c:	d026      	beq.n	8003adc <__ssputs_r+0x6c>
 8003a8e:	6965      	ldr	r5, [r4, #20]
 8003a90:	6909      	ldr	r1, [r1, #16]
 8003a92:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003a96:	eba3 0901 	sub.w	r9, r3, r1
 8003a9a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003a9e:	1c7b      	adds	r3, r7, #1
 8003aa0:	444b      	add	r3, r9
 8003aa2:	106d      	asrs	r5, r5, #1
 8003aa4:	429d      	cmp	r5, r3
 8003aa6:	bf38      	it	cc
 8003aa8:	461d      	movcc	r5, r3
 8003aaa:	0553      	lsls	r3, r2, #21
 8003aac:	d527      	bpl.n	8003afe <__ssputs_r+0x8e>
 8003aae:	4629      	mov	r1, r5
 8003ab0:	f7ff ff52 	bl	8003958 <_malloc_r>
 8003ab4:	4606      	mov	r6, r0
 8003ab6:	b360      	cbz	r0, 8003b12 <__ssputs_r+0xa2>
 8003ab8:	6921      	ldr	r1, [r4, #16]
 8003aba:	464a      	mov	r2, r9
 8003abc:	f000 fae6 	bl	800408c <memcpy>
 8003ac0:	89a3      	ldrh	r3, [r4, #12]
 8003ac2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003ac6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003aca:	81a3      	strh	r3, [r4, #12]
 8003acc:	6126      	str	r6, [r4, #16]
 8003ace:	6165      	str	r5, [r4, #20]
 8003ad0:	444e      	add	r6, r9
 8003ad2:	eba5 0509 	sub.w	r5, r5, r9
 8003ad6:	6026      	str	r6, [r4, #0]
 8003ad8:	60a5      	str	r5, [r4, #8]
 8003ada:	463e      	mov	r6, r7
 8003adc:	42be      	cmp	r6, r7
 8003ade:	d900      	bls.n	8003ae2 <__ssputs_r+0x72>
 8003ae0:	463e      	mov	r6, r7
 8003ae2:	6820      	ldr	r0, [r4, #0]
 8003ae4:	4632      	mov	r2, r6
 8003ae6:	4641      	mov	r1, r8
 8003ae8:	f000 faa6 	bl	8004038 <memmove>
 8003aec:	68a3      	ldr	r3, [r4, #8]
 8003aee:	1b9b      	subs	r3, r3, r6
 8003af0:	60a3      	str	r3, [r4, #8]
 8003af2:	6823      	ldr	r3, [r4, #0]
 8003af4:	4433      	add	r3, r6
 8003af6:	6023      	str	r3, [r4, #0]
 8003af8:	2000      	movs	r0, #0
 8003afa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003afe:	462a      	mov	r2, r5
 8003b00:	f000 fad2 	bl	80040a8 <_realloc_r>
 8003b04:	4606      	mov	r6, r0
 8003b06:	2800      	cmp	r0, #0
 8003b08:	d1e0      	bne.n	8003acc <__ssputs_r+0x5c>
 8003b0a:	6921      	ldr	r1, [r4, #16]
 8003b0c:	4650      	mov	r0, sl
 8003b0e:	f7ff feb7 	bl	8003880 <_free_r>
 8003b12:	230c      	movs	r3, #12
 8003b14:	f8ca 3000 	str.w	r3, [sl]
 8003b18:	89a3      	ldrh	r3, [r4, #12]
 8003b1a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003b1e:	81a3      	strh	r3, [r4, #12]
 8003b20:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003b24:	e7e9      	b.n	8003afa <__ssputs_r+0x8a>
	...

08003b28 <_svfiprintf_r>:
 8003b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b2c:	4698      	mov	r8, r3
 8003b2e:	898b      	ldrh	r3, [r1, #12]
 8003b30:	061b      	lsls	r3, r3, #24
 8003b32:	b09d      	sub	sp, #116	@ 0x74
 8003b34:	4607      	mov	r7, r0
 8003b36:	460d      	mov	r5, r1
 8003b38:	4614      	mov	r4, r2
 8003b3a:	d510      	bpl.n	8003b5e <_svfiprintf_r+0x36>
 8003b3c:	690b      	ldr	r3, [r1, #16]
 8003b3e:	b973      	cbnz	r3, 8003b5e <_svfiprintf_r+0x36>
 8003b40:	2140      	movs	r1, #64	@ 0x40
 8003b42:	f7ff ff09 	bl	8003958 <_malloc_r>
 8003b46:	6028      	str	r0, [r5, #0]
 8003b48:	6128      	str	r0, [r5, #16]
 8003b4a:	b930      	cbnz	r0, 8003b5a <_svfiprintf_r+0x32>
 8003b4c:	230c      	movs	r3, #12
 8003b4e:	603b      	str	r3, [r7, #0]
 8003b50:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003b54:	b01d      	add	sp, #116	@ 0x74
 8003b56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b5a:	2340      	movs	r3, #64	@ 0x40
 8003b5c:	616b      	str	r3, [r5, #20]
 8003b5e:	2300      	movs	r3, #0
 8003b60:	9309      	str	r3, [sp, #36]	@ 0x24
 8003b62:	2320      	movs	r3, #32
 8003b64:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003b68:	f8cd 800c 	str.w	r8, [sp, #12]
 8003b6c:	2330      	movs	r3, #48	@ 0x30
 8003b6e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8003d0c <_svfiprintf_r+0x1e4>
 8003b72:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003b76:	f04f 0901 	mov.w	r9, #1
 8003b7a:	4623      	mov	r3, r4
 8003b7c:	469a      	mov	sl, r3
 8003b7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003b82:	b10a      	cbz	r2, 8003b88 <_svfiprintf_r+0x60>
 8003b84:	2a25      	cmp	r2, #37	@ 0x25
 8003b86:	d1f9      	bne.n	8003b7c <_svfiprintf_r+0x54>
 8003b88:	ebba 0b04 	subs.w	fp, sl, r4
 8003b8c:	d00b      	beq.n	8003ba6 <_svfiprintf_r+0x7e>
 8003b8e:	465b      	mov	r3, fp
 8003b90:	4622      	mov	r2, r4
 8003b92:	4629      	mov	r1, r5
 8003b94:	4638      	mov	r0, r7
 8003b96:	f7ff ff6b 	bl	8003a70 <__ssputs_r>
 8003b9a:	3001      	adds	r0, #1
 8003b9c:	f000 80a7 	beq.w	8003cee <_svfiprintf_r+0x1c6>
 8003ba0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003ba2:	445a      	add	r2, fp
 8003ba4:	9209      	str	r2, [sp, #36]	@ 0x24
 8003ba6:	f89a 3000 	ldrb.w	r3, [sl]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	f000 809f 	beq.w	8003cee <_svfiprintf_r+0x1c6>
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003bb6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003bba:	f10a 0a01 	add.w	sl, sl, #1
 8003bbe:	9304      	str	r3, [sp, #16]
 8003bc0:	9307      	str	r3, [sp, #28]
 8003bc2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003bc6:	931a      	str	r3, [sp, #104]	@ 0x68
 8003bc8:	4654      	mov	r4, sl
 8003bca:	2205      	movs	r2, #5
 8003bcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003bd0:	484e      	ldr	r0, [pc, #312]	@ (8003d0c <_svfiprintf_r+0x1e4>)
 8003bd2:	f7fc fb0d 	bl	80001f0 <memchr>
 8003bd6:	9a04      	ldr	r2, [sp, #16]
 8003bd8:	b9d8      	cbnz	r0, 8003c12 <_svfiprintf_r+0xea>
 8003bda:	06d0      	lsls	r0, r2, #27
 8003bdc:	bf44      	itt	mi
 8003bde:	2320      	movmi	r3, #32
 8003be0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003be4:	0711      	lsls	r1, r2, #28
 8003be6:	bf44      	itt	mi
 8003be8:	232b      	movmi	r3, #43	@ 0x2b
 8003bea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003bee:	f89a 3000 	ldrb.w	r3, [sl]
 8003bf2:	2b2a      	cmp	r3, #42	@ 0x2a
 8003bf4:	d015      	beq.n	8003c22 <_svfiprintf_r+0xfa>
 8003bf6:	9a07      	ldr	r2, [sp, #28]
 8003bf8:	4654      	mov	r4, sl
 8003bfa:	2000      	movs	r0, #0
 8003bfc:	f04f 0c0a 	mov.w	ip, #10
 8003c00:	4621      	mov	r1, r4
 8003c02:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003c06:	3b30      	subs	r3, #48	@ 0x30
 8003c08:	2b09      	cmp	r3, #9
 8003c0a:	d94b      	bls.n	8003ca4 <_svfiprintf_r+0x17c>
 8003c0c:	b1b0      	cbz	r0, 8003c3c <_svfiprintf_r+0x114>
 8003c0e:	9207      	str	r2, [sp, #28]
 8003c10:	e014      	b.n	8003c3c <_svfiprintf_r+0x114>
 8003c12:	eba0 0308 	sub.w	r3, r0, r8
 8003c16:	fa09 f303 	lsl.w	r3, r9, r3
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	9304      	str	r3, [sp, #16]
 8003c1e:	46a2      	mov	sl, r4
 8003c20:	e7d2      	b.n	8003bc8 <_svfiprintf_r+0xa0>
 8003c22:	9b03      	ldr	r3, [sp, #12]
 8003c24:	1d19      	adds	r1, r3, #4
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	9103      	str	r1, [sp, #12]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	bfbb      	ittet	lt
 8003c2e:	425b      	neglt	r3, r3
 8003c30:	f042 0202 	orrlt.w	r2, r2, #2
 8003c34:	9307      	strge	r3, [sp, #28]
 8003c36:	9307      	strlt	r3, [sp, #28]
 8003c38:	bfb8      	it	lt
 8003c3a:	9204      	strlt	r2, [sp, #16]
 8003c3c:	7823      	ldrb	r3, [r4, #0]
 8003c3e:	2b2e      	cmp	r3, #46	@ 0x2e
 8003c40:	d10a      	bne.n	8003c58 <_svfiprintf_r+0x130>
 8003c42:	7863      	ldrb	r3, [r4, #1]
 8003c44:	2b2a      	cmp	r3, #42	@ 0x2a
 8003c46:	d132      	bne.n	8003cae <_svfiprintf_r+0x186>
 8003c48:	9b03      	ldr	r3, [sp, #12]
 8003c4a:	1d1a      	adds	r2, r3, #4
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	9203      	str	r2, [sp, #12]
 8003c50:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003c54:	3402      	adds	r4, #2
 8003c56:	9305      	str	r3, [sp, #20]
 8003c58:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8003d1c <_svfiprintf_r+0x1f4>
 8003c5c:	7821      	ldrb	r1, [r4, #0]
 8003c5e:	2203      	movs	r2, #3
 8003c60:	4650      	mov	r0, sl
 8003c62:	f7fc fac5 	bl	80001f0 <memchr>
 8003c66:	b138      	cbz	r0, 8003c78 <_svfiprintf_r+0x150>
 8003c68:	9b04      	ldr	r3, [sp, #16]
 8003c6a:	eba0 000a 	sub.w	r0, r0, sl
 8003c6e:	2240      	movs	r2, #64	@ 0x40
 8003c70:	4082      	lsls	r2, r0
 8003c72:	4313      	orrs	r3, r2
 8003c74:	3401      	adds	r4, #1
 8003c76:	9304      	str	r3, [sp, #16]
 8003c78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c7c:	4824      	ldr	r0, [pc, #144]	@ (8003d10 <_svfiprintf_r+0x1e8>)
 8003c7e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003c82:	2206      	movs	r2, #6
 8003c84:	f7fc fab4 	bl	80001f0 <memchr>
 8003c88:	2800      	cmp	r0, #0
 8003c8a:	d036      	beq.n	8003cfa <_svfiprintf_r+0x1d2>
 8003c8c:	4b21      	ldr	r3, [pc, #132]	@ (8003d14 <_svfiprintf_r+0x1ec>)
 8003c8e:	bb1b      	cbnz	r3, 8003cd8 <_svfiprintf_r+0x1b0>
 8003c90:	9b03      	ldr	r3, [sp, #12]
 8003c92:	3307      	adds	r3, #7
 8003c94:	f023 0307 	bic.w	r3, r3, #7
 8003c98:	3308      	adds	r3, #8
 8003c9a:	9303      	str	r3, [sp, #12]
 8003c9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003c9e:	4433      	add	r3, r6
 8003ca0:	9309      	str	r3, [sp, #36]	@ 0x24
 8003ca2:	e76a      	b.n	8003b7a <_svfiprintf_r+0x52>
 8003ca4:	fb0c 3202 	mla	r2, ip, r2, r3
 8003ca8:	460c      	mov	r4, r1
 8003caa:	2001      	movs	r0, #1
 8003cac:	e7a8      	b.n	8003c00 <_svfiprintf_r+0xd8>
 8003cae:	2300      	movs	r3, #0
 8003cb0:	3401      	adds	r4, #1
 8003cb2:	9305      	str	r3, [sp, #20]
 8003cb4:	4619      	mov	r1, r3
 8003cb6:	f04f 0c0a 	mov.w	ip, #10
 8003cba:	4620      	mov	r0, r4
 8003cbc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003cc0:	3a30      	subs	r2, #48	@ 0x30
 8003cc2:	2a09      	cmp	r2, #9
 8003cc4:	d903      	bls.n	8003cce <_svfiprintf_r+0x1a6>
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d0c6      	beq.n	8003c58 <_svfiprintf_r+0x130>
 8003cca:	9105      	str	r1, [sp, #20]
 8003ccc:	e7c4      	b.n	8003c58 <_svfiprintf_r+0x130>
 8003cce:	fb0c 2101 	mla	r1, ip, r1, r2
 8003cd2:	4604      	mov	r4, r0
 8003cd4:	2301      	movs	r3, #1
 8003cd6:	e7f0      	b.n	8003cba <_svfiprintf_r+0x192>
 8003cd8:	ab03      	add	r3, sp, #12
 8003cda:	9300      	str	r3, [sp, #0]
 8003cdc:	462a      	mov	r2, r5
 8003cde:	4b0e      	ldr	r3, [pc, #56]	@ (8003d18 <_svfiprintf_r+0x1f0>)
 8003ce0:	a904      	add	r1, sp, #16
 8003ce2:	4638      	mov	r0, r7
 8003ce4:	f3af 8000 	nop.w
 8003ce8:	1c42      	adds	r2, r0, #1
 8003cea:	4606      	mov	r6, r0
 8003cec:	d1d6      	bne.n	8003c9c <_svfiprintf_r+0x174>
 8003cee:	89ab      	ldrh	r3, [r5, #12]
 8003cf0:	065b      	lsls	r3, r3, #25
 8003cf2:	f53f af2d 	bmi.w	8003b50 <_svfiprintf_r+0x28>
 8003cf6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003cf8:	e72c      	b.n	8003b54 <_svfiprintf_r+0x2c>
 8003cfa:	ab03      	add	r3, sp, #12
 8003cfc:	9300      	str	r3, [sp, #0]
 8003cfe:	462a      	mov	r2, r5
 8003d00:	4b05      	ldr	r3, [pc, #20]	@ (8003d18 <_svfiprintf_r+0x1f0>)
 8003d02:	a904      	add	r1, sp, #16
 8003d04:	4638      	mov	r0, r7
 8003d06:	f000 f879 	bl	8003dfc <_printf_i>
 8003d0a:	e7ed      	b.n	8003ce8 <_svfiprintf_r+0x1c0>
 8003d0c:	08004194 	.word	0x08004194
 8003d10:	0800419e 	.word	0x0800419e
 8003d14:	00000000 	.word	0x00000000
 8003d18:	08003a71 	.word	0x08003a71
 8003d1c:	0800419a 	.word	0x0800419a

08003d20 <_printf_common>:
 8003d20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003d24:	4616      	mov	r6, r2
 8003d26:	4698      	mov	r8, r3
 8003d28:	688a      	ldr	r2, [r1, #8]
 8003d2a:	690b      	ldr	r3, [r1, #16]
 8003d2c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003d30:	4293      	cmp	r3, r2
 8003d32:	bfb8      	it	lt
 8003d34:	4613      	movlt	r3, r2
 8003d36:	6033      	str	r3, [r6, #0]
 8003d38:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003d3c:	4607      	mov	r7, r0
 8003d3e:	460c      	mov	r4, r1
 8003d40:	b10a      	cbz	r2, 8003d46 <_printf_common+0x26>
 8003d42:	3301      	adds	r3, #1
 8003d44:	6033      	str	r3, [r6, #0]
 8003d46:	6823      	ldr	r3, [r4, #0]
 8003d48:	0699      	lsls	r1, r3, #26
 8003d4a:	bf42      	ittt	mi
 8003d4c:	6833      	ldrmi	r3, [r6, #0]
 8003d4e:	3302      	addmi	r3, #2
 8003d50:	6033      	strmi	r3, [r6, #0]
 8003d52:	6825      	ldr	r5, [r4, #0]
 8003d54:	f015 0506 	ands.w	r5, r5, #6
 8003d58:	d106      	bne.n	8003d68 <_printf_common+0x48>
 8003d5a:	f104 0a19 	add.w	sl, r4, #25
 8003d5e:	68e3      	ldr	r3, [r4, #12]
 8003d60:	6832      	ldr	r2, [r6, #0]
 8003d62:	1a9b      	subs	r3, r3, r2
 8003d64:	42ab      	cmp	r3, r5
 8003d66:	dc26      	bgt.n	8003db6 <_printf_common+0x96>
 8003d68:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003d6c:	6822      	ldr	r2, [r4, #0]
 8003d6e:	3b00      	subs	r3, #0
 8003d70:	bf18      	it	ne
 8003d72:	2301      	movne	r3, #1
 8003d74:	0692      	lsls	r2, r2, #26
 8003d76:	d42b      	bmi.n	8003dd0 <_printf_common+0xb0>
 8003d78:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003d7c:	4641      	mov	r1, r8
 8003d7e:	4638      	mov	r0, r7
 8003d80:	47c8      	blx	r9
 8003d82:	3001      	adds	r0, #1
 8003d84:	d01e      	beq.n	8003dc4 <_printf_common+0xa4>
 8003d86:	6823      	ldr	r3, [r4, #0]
 8003d88:	6922      	ldr	r2, [r4, #16]
 8003d8a:	f003 0306 	and.w	r3, r3, #6
 8003d8e:	2b04      	cmp	r3, #4
 8003d90:	bf02      	ittt	eq
 8003d92:	68e5      	ldreq	r5, [r4, #12]
 8003d94:	6833      	ldreq	r3, [r6, #0]
 8003d96:	1aed      	subeq	r5, r5, r3
 8003d98:	68a3      	ldr	r3, [r4, #8]
 8003d9a:	bf0c      	ite	eq
 8003d9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003da0:	2500      	movne	r5, #0
 8003da2:	4293      	cmp	r3, r2
 8003da4:	bfc4      	itt	gt
 8003da6:	1a9b      	subgt	r3, r3, r2
 8003da8:	18ed      	addgt	r5, r5, r3
 8003daa:	2600      	movs	r6, #0
 8003dac:	341a      	adds	r4, #26
 8003dae:	42b5      	cmp	r5, r6
 8003db0:	d11a      	bne.n	8003de8 <_printf_common+0xc8>
 8003db2:	2000      	movs	r0, #0
 8003db4:	e008      	b.n	8003dc8 <_printf_common+0xa8>
 8003db6:	2301      	movs	r3, #1
 8003db8:	4652      	mov	r2, sl
 8003dba:	4641      	mov	r1, r8
 8003dbc:	4638      	mov	r0, r7
 8003dbe:	47c8      	blx	r9
 8003dc0:	3001      	adds	r0, #1
 8003dc2:	d103      	bne.n	8003dcc <_printf_common+0xac>
 8003dc4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003dc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003dcc:	3501      	adds	r5, #1
 8003dce:	e7c6      	b.n	8003d5e <_printf_common+0x3e>
 8003dd0:	18e1      	adds	r1, r4, r3
 8003dd2:	1c5a      	adds	r2, r3, #1
 8003dd4:	2030      	movs	r0, #48	@ 0x30
 8003dd6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003dda:	4422      	add	r2, r4
 8003ddc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003de0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003de4:	3302      	adds	r3, #2
 8003de6:	e7c7      	b.n	8003d78 <_printf_common+0x58>
 8003de8:	2301      	movs	r3, #1
 8003dea:	4622      	mov	r2, r4
 8003dec:	4641      	mov	r1, r8
 8003dee:	4638      	mov	r0, r7
 8003df0:	47c8      	blx	r9
 8003df2:	3001      	adds	r0, #1
 8003df4:	d0e6      	beq.n	8003dc4 <_printf_common+0xa4>
 8003df6:	3601      	adds	r6, #1
 8003df8:	e7d9      	b.n	8003dae <_printf_common+0x8e>
	...

08003dfc <_printf_i>:
 8003dfc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003e00:	7e0f      	ldrb	r7, [r1, #24]
 8003e02:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003e04:	2f78      	cmp	r7, #120	@ 0x78
 8003e06:	4691      	mov	r9, r2
 8003e08:	4680      	mov	r8, r0
 8003e0a:	460c      	mov	r4, r1
 8003e0c:	469a      	mov	sl, r3
 8003e0e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003e12:	d807      	bhi.n	8003e24 <_printf_i+0x28>
 8003e14:	2f62      	cmp	r7, #98	@ 0x62
 8003e16:	d80a      	bhi.n	8003e2e <_printf_i+0x32>
 8003e18:	2f00      	cmp	r7, #0
 8003e1a:	f000 80d1 	beq.w	8003fc0 <_printf_i+0x1c4>
 8003e1e:	2f58      	cmp	r7, #88	@ 0x58
 8003e20:	f000 80b8 	beq.w	8003f94 <_printf_i+0x198>
 8003e24:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003e28:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003e2c:	e03a      	b.n	8003ea4 <_printf_i+0xa8>
 8003e2e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003e32:	2b15      	cmp	r3, #21
 8003e34:	d8f6      	bhi.n	8003e24 <_printf_i+0x28>
 8003e36:	a101      	add	r1, pc, #4	@ (adr r1, 8003e3c <_printf_i+0x40>)
 8003e38:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003e3c:	08003e95 	.word	0x08003e95
 8003e40:	08003ea9 	.word	0x08003ea9
 8003e44:	08003e25 	.word	0x08003e25
 8003e48:	08003e25 	.word	0x08003e25
 8003e4c:	08003e25 	.word	0x08003e25
 8003e50:	08003e25 	.word	0x08003e25
 8003e54:	08003ea9 	.word	0x08003ea9
 8003e58:	08003e25 	.word	0x08003e25
 8003e5c:	08003e25 	.word	0x08003e25
 8003e60:	08003e25 	.word	0x08003e25
 8003e64:	08003e25 	.word	0x08003e25
 8003e68:	08003fa7 	.word	0x08003fa7
 8003e6c:	08003ed3 	.word	0x08003ed3
 8003e70:	08003f61 	.word	0x08003f61
 8003e74:	08003e25 	.word	0x08003e25
 8003e78:	08003e25 	.word	0x08003e25
 8003e7c:	08003fc9 	.word	0x08003fc9
 8003e80:	08003e25 	.word	0x08003e25
 8003e84:	08003ed3 	.word	0x08003ed3
 8003e88:	08003e25 	.word	0x08003e25
 8003e8c:	08003e25 	.word	0x08003e25
 8003e90:	08003f69 	.word	0x08003f69
 8003e94:	6833      	ldr	r3, [r6, #0]
 8003e96:	1d1a      	adds	r2, r3, #4
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	6032      	str	r2, [r6, #0]
 8003e9c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003ea0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	e09c      	b.n	8003fe2 <_printf_i+0x1e6>
 8003ea8:	6833      	ldr	r3, [r6, #0]
 8003eaa:	6820      	ldr	r0, [r4, #0]
 8003eac:	1d19      	adds	r1, r3, #4
 8003eae:	6031      	str	r1, [r6, #0]
 8003eb0:	0606      	lsls	r6, r0, #24
 8003eb2:	d501      	bpl.n	8003eb8 <_printf_i+0xbc>
 8003eb4:	681d      	ldr	r5, [r3, #0]
 8003eb6:	e003      	b.n	8003ec0 <_printf_i+0xc4>
 8003eb8:	0645      	lsls	r5, r0, #25
 8003eba:	d5fb      	bpl.n	8003eb4 <_printf_i+0xb8>
 8003ebc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003ec0:	2d00      	cmp	r5, #0
 8003ec2:	da03      	bge.n	8003ecc <_printf_i+0xd0>
 8003ec4:	232d      	movs	r3, #45	@ 0x2d
 8003ec6:	426d      	negs	r5, r5
 8003ec8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003ecc:	4858      	ldr	r0, [pc, #352]	@ (8004030 <_printf_i+0x234>)
 8003ece:	230a      	movs	r3, #10
 8003ed0:	e011      	b.n	8003ef6 <_printf_i+0xfa>
 8003ed2:	6821      	ldr	r1, [r4, #0]
 8003ed4:	6833      	ldr	r3, [r6, #0]
 8003ed6:	0608      	lsls	r0, r1, #24
 8003ed8:	f853 5b04 	ldr.w	r5, [r3], #4
 8003edc:	d402      	bmi.n	8003ee4 <_printf_i+0xe8>
 8003ede:	0649      	lsls	r1, r1, #25
 8003ee0:	bf48      	it	mi
 8003ee2:	b2ad      	uxthmi	r5, r5
 8003ee4:	2f6f      	cmp	r7, #111	@ 0x6f
 8003ee6:	4852      	ldr	r0, [pc, #328]	@ (8004030 <_printf_i+0x234>)
 8003ee8:	6033      	str	r3, [r6, #0]
 8003eea:	bf14      	ite	ne
 8003eec:	230a      	movne	r3, #10
 8003eee:	2308      	moveq	r3, #8
 8003ef0:	2100      	movs	r1, #0
 8003ef2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003ef6:	6866      	ldr	r6, [r4, #4]
 8003ef8:	60a6      	str	r6, [r4, #8]
 8003efa:	2e00      	cmp	r6, #0
 8003efc:	db05      	blt.n	8003f0a <_printf_i+0x10e>
 8003efe:	6821      	ldr	r1, [r4, #0]
 8003f00:	432e      	orrs	r6, r5
 8003f02:	f021 0104 	bic.w	r1, r1, #4
 8003f06:	6021      	str	r1, [r4, #0]
 8003f08:	d04b      	beq.n	8003fa2 <_printf_i+0x1a6>
 8003f0a:	4616      	mov	r6, r2
 8003f0c:	fbb5 f1f3 	udiv	r1, r5, r3
 8003f10:	fb03 5711 	mls	r7, r3, r1, r5
 8003f14:	5dc7      	ldrb	r7, [r0, r7]
 8003f16:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003f1a:	462f      	mov	r7, r5
 8003f1c:	42bb      	cmp	r3, r7
 8003f1e:	460d      	mov	r5, r1
 8003f20:	d9f4      	bls.n	8003f0c <_printf_i+0x110>
 8003f22:	2b08      	cmp	r3, #8
 8003f24:	d10b      	bne.n	8003f3e <_printf_i+0x142>
 8003f26:	6823      	ldr	r3, [r4, #0]
 8003f28:	07df      	lsls	r7, r3, #31
 8003f2a:	d508      	bpl.n	8003f3e <_printf_i+0x142>
 8003f2c:	6923      	ldr	r3, [r4, #16]
 8003f2e:	6861      	ldr	r1, [r4, #4]
 8003f30:	4299      	cmp	r1, r3
 8003f32:	bfde      	ittt	le
 8003f34:	2330      	movle	r3, #48	@ 0x30
 8003f36:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003f3a:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8003f3e:	1b92      	subs	r2, r2, r6
 8003f40:	6122      	str	r2, [r4, #16]
 8003f42:	f8cd a000 	str.w	sl, [sp]
 8003f46:	464b      	mov	r3, r9
 8003f48:	aa03      	add	r2, sp, #12
 8003f4a:	4621      	mov	r1, r4
 8003f4c:	4640      	mov	r0, r8
 8003f4e:	f7ff fee7 	bl	8003d20 <_printf_common>
 8003f52:	3001      	adds	r0, #1
 8003f54:	d14a      	bne.n	8003fec <_printf_i+0x1f0>
 8003f56:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003f5a:	b004      	add	sp, #16
 8003f5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003f60:	6823      	ldr	r3, [r4, #0]
 8003f62:	f043 0320 	orr.w	r3, r3, #32
 8003f66:	6023      	str	r3, [r4, #0]
 8003f68:	4832      	ldr	r0, [pc, #200]	@ (8004034 <_printf_i+0x238>)
 8003f6a:	2778      	movs	r7, #120	@ 0x78
 8003f6c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003f70:	6823      	ldr	r3, [r4, #0]
 8003f72:	6831      	ldr	r1, [r6, #0]
 8003f74:	061f      	lsls	r7, r3, #24
 8003f76:	f851 5b04 	ldr.w	r5, [r1], #4
 8003f7a:	d402      	bmi.n	8003f82 <_printf_i+0x186>
 8003f7c:	065f      	lsls	r7, r3, #25
 8003f7e:	bf48      	it	mi
 8003f80:	b2ad      	uxthmi	r5, r5
 8003f82:	6031      	str	r1, [r6, #0]
 8003f84:	07d9      	lsls	r1, r3, #31
 8003f86:	bf44      	itt	mi
 8003f88:	f043 0320 	orrmi.w	r3, r3, #32
 8003f8c:	6023      	strmi	r3, [r4, #0]
 8003f8e:	b11d      	cbz	r5, 8003f98 <_printf_i+0x19c>
 8003f90:	2310      	movs	r3, #16
 8003f92:	e7ad      	b.n	8003ef0 <_printf_i+0xf4>
 8003f94:	4826      	ldr	r0, [pc, #152]	@ (8004030 <_printf_i+0x234>)
 8003f96:	e7e9      	b.n	8003f6c <_printf_i+0x170>
 8003f98:	6823      	ldr	r3, [r4, #0]
 8003f9a:	f023 0320 	bic.w	r3, r3, #32
 8003f9e:	6023      	str	r3, [r4, #0]
 8003fa0:	e7f6      	b.n	8003f90 <_printf_i+0x194>
 8003fa2:	4616      	mov	r6, r2
 8003fa4:	e7bd      	b.n	8003f22 <_printf_i+0x126>
 8003fa6:	6833      	ldr	r3, [r6, #0]
 8003fa8:	6825      	ldr	r5, [r4, #0]
 8003faa:	6961      	ldr	r1, [r4, #20]
 8003fac:	1d18      	adds	r0, r3, #4
 8003fae:	6030      	str	r0, [r6, #0]
 8003fb0:	062e      	lsls	r6, r5, #24
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	d501      	bpl.n	8003fba <_printf_i+0x1be>
 8003fb6:	6019      	str	r1, [r3, #0]
 8003fb8:	e002      	b.n	8003fc0 <_printf_i+0x1c4>
 8003fba:	0668      	lsls	r0, r5, #25
 8003fbc:	d5fb      	bpl.n	8003fb6 <_printf_i+0x1ba>
 8003fbe:	8019      	strh	r1, [r3, #0]
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	6123      	str	r3, [r4, #16]
 8003fc4:	4616      	mov	r6, r2
 8003fc6:	e7bc      	b.n	8003f42 <_printf_i+0x146>
 8003fc8:	6833      	ldr	r3, [r6, #0]
 8003fca:	1d1a      	adds	r2, r3, #4
 8003fcc:	6032      	str	r2, [r6, #0]
 8003fce:	681e      	ldr	r6, [r3, #0]
 8003fd0:	6862      	ldr	r2, [r4, #4]
 8003fd2:	2100      	movs	r1, #0
 8003fd4:	4630      	mov	r0, r6
 8003fd6:	f7fc f90b 	bl	80001f0 <memchr>
 8003fda:	b108      	cbz	r0, 8003fe0 <_printf_i+0x1e4>
 8003fdc:	1b80      	subs	r0, r0, r6
 8003fde:	6060      	str	r0, [r4, #4]
 8003fe0:	6863      	ldr	r3, [r4, #4]
 8003fe2:	6123      	str	r3, [r4, #16]
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003fea:	e7aa      	b.n	8003f42 <_printf_i+0x146>
 8003fec:	6923      	ldr	r3, [r4, #16]
 8003fee:	4632      	mov	r2, r6
 8003ff0:	4649      	mov	r1, r9
 8003ff2:	4640      	mov	r0, r8
 8003ff4:	47d0      	blx	sl
 8003ff6:	3001      	adds	r0, #1
 8003ff8:	d0ad      	beq.n	8003f56 <_printf_i+0x15a>
 8003ffa:	6823      	ldr	r3, [r4, #0]
 8003ffc:	079b      	lsls	r3, r3, #30
 8003ffe:	d413      	bmi.n	8004028 <_printf_i+0x22c>
 8004000:	68e0      	ldr	r0, [r4, #12]
 8004002:	9b03      	ldr	r3, [sp, #12]
 8004004:	4298      	cmp	r0, r3
 8004006:	bfb8      	it	lt
 8004008:	4618      	movlt	r0, r3
 800400a:	e7a6      	b.n	8003f5a <_printf_i+0x15e>
 800400c:	2301      	movs	r3, #1
 800400e:	4632      	mov	r2, r6
 8004010:	4649      	mov	r1, r9
 8004012:	4640      	mov	r0, r8
 8004014:	47d0      	blx	sl
 8004016:	3001      	adds	r0, #1
 8004018:	d09d      	beq.n	8003f56 <_printf_i+0x15a>
 800401a:	3501      	adds	r5, #1
 800401c:	68e3      	ldr	r3, [r4, #12]
 800401e:	9903      	ldr	r1, [sp, #12]
 8004020:	1a5b      	subs	r3, r3, r1
 8004022:	42ab      	cmp	r3, r5
 8004024:	dcf2      	bgt.n	800400c <_printf_i+0x210>
 8004026:	e7eb      	b.n	8004000 <_printf_i+0x204>
 8004028:	2500      	movs	r5, #0
 800402a:	f104 0619 	add.w	r6, r4, #25
 800402e:	e7f5      	b.n	800401c <_printf_i+0x220>
 8004030:	080041a5 	.word	0x080041a5
 8004034:	080041b6 	.word	0x080041b6

08004038 <memmove>:
 8004038:	4288      	cmp	r0, r1
 800403a:	b510      	push	{r4, lr}
 800403c:	eb01 0402 	add.w	r4, r1, r2
 8004040:	d902      	bls.n	8004048 <memmove+0x10>
 8004042:	4284      	cmp	r4, r0
 8004044:	4623      	mov	r3, r4
 8004046:	d807      	bhi.n	8004058 <memmove+0x20>
 8004048:	1e43      	subs	r3, r0, #1
 800404a:	42a1      	cmp	r1, r4
 800404c:	d008      	beq.n	8004060 <memmove+0x28>
 800404e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004052:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004056:	e7f8      	b.n	800404a <memmove+0x12>
 8004058:	4402      	add	r2, r0
 800405a:	4601      	mov	r1, r0
 800405c:	428a      	cmp	r2, r1
 800405e:	d100      	bne.n	8004062 <memmove+0x2a>
 8004060:	bd10      	pop	{r4, pc}
 8004062:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004066:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800406a:	e7f7      	b.n	800405c <memmove+0x24>

0800406c <_sbrk_r>:
 800406c:	b538      	push	{r3, r4, r5, lr}
 800406e:	4d06      	ldr	r5, [pc, #24]	@ (8004088 <_sbrk_r+0x1c>)
 8004070:	2300      	movs	r3, #0
 8004072:	4604      	mov	r4, r0
 8004074:	4608      	mov	r0, r1
 8004076:	602b      	str	r3, [r5, #0]
 8004078:	f7fd fb90 	bl	800179c <_sbrk>
 800407c:	1c43      	adds	r3, r0, #1
 800407e:	d102      	bne.n	8004086 <_sbrk_r+0x1a>
 8004080:	682b      	ldr	r3, [r5, #0]
 8004082:	b103      	cbz	r3, 8004086 <_sbrk_r+0x1a>
 8004084:	6023      	str	r3, [r4, #0]
 8004086:	bd38      	pop	{r3, r4, r5, pc}
 8004088:	20000248 	.word	0x20000248

0800408c <memcpy>:
 800408c:	440a      	add	r2, r1
 800408e:	4291      	cmp	r1, r2
 8004090:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8004094:	d100      	bne.n	8004098 <memcpy+0xc>
 8004096:	4770      	bx	lr
 8004098:	b510      	push	{r4, lr}
 800409a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800409e:	f803 4f01 	strb.w	r4, [r3, #1]!
 80040a2:	4291      	cmp	r1, r2
 80040a4:	d1f9      	bne.n	800409a <memcpy+0xe>
 80040a6:	bd10      	pop	{r4, pc}

080040a8 <_realloc_r>:
 80040a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040ac:	4607      	mov	r7, r0
 80040ae:	4614      	mov	r4, r2
 80040b0:	460d      	mov	r5, r1
 80040b2:	b921      	cbnz	r1, 80040be <_realloc_r+0x16>
 80040b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80040b8:	4611      	mov	r1, r2
 80040ba:	f7ff bc4d 	b.w	8003958 <_malloc_r>
 80040be:	b92a      	cbnz	r2, 80040cc <_realloc_r+0x24>
 80040c0:	f7ff fbde 	bl	8003880 <_free_r>
 80040c4:	4625      	mov	r5, r4
 80040c6:	4628      	mov	r0, r5
 80040c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80040cc:	f000 f81a 	bl	8004104 <_malloc_usable_size_r>
 80040d0:	4284      	cmp	r4, r0
 80040d2:	4606      	mov	r6, r0
 80040d4:	d802      	bhi.n	80040dc <_realloc_r+0x34>
 80040d6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80040da:	d8f4      	bhi.n	80040c6 <_realloc_r+0x1e>
 80040dc:	4621      	mov	r1, r4
 80040de:	4638      	mov	r0, r7
 80040e0:	f7ff fc3a 	bl	8003958 <_malloc_r>
 80040e4:	4680      	mov	r8, r0
 80040e6:	b908      	cbnz	r0, 80040ec <_realloc_r+0x44>
 80040e8:	4645      	mov	r5, r8
 80040ea:	e7ec      	b.n	80040c6 <_realloc_r+0x1e>
 80040ec:	42b4      	cmp	r4, r6
 80040ee:	4622      	mov	r2, r4
 80040f0:	4629      	mov	r1, r5
 80040f2:	bf28      	it	cs
 80040f4:	4632      	movcs	r2, r6
 80040f6:	f7ff ffc9 	bl	800408c <memcpy>
 80040fa:	4629      	mov	r1, r5
 80040fc:	4638      	mov	r0, r7
 80040fe:	f7ff fbbf 	bl	8003880 <_free_r>
 8004102:	e7f1      	b.n	80040e8 <_realloc_r+0x40>

08004104 <_malloc_usable_size_r>:
 8004104:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004108:	1f18      	subs	r0, r3, #4
 800410a:	2b00      	cmp	r3, #0
 800410c:	bfbc      	itt	lt
 800410e:	580b      	ldrlt	r3, [r1, r0]
 8004110:	18c0      	addlt	r0, r0, r3
 8004112:	4770      	bx	lr

08004114 <_init>:
 8004114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004116:	bf00      	nop
 8004118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800411a:	bc08      	pop	{r3}
 800411c:	469e      	mov	lr, r3
 800411e:	4770      	bx	lr

08004120 <_fini>:
 8004120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004122:	bf00      	nop
 8004124:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004126:	bc08      	pop	{r3}
 8004128:	469e      	mov	lr, r3
 800412a:	4770      	bx	lr
